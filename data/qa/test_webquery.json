[
 {
  "idx": "webquery-test-1",
  "doc": "how to open a text file on python",
  "code": "def get_file_string(filepath):\n    \"\"\"Get string from file.\"\"\"\n    with open(os.path.abspath(filepath)) as f:\n        return f.read()",
  "label": 1,
  "code_tokens": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )",
  "docstring_tokens": "Get string from file ."
 },
 {
  "idx": "webquery-test-2",
  "doc": "how to open a text file on python",
  "code": "def file_read(filename):\n    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\n    fobj = open(filename,'r');\n    source = fobj.read();\n    fobj.close()\n    return source",
  "label": 1,
  "code_tokens": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
  "docstring_tokens": "Read a file and close it . Returns the file source ."
 },
 {
  "idx": "webquery-test-3",
  "doc": "how to get count of rows in excel sheet python",
  "code": "def series_table_row_offset(self, series):\n        \"\"\"\n        Return the number of rows preceding the data table for *series* in\n        the Excel worksheet.\n        \"\"\"\n        title_and_spacer_rows = series.index * 2\n        data_point_rows = series.data_point_offset\n        return title_and_spacer_rows + data_point_rows",
  "label": 1,
  "code_tokens": "def series_table_row_offset ( self , series ) : title_and_spacer_rows = series . index * 2 data_point_rows = series . data_point_offset return title_and_spacer_rows + data_point_rows",
  "docstring_tokens": "Return the number of rows preceding the data table for * series * in the Excel worksheet ."
 },
 {
  "idx": "webquery-test-4",
  "doc": "how to get count of rows in excel sheet python",
  "code": "def y_values_ref(self, series):\n        \"\"\"\n        The Excel worksheet reference to the Y values for this chart (not\n        including the column label).\n        \"\"\"\n        top_row = self.series_table_row_offset(series) + 2\n        bottom_row = top_row + len(series) - 1\n        return \"Sheet1!$B$%d:$B$%d\" % (top_row, bottom_row)",
  "label": 1,
  "code_tokens": "def y_values_ref ( self , series ) : top_row = self . series_table_row_offset ( series ) + 2 bottom_row = top_row + len ( series ) - 1 return \"Sheet1!$B$%d:$B$%d\" % ( top_row , bottom_row )",
  "docstring_tokens": "The Excel worksheet reference to the Y values for this chart ( not including the column label ) ."
 },
 {
  "idx": "webquery-test-5",
  "doc": "python list delete elelment contain character",
  "code": "def clean(self, text):\n        \"\"\"Remove all unwanted characters from text.\"\"\"\n        return ''.join([c for c in text if c in self.alphabet])",
  "label": 0,
  "code_tokens": "def clean ( self , text ) : return '' . join ( [ c for c in text if c in self . alphabet ] )",
  "docstring_tokens": "Remove all unwanted characters from text ."
 },
 {
  "idx": "webquery-test-6",
  "doc": "python list delete elelment contain character",
  "code": "def is_break_tag(self, el):\n        \"\"\"Check if tag is an element we should break on.\"\"\"\n\n        name = el.name\n        return name in self.break_tags or name in self.user_break_tags",
  "label": 0,
  "code_tokens": "def is_break_tag ( self , el ) : name = el . name return name in self . break_tags or name in self . user_break_tags",
  "docstring_tokens": "Check if tag is an element we should break on ."
 },
 {
  "idx": "webquery-test-7",
  "doc": "remove all non numeric characters python",
  "code": "def _remove_invalid_char(s):\n    \"\"\"Remove invalid and dangerous characters from a string.\"\"\"\n\n    s = ''.join([i if ord(i) >= 32 and ord(i) < 127 else '' for i in s])\n    s = s.translate(dict.fromkeys(map(ord, \"_%~#\\\\{}\\\":\")))\n    return s",
  "label": 0,
  "code_tokens": "def _remove_invalid_char ( s ) : s = '' . join ( [ i if ord ( i ) >= 32 and ord ( i ) < 127 else '' for i in s ] ) s = s . translate ( dict . fromkeys ( map ( ord , \"_%~#\\\\{}\\\":\" ) ) ) return s",
  "docstring_tokens": "Remove invalid and dangerous characters from a string ."
 },
 {
  "idx": "webquery-test-8",
  "doc": "remove all non numeric characters python",
  "code": "def clean_text(text):\n    \"\"\"Clean text before parsing.\"\"\"\n    # Replace a few nasty unicode characters with their ASCII equivalent\n    maps = {u'\u00d7': u'x', u'\u2013': u'-', u'\u2212': '-'}\n    for element in maps:\n        text = text.replace(element, maps[element])\n\n    # Replace genitives\n    text = re.sub(r'(?<=\\w)\\'s\\b|(?<=\\w)s\\'(?!\\w)', '  ', text)\n\n    logging.debug(u'Clean text: \"%s\"', text)\n\n    return text",
  "label": 0,
  "code_tokens": "def clean_text ( text ) : # Replace a few nasty unicode characters with their ASCII equivalent maps = { u'\u00d7':   'x',   '\u2013': u ' ', u ' ': '-' }   for element in maps : text = text . replace ( element , maps [ element ] ) # Replace genitives text = re . sub ( r'(?<=\\w)\\'s\\b|(?<=\\w)s\\'(?!\\w)' , '  ' , text ) logging . debug ( u'Clean text: \"%s\"' , text ) return text",
  "docstring_tokens": "Clean text before parsing ."
 },
 {
  "idx": "webquery-test-9",
  "doc": "python recieve push notifications",
  "code": "def notify(self, msgtype, method, params):\n        \"\"\"Handle an incoming notify request.\"\"\"\n        self.dispatch.call(method, params)",
  "label": 1,
  "code_tokens": "def notify ( self , msgtype , method , params ) : self . dispatch . call ( method , params )",
  "docstring_tokens": "Handle an incoming notify request ."
 },
 {
  "idx": "webquery-test-10",
  "doc": "python recieve push notifications",
  "code": "def write(self, data):\n        \"\"\"\n        Write the given data to the file.\n        \"\"\"\n        \n        # Do the write\n        self.backingStream.write(data)\n        \n        for listener in self.writeListeners:\n            # Send out notifications\n            listener(len(data))",
  "label": 0,
  "code_tokens": "def write ( self , data ) : # Do the write self . backingStream . write ( data ) for listener in self . writeListeners : # Send out notifications listener ( len ( data ) )",
  "docstring_tokens": "Write the given data to the file ."
 },
 {
  "idx": "webquery-test-11",
  "doc": "python git get latest commit",
  "code": "def latest_commit(self) -> git.Commit:\n        \"\"\"\n        :return: latest commit\n        :rtype: git.Commit object\n        \"\"\"\n        latest_commit: git.Commit = self.repo.head.commit\n        LOGGER.debug('latest commit: %s', latest_commit)\n        return latest_commit",
  "label": 1,
  "code_tokens": "def latest_commit ( self ) -> git . Commit : latest_commit : git . Commit = self . repo . head . commit LOGGER . debug ( 'latest commit: %s' , latest_commit ) return latest_commit",
  "docstring_tokens": ": return : latest commit : rtype : git . Commit object"
 },
 {
  "idx": "webquery-test-12",
  "doc": "python git get latest commit",
  "code": "def get_last_commit_line(git_path=None):\n    \"\"\"\n    Get one-line description of HEAD commit for repository in current dir.\n    \"\"\"\n    if git_path is None: git_path = GIT_PATH\n    output = check_output([git_path, \"log\", \"--pretty=format:'%ad %h %s'\",\n                           \"--date=short\", \"-n1\"])\n    return output.strip()[1:-1]",
  "label": 1,
  "code_tokens": "def get_last_commit_line ( git_path = None ) : if git_path is None : git_path = GIT_PATH output = check_output ( [ git_path , \"log\" , \"--pretty=format:'%ad %h %s'\" , \"--date=short\" , \"-n1\" ] ) return output . strip ( ) [ 1 : - 1 ]",
  "docstring_tokens": "Get one - line description of HEAD commit for repository in current dir ."
 },
 {
  "idx": "webquery-test-13",
  "doc": "can you remove letters in strings in python",
  "code": "def clean(self, text):\n        \"\"\"Remove all unwanted characters from text.\"\"\"\n        return ''.join([c for c in text if c in self.alphabet])",
  "label": 1,
  "code_tokens": "def clean ( self , text ) : return '' . join ( [ c for c in text if c in self . alphabet ] )",
  "docstring_tokens": "Remove all unwanted characters from text ."
 },
 {
  "idx": "webquery-test-14",
  "doc": "can you remove letters in strings in python",
  "code": "def strip_accents(s):\n    \"\"\"\n    Strip accents to prepare for slugification.\n    \"\"\"\n    nfkd = unicodedata.normalize('NFKD', unicode(s))\n    return u''.join(ch for ch in nfkd if not unicodedata.combining(ch))",
  "label": 0,
  "code_tokens": "def strip_accents ( s ) : nfkd = unicodedata . normalize ( 'NFKD' , unicode ( s ) ) return u'' . join ( ch for ch in nfkd if not unicodedata . combining ( ch ) )",
  "docstring_tokens": "Strip accents to prepare for slugification ."
 },
 {
  "idx": "webquery-test-15",
  "doc": "how to make word into letter by letter in python",
  "code": "def casefold_with_i_dots(text):\n    \"\"\"\n    Convert capital I's and capital dotted \u0130's to lowercase in the way\n    that's appropriate for Turkish and related languages, then case-fold\n    the rest of the letters.\n    \"\"\"\n    text = unicodedata.normalize('NFC', text).replace('\u0130', 'i').replace('I', '\u0131')\n    return text.casefold()",
  "label": 0,
  "code_tokens": "def casefold_with_i_dots ( text ) : text = unicodedata . normalize ( 'NFC' , text ) . replace ( '\u0130',   i') . r eplace( ' I',   \u0131')  return text . casefold ( )",
  "docstring_tokens": "Convert capital I s and capital dotted \u0130 s to lowercase in the way that s appropriate for Turkish and related languages then case - fold the rest of the letters ."
 },
 {
  "idx": "webquery-test-16",
  "doc": "how to make word into letter by letter in python",
  "code": "def clean(self, text):\n        \"\"\"Remove all unwanted characters from text.\"\"\"\n        return ''.join([c for c in text if c in self.alphabet])",
  "label": 0,
  "code_tokens": "def clean ( self , text ) : return '' . join ( [ c for c in text if c in self . alphabet ] )",
  "docstring_tokens": "Remove all unwanted characters from text ."
 },
 {
  "idx": "webquery-test-17",
  "doc": "python src folder convention",
  "code": "def examples(directory):\n    \"\"\"\n    Generate example strategies to target folder\n    \"\"\"\n    source_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"examples\")\n\n    try:\n        shutil.copytree(source_dir, os.path.join(directory, \"examples\"))\n    except OSError as e:\n        if e.errno == errno.EEXIST:\n            six.print_(\"Folder examples is exists.\")",
  "label": 0,
  "code_tokens": "def examples ( directory ) : source_dir = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ ) ) , \"examples\" ) try : shutil . copytree ( source_dir , os . path . join ( directory , \"examples\" ) ) except OSError as e : if e . errno == errno . EEXIST : six . print_ ( \"Folder examples is exists.\" )",
  "docstring_tokens": "Generate example strategies to target folder"
 },
 {
  "idx": "webquery-test-18",
  "doc": "python src folder convention",
  "code": "def normalize_path(filename):\n    \"\"\"Normalize a file/dir name for comparison purposes\"\"\"\n    return os.path.normcase(os.path.realpath(os.path.normpath(_cygwin_patch(filename))))",
  "label": 0,
  "code_tokens": "def normalize_path ( filename ) : return os . path . normcase ( os . path . realpath ( os . path . normpath ( _cygwin_patch ( filename ) ) ) )",
  "docstring_tokens": "Normalize a file / dir name for comparison purposes"
 },
 {
  "idx": "webquery-test-19",
  "doc": "how to navigate folders in python",
  "code": "def listfolder(p):\n    \"\"\"\n    generator of list folder in the path.\n    folders only\n    \"\"\"\n    for entry in scandir.scandir(p):\n        if entry.is_dir():\n            yield entry.name",
  "label": 1,
  "code_tokens": "def listfolder ( p ) : for entry in scandir . scandir ( p ) : if entry . is_dir ( ) : yield entry . name",
  "docstring_tokens": "generator of list folder in the path . folders only"
 },
 {
  "idx": "webquery-test-20",
  "doc": "how to navigate folders in python",
  "code": "def get_all_files(folder):\n    \"\"\"\n    Generator that loops through all absolute paths of the files within folder\n\n    Parameters\n    ----------\n    folder: str\n    Root folder start point for recursive search.\n\n    Yields\n    ------\n    fpath: str\n    Absolute path of one file in the folders\n    \"\"\"\n    for path, dirlist, filelist in os.walk(folder):\n        for fn in filelist:\n            yield op.join(path, fn)",
  "label": 1,
  "code_tokens": "def get_all_files ( folder ) : for path , dirlist , filelist in os . walk ( folder ) : for fn in filelist : yield op . join ( path , fn )",
  "docstring_tokens": "Generator that loops through all absolute paths of the files within folder"
 },
 {
  "idx": "webquery-test-21",
  "doc": "feed python variable for jinja template",
  "code": "def render_template(template_name, **context):\n    \"\"\"Render a template into a response.\"\"\"\n    tmpl = jinja_env.get_template(template_name)\n    context[\"url_for\"] = url_for\n    return Response(tmpl.render(context), mimetype=\"text/html\")",
  "label": 0,
  "code_tokens": "def render_template ( template_name , * * context ) : tmpl = jinja_env . get_template ( template_name ) context [ \"url_for\" ] = url_for return Response ( tmpl . render ( context ) , mimetype = \"text/html\" )",
  "docstring_tokens": "Render a template into a response ."
 },
 {
  "idx": "webquery-test-22",
  "doc": "feed python variable for jinja template",
  "code": "def rstjinja(app, docname, source):\n    \"\"\"\n    Render our pages as a jinja template for fancy templating goodness.\n    \"\"\"\n    # Make sure we're outputting HTML\n    if app.builder.format != 'html':\n        return\n    src = source[0]\n    rendered = app.builder.templates.render_string(\n        src, app.config.html_context\n    )\n    source[0] = rendered",
  "label": 0,
  "code_tokens": "def rstjinja ( app , docname , source ) : # Make sure we're outputting HTML if app . builder . format != 'html' : return src = source [ 0 ] rendered = app . builder . templates . render_string ( src , app . config . html_context ) source [ 0 ] = rendered",
  "docstring_tokens": "Render our pages as a jinja template for fancy templating goodness ."
 },
 {
  "idx": "webquery-test-23",
  "doc": "check whether a file exists on s3 full path using python",
  "code": "def check_bucket_exists(self, bucket: str) -> bool:\n        \"\"\"\n        Checks if bucket with specified name exists.\n        :param bucket: the bucket to be checked.\n        :return: true if specified bucket exists.\n        \"\"\"\n        exists = True\n        try:\n            self.s3_client.head_bucket(Bucket=bucket)\n        except botocore.exceptions.ClientError as e:\n            # If a client error is thrown, then check that it was a 404 error.\n            # If it was a 404 error, then the bucket does not exist.\n            error_code = int(e.response['Error']['Code'])\n            if error_code == 404:\n                exists = False\n        return exists",
  "label": 1,
  "code_tokens": "def check_bucket_exists ( self , bucket : str ) -> bool : exists = True try : self . s3_client . head_bucket ( Bucket = bucket ) except botocore . exceptions . ClientError as e : # If a client error is thrown, then check that it was a 404 error. # If it was a 404 error, then the bucket does not exist. error_code = int ( e . response [ 'Error' ] [ 'Code' ] ) if error_code == 404 : exists = False return exists",
  "docstring_tokens": "Checks if bucket with specified name exists . : param bucket : the bucket to be checked . : return : true if specified bucket exists ."
 },
 {
  "idx": "webquery-test-24",
  "doc": "check whether a file exists on s3 full path using python",
  "code": "def check_for_key(self, key, bucket_name=None):\n        \"\"\"\n        Checks if a key exists in a bucket\n\n        :param key: S3 key that will point to the file\n        :type key: str\n        :param bucket_name: Name of the bucket in which the file is stored\n        :type bucket_name: str\n        \"\"\"\n        if not bucket_name:\n            (bucket_name, key) = self.parse_s3_url(key)\n\n        try:\n            self.get_conn().head_object(Bucket=bucket_name, Key=key)\n            return True\n        except ClientError as e:\n            self.log.info(e.response[\"Error\"][\"Message\"])\n            return False",
  "label": 0,
  "code_tokens": "def check_for_key ( self , key , bucket_name = None ) : if not bucket_name : ( bucket_name , key ) = self . parse_s3_url ( key ) try : self . get_conn ( ) . head_object ( Bucket = bucket_name , Key = key ) return True except ClientError as e : self . log . info ( e . response [ \"Error\" ] [ \"Message\" ] ) return False",
  "docstring_tokens": "Checks if a key exists in a bucket"
 },
 {
  "idx": "webquery-test-25",
  "doc": "destroy an object in python",
  "code": "def cleanup(self):\n        \"\"\"Forcefully delete objects from memory\n\n        In an ideal world, this shouldn't be necessary. Garbage\n        collection guarantees that anything without reference\n        is automatically removed.\n\n        However, because this application is designed to be run\n        multiple times from the same interpreter process, extra\n        case must be taken to ensure there are no memory leaks.\n\n        Explicitly deleting objects shines a light on where objects\n        may still be referenced in the form of an error. No errors\n        means this was uneccesary, but that's ok.\n\n        \"\"\"\n\n        for instance in self.context:\n            del(instance)\n\n        for plugin in self.plugins:\n            del(plugin)",
  "label": 1,
  "code_tokens": "def cleanup ( self ) : for instance in self . context : del ( instance ) for plugin in self . plugins : del ( plugin )",
  "docstring_tokens": "Forcefully delete objects from memory"
 },
 {
  "idx": "webquery-test-26",
  "doc": "destroy an object in python",
  "code": "def detach(self):\n        \"\"\"\n        Detach the underlying LLVM resource without disposing of it.\n        \"\"\"\n        if not self._closed:\n            del self._as_parameter_\n            self._closed = True\n            self._ptr = None",
  "label": 0,
  "code_tokens": "def detach ( self ) : if not self . _closed : del self . _as_parameter_ self . _closed = True self . _ptr = None",
  "docstring_tokens": "Detach the underlying LLVM resource without disposing of it ."
 },
 {
  "idx": "webquery-test-27",
  "doc": "split on any whitespace python",
  "code": "def normalize_value(text):\n    \"\"\"\n    This removes newlines and multiple spaces from a string.\n    \"\"\"\n    result = text.replace('\\n', ' ')\n    result = re.subn('[ ]{2,}', ' ', result)[0]\n    return result",
  "label": 0,
  "code_tokens": "def normalize_value ( text ) : result = text . replace ( '\\n' , ' ' ) result = re . subn ( '[ ]{2,}' , ' ' , result ) [ 0 ] return result",
  "docstring_tokens": "This removes newlines and multiple spaces from a string ."
 },
 {
  "idx": "webquery-test-28",
  "doc": "split on any whitespace python",
  "code": "def clean(s):\n  \"\"\"Removes trailing whitespace on each line.\"\"\"\n  lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)",
  "label": 0,
  "code_tokens": "def clean ( s ) : lines = [ l . rstrip ( ) for l in s . split ( '\\n' ) ] return '\\n' . join ( lines )",
  "docstring_tokens": "Removes trailing whitespace on each line ."
 },
 {
  "idx": "webquery-test-29",
  "doc": "check list in a string python",
  "code": "def chk_enum_arg(s):\n    \"\"\"Checks if the string `s` is a valid enum string.\n\n    Return True or False.\"\"\"\n\n    if len(s) == 0 or s[0].isspace() or s[-1].isspace():\n        return False\n    else:\n        return True",
  "label": 0,
  "code_tokens": "def chk_enum_arg ( s ) : if len ( s ) == 0 or s [ 0 ] . isspace ( ) or s [ - 1 ] . isspace ( ) : return False else : return True",
  "docstring_tokens": "Checks if the string s is a valid enum string ."
 },
 {
  "idx": "webquery-test-30",
  "doc": "check list in a string python",
  "code": "def __is__(cls, s):\n        \"\"\"Test if string matches this argument's format.\"\"\"\n        return s.startswith(cls.delims()[0]) and s.endswith(cls.delims()[1])",
  "label": 0,
  "code_tokens": "def __is__ ( cls , s ) : return s . startswith ( cls . delims ( ) [ 0 ] ) and s . endswith ( cls . delims ( ) [ 1 ] )",
  "docstring_tokens": "Test if string matches this argument s format ."
 },
 {
  "idx": "webquery-test-31",
  "doc": "check if all elements in a list are in a list of list python",
  "code": "def valid (names):\n    \"\"\" Returns true iff all elements of names are valid features.\n    \"\"\"\n    if isinstance(names, str):\n        names = [names]\n        assert is_iterable_typed(names, basestring)\n\n    return all(name in __all_features for name in names)",
  "label": 0,
  "code_tokens": "def valid ( names ) : if isinstance ( names , str ) : names = [ names ] assert is_iterable_typed ( names , basestring ) return all ( name in __all_features for name in names )",
  "docstring_tokens": "Returns true iff all elements of names are valid features ."
 },
 {
  "idx": "webquery-test-32",
  "doc": "check if all elements in a list are in a list of list python",
  "code": "def is_list_of_states(self, arg):\n        \"\"\"\n        A list of states example -\n        [('x1', 'easy'), ('x2', 'hard')]\n\n        Returns\n        -------\n        True, if arg is a list of states else False.\n\n        \"\"\"\n        return isinstance(arg, list) and all(isinstance(i, tuple) for i in arg)",
  "label": 0,
  "code_tokens": "def is_list_of_states ( self , arg ) : return isinstance ( arg , list ) and all ( isinstance ( i , tuple ) for i in arg )",
  "docstring_tokens": "A list of states example - [ ( x1 easy ) ( x2 hard ) ]"
 },
 {
  "idx": "webquery-test-33",
  "doc": "how to slice rows in a list python",
  "code": "def iget_list_column_slice(list_, start=None, stop=None, stride=None):\n    \"\"\" iterator version of get_list_column \"\"\"\n    if isinstance(start, slice):\n        slice_ = start\n    else:\n        slice_ = slice(start, stop, stride)\n    return (row[slice_] for row in list_)",
  "label": 1,
  "code_tokens": "def iget_list_column_slice ( list_ , start = None , stop = None , stride = None ) : if isinstance ( start , slice ) : slice_ = start else : slice_ = slice ( start , stop , stride ) return ( row [ slice_ ] for row in list_ )",
  "docstring_tokens": "iterator version of get_list_column"
 },
 {
  "idx": "webquery-test-34",
  "doc": "how to slice rows in a list python",
  "code": "def partition(list_, columns=2):\n    \"\"\"\n    Break a list into ``columns`` number of columns.\n    \"\"\"\n\n    iter_ = iter(list_)\n    columns = int(columns)\n    rows = []\n\n    while True:\n        row = []\n        for column_number in range(1, columns + 1):\n            try:\n                value = six.next(iter_)\n            except StopIteration:\n                pass\n            else:\n                row.append(value)\n\n        if not row:\n            return rows\n        rows.append(row)",
  "label": 1,
  "code_tokens": "def partition ( list_ , columns = 2 ) : iter_ = iter ( list_ ) columns = int ( columns ) rows = [ ] while True : row = [ ] for column_number in range ( 1 , columns + 1 ) : try : value = six . next ( iter_ ) except StopIteration : pass else : row . append ( value ) if not row : return rows rows . append ( row )",
  "docstring_tokens": "Break a list into columns number of columns ."
 },
 {
  "idx": "webquery-test-35",
  "doc": "python move the last element to the first",
  "code": "def list_move_to_front(l,value='other'):\n    \"\"\"if the value is in the list, move it to the front and return it.\"\"\"\n    l=list(l)\n    if value in l:\n        l.remove(value)\n        l.insert(0,value)\n    return l",
  "label": 1,
  "code_tokens": "def list_move_to_front ( l , value = 'other' ) : l = list ( l ) if value in l : l . remove ( value ) l . insert ( 0 , value ) return l",
  "docstring_tokens": "if the value is in the list move it to the front and return it ."
 },
 {
  "idx": "webquery-test-36",
  "doc": "python move the last element to the first",
  "code": "def extendleft(self, iterable):\n        \"\"\"Extend the left side of this GeventDeque by appending\n        elements from the iterable argument.  Note, the series of left\n        appends results in reversing the order of elements in the\n        iterable argument.\n        \"\"\"\n        self._deque.extendleft(iterable)\n        if len(self._deque) > 0:\n            self.notEmpty.set()",
  "label": 0,
  "code_tokens": "def extendleft ( self , iterable ) : self . _deque . extendleft ( iterable ) if len ( self . _deque ) > 0 : self . notEmpty . set ( )",
  "docstring_tokens": "Extend the left side of this GeventDeque by appending elements from the iterable argument . Note the series of left appends results in reversing the order of elements in the iterable argument ."
 },
 {
  "idx": "webquery-test-37",
  "doc": "iterate through unique elements python",
  "code": "def unique(iterable):\n    \"\"\"Filter out duplicate items from an iterable\"\"\"\n    seen = set()\n    for item in iterable:\n        if item not in seen:\n            seen.add(item)\n            yield item",
  "label": 0,
  "code_tokens": "def unique ( iterable ) : seen = set ( ) for item in iterable : if item not in seen : seen . add ( item ) yield item",
  "docstring_tokens": "Filter out duplicate items from an iterable"
 },
 {
  "idx": "webquery-test-38",
  "doc": "iterate through unique elements python",
  "code": "def remove_duplicates(lst):\n    \"\"\"\n    Emulate what a Python ``set()`` does, but keeping the element's order.\n    \"\"\"\n    dset = set()\n    return [l for l in lst if l not in dset and not dset.add(l)]",
  "label": 0,
  "code_tokens": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]",
  "docstring_tokens": "Emulate what a Python set () does but keeping the element s order ."
 },
 {
  "idx": "webquery-test-39",
  "doc": "get number of rows from 2d array python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-40",
  "doc": "get number of rows from 2d array python",
  "code": "def length(self):\n        \"\"\"Array of vector lengths\"\"\"\n        return np.sqrt(np.sum(self**2, axis=1)).view(np.ndarray)",
  "label": 0,
  "code_tokens": "def length ( self ) : return np . sqrt ( np . sum ( self ** 2 , axis = 1 ) ) . view ( np . ndarray )",
  "docstring_tokens": "Array of vector lengths"
 },
 {
  "idx": "webquery-test-41",
  "doc": "how to take log of number python",
  "code": "def _factln(num):\n    # type: (int) -> float\n    \"\"\"\n    Computes logfactorial regularly for tractable numbers, uses Ramanujans approximation otherwise.\n    \"\"\"\n\n    if num < 20:\n        log_factorial = log(factorial(num))\n    else:\n        log_factorial = num * log(num) - num + log(num * (1 + 4 * num * (\n            1 + 2 * num))) / 6.0 + log(pi) / 2\n\n    return log_factorial",
  "label": 1,
  "code_tokens": "def _factln ( num ) : # type: (int) -> float if num < 20 : log_factorial = log ( factorial ( num ) ) else : log_factorial = num * log ( num ) - num + log ( num * ( 1 + 4 * num * ( 1 + 2 * num ) ) ) / 6.0 + log ( pi ) / 2 return log_factorial",
  "docstring_tokens": "Computes logfactorial regularly for tractable numbers uses Ramanujans approximation otherwise ."
 },
 {
  "idx": "webquery-test-42",
  "doc": "how to take log of number python",
  "code": "def one_over_x_like(x):\n    \"\"\"\n    returns -np.Inf if x<0, -np.log(x) otherwise.\n    \"\"\"\n    if np.any(x < 0):\n        return -np.Inf\n    else:\n        return -np.sum(np.log(x))",
  "label": 1,
  "code_tokens": "def one_over_x_like ( x ) : if np . any ( x < 0 ) : return - np . Inf else : return - np . sum ( np . log ( x ) )",
  "docstring_tokens": "returns - np . Inf if x<0 - np . log ( x ) otherwise ."
 },
 {
  "idx": "webquery-test-43",
  "doc": "python open url text file as string",
  "code": "def wget(url):\n    \"\"\"\n    Download the page into a string\n    \"\"\"\n    import urllib.parse\n    request = urllib.request.urlopen(url)\n    filestring = request.read()\n    return filestring",
  "label": 1,
  "code_tokens": "def wget ( url ) : import urllib . parse request = urllib . request . urlopen ( url ) filestring = request . read ( ) return filestring",
  "docstring_tokens": "Download the page into a string"
 },
 {
  "idx": "webquery-test-44",
  "doc": "python open url text file as string",
  "code": "def get_file_string(filepath):\n    \"\"\"Get string from file.\"\"\"\n    with open(os.path.abspath(filepath)) as f:\n        return f.read()",
  "label": 0,
  "code_tokens": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )",
  "docstring_tokens": "Get string from file ."
 },
 {
  "idx": "webquery-test-45",
  "doc": "removing all from a list python",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 0,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-46",
  "doc": "removing all from a list python",
  "code": "def dedup_list(l):\n    \"\"\"Given a list (l) will removing duplicates from the list,\n       preserving the original order of the list. Assumes that\n       the list entrie are hashable.\"\"\"\n    dedup = set()\n    return [ x for x in l if not (x in dedup or dedup.add(x))]",
  "label": 0,
  "code_tokens": "def dedup_list ( l ) : dedup = set ( ) return [ x for x in l if not ( x in dedup or dedup . add ( x ) ) ]",
  "docstring_tokens": "Given a list ( l ) will removing duplicates from the list preserving the original order of the list . Assumes that the list entrie are hashable ."
 },
 {
  "idx": "webquery-test-47",
  "doc": "python check if a number is n",
  "code": "def _nth_str(n):\n    \"\"\"Return posessive form of numeral `n`: 1st, 2nd, 3rd, etc.\"\"\"\n    if n % 10 == 1 and n % 100 != 11:\n        return \"%dst\" % n\n    if n % 10 == 2 and n % 100 != 12:\n        return \"%dnd\" % n\n    if n % 10 == 3 and n % 100 != 13:\n        return \"%drd\" % n\n    return \"%dth\" % n",
  "label": 0,
  "code_tokens": "def _nth_str ( n ) : if n % 10 == 1 and n % 100 != 11 : return \"%dst\" % n if n % 10 == 2 and n % 100 != 12 : return \"%dnd\" % n if n % 10 == 3 and n % 100 != 13 : return \"%drd\" % n return \"%dth\" % n",
  "docstring_tokens": "Return posessive form of numeral n : 1st 2nd 3rd etc ."
 },
 {
  "idx": "webquery-test-48",
  "doc": "python check if a number is n",
  "code": "def IntGreaterThanZero(n):\n    \"\"\"If *n* is an integer > 0, returns it, otherwise an error.\"\"\"\n    try:\n        n = int(n)\n    except:\n        raise ValueError(\"%s is not an integer\" % n)\n    if n <= 0:\n        raise ValueError(\"%d is not > 0\" % n)\n    else:\n        return n",
  "label": 0,
  "code_tokens": "def IntGreaterThanZero ( n ) : try : n = int ( n ) except : raise ValueError ( \"%s is not an integer\" % n ) if n <= 0 : raise ValueError ( \"%d is not > 0\" % n ) else : return n",
  "docstring_tokens": "If * n * is an integer > 0 returns it otherwise an error ."
 },
 {
  "idx": "webquery-test-49",
  "doc": "remove first and last character in string python",
  "code": "def truncate(string, index):\n    \"\"\"Truncate a string at index and add ...\"\"\"\n    if len(string) > index and index > 0:\n        string = string[:index - 1] + u('\u2026')\n    return string",
  "label": 0,
  "code_tokens": "def truncate ( string , index ) : if len ( string ) > index and index > 0 : string = string [ : index - 1 ] + u ( '\u2026')  return string",
  "docstring_tokens": "Truncate a string at index and add ..."
 },
 {
  "idx": "webquery-test-50",
  "doc": "remove first and last character in string python",
  "code": "def strip_spaces(x):\n    \"\"\"\n    Strips spaces\n    :param x:\n    :return:\n    \"\"\"\n    x = x.replace(b' ', b'')\n    x = x.replace(b'\\t', b'')\n    return x",
  "label": 0,
  "code_tokens": "def strip_spaces ( x ) : x = x . replace ( b' ' , b'' ) x = x . replace ( b'\\t' , b'' ) return x",
  "docstring_tokens": "Strips spaces : param x : : return :"
 },
 {
  "idx": "webquery-test-51",
  "doc": "python tostring split by comma",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 1,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-52",
  "doc": "python tostring split by comma",
  "code": "def split_elements(value):\n    \"\"\"Split a string with comma or space-separated elements into a list.\"\"\"\n    l = [v.strip() for v in value.split(',')]\n    if len(l) == 1:\n        l = value.split()\n    return l",
  "label": 1,
  "code_tokens": "def split_elements ( value ) : l = [ v . strip ( ) for v in value . split ( ',' ) ] if len ( l ) == 1 : l = value . split ( ) return l",
  "docstring_tokens": "Split a string with comma or space - separated elements into a list ."
 },
 {
  "idx": "webquery-test-53",
  "doc": "format array python string",
  "code": "def string_format_func(s):\n\t\"\"\"\n\tFunction used internally to format string data for output to XML.\n\tEscapes back-slashes and quotes, and wraps the resulting string in\n\tquotes.\n\t\"\"\"\n\treturn u\"\\\"%s\\\"\" % unicode(s).replace(u\"\\\\\", u\"\\\\\\\\\").replace(u\"\\\"\", u\"\\\\\\\"\")",
  "label": 1,
  "code_tokens": "def string_format_func ( s ) : return u\"\\\"%s\\\"\" % unicode ( s ) . replace ( u\"\\\\\" , u\"\\\\\\\\\" ) . replace ( u\"\\\"\" , u\"\\\\\\\"\" )",
  "docstring_tokens": "Function used internally to format string data for output to XML . Escapes back - slashes and quotes and wraps the resulting string in quotes ."
 },
 {
  "idx": "webquery-test-54",
  "doc": "format array python string",
  "code": "def safe_format(s, **kwargs):\n  \"\"\"\n  :type s str\n  \"\"\"\n  return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))",
  "label": 0,
  "code_tokens": "def safe_format ( s , * * kwargs ) : return string . Formatter ( ) . vformat ( s , ( ) , defaultdict ( str , * * kwargs ) )",
  "docstring_tokens": ": type s str"
 },
 {
  "idx": "webquery-test-55",
  "doc": "how to append object in a specific index in list python",
  "code": "def append(self, item):\n        \"\"\" append item and print it to stdout \"\"\"\n        print(item)\n        super(MyList, self).append(item)",
  "label": 0,
  "code_tokens": "def append ( self , item ) : print ( item ) super ( MyList , self ) . append ( item )",
  "docstring_tokens": "append item and print it to stdout"
 },
 {
  "idx": "webquery-test-56",
  "doc": "how to append object in a specific index in list python",
  "code": "def insert(self, index, item):\n        \"\"\"Insert an item at the specified index.\n\n        Args:\n            index (int): Position to insert the item.\n            item: Item to be inserted.\n\n        Raises:\n            :exc:`~.exceptions.WrongListItemType`: If an item has a different\n                type than the first item to be stored.\n\n        \"\"\"\n        if not self:\n            list.append(self, item)\n        elif item.__class__ == self[0].__class__:\n            list.insert(self, index, item)\n        else:\n            raise exceptions.WrongListItemType(item.__class__.__name__,\n                                               self[0].__class__.__name__)",
  "label": 1,
  "code_tokens": "def insert ( self , index , item ) : if not self : list . append ( self , item ) elif item . __class__ == self [ 0 ] . __class__ : list . insert ( self , index , item ) else : raise exceptions . WrongListItemType ( item . __class__ . __name__ , self [ 0 ] . __class__ . __name__ )",
  "docstring_tokens": "Insert an item at the specified index ."
 },
 {
  "idx": "webquery-test-57",
  "doc": "read from a string until newline in python",
  "code": "def get_line_ending(line):\n    \"\"\"Return line ending.\"\"\"\n    non_whitespace_index = len(line.rstrip()) - len(line)\n    if not non_whitespace_index:\n        return ''\n    else:\n        return line[non_whitespace_index:]",
  "label": 0,
  "code_tokens": "def get_line_ending ( line ) : non_whitespace_index = len ( line . rstrip ( ) ) - len ( line ) if not non_whitespace_index : return '' else : return line [ non_whitespace_index : ]",
  "docstring_tokens": "Return line ending ."
 },
 {
  "idx": "webquery-test-58",
  "doc": "read from a string until newline in python",
  "code": "def iter_lines(file_like: Iterable[str]) -> Generator[str, None, None]:\n    \"\"\" Helper for iterating only nonempty lines without line breaks\"\"\"\n    for line in file_like:\n        line = line.rstrip('\\r\\n')\n        if line:\n            yield line",
  "label": 1,
  "code_tokens": "def iter_lines ( file_like : Iterable [ str ] ) -> Generator [ str , None , None ] : for line in file_like : line = line . rstrip ( '\\r\\n' ) if line : yield line",
  "docstring_tokens": "Helper for iterating only nonempty lines without line breaks"
 },
 {
  "idx": "webquery-test-59",
  "doc": "python detect any duplicate in list",
  "code": "def remove_duplicates(lst):\n    \"\"\"\n    Emulate what a Python ``set()`` does, but keeping the element's order.\n    \"\"\"\n    dset = set()\n    return [l for l in lst if l not in dset and not dset.add(l)]",
  "label": 1,
  "code_tokens": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]",
  "docstring_tokens": "Emulate what a Python set () does but keeping the element s order ."
 },
 {
  "idx": "webquery-test-60",
  "doc": "python detect any duplicate in list",
  "code": "def remove_dups(seq):\n    \"\"\"remove duplicates from a sequence, preserving order\"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if not (x in seen or seen_add(x))]",
  "label": 1,
  "code_tokens": "def remove_dups ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]",
  "docstring_tokens": "remove duplicates from a sequence preserving order"
 },
 {
  "idx": "webquery-test-61",
  "doc": "python delete attribute from instance",
  "code": "def address(self):\n        \"\"\"\n        Returns the name of the port that this motor is connected to.\n        \"\"\"\n        self._address, value = self.get_attr_string(self._address, 'address')\n        return value",
  "label": 0,
  "code_tokens": "def address ( self ) : self . _address , value = self . get_attr_string ( self . _address , 'address' ) return value",
  "docstring_tokens": "Returns the name of the port that this motor is connected to ."
 },
 {
  "idx": "webquery-test-62",
  "doc": "python delete attribute from instance",
  "code": "def result(self):\n        \"\"\" Return the result of the AMP (as a string)\"\"\"\n        ret = self.get('result')\n        if ret is not None:\n            ret = u(ret)\n        return ret",
  "label": 0,
  "code_tokens": "def result ( self ) : ret = self . get ( 'result' ) if ret is not None : ret = u ( ret ) return ret",
  "docstring_tokens": "Return the result of the AMP ( as a string )"
 },
 {
  "idx": "webquery-test-63",
  "doc": "fetch month from date object python",
  "code": "def QA_util_datetime_to_strdate(dt):\n    \"\"\"\n    :param dt:  pythone datetime.datetime\n    :return:  1999-02-01 string type\n    \"\"\"\n    strdate = \"%04d-%02d-%02d\" % (dt.year, dt.month, dt.day)\n    return strdate",
  "label": 0,
  "code_tokens": "def QA_util_datetime_to_strdate ( dt ) : strdate = \"%04d-%02d-%02d\" % ( dt . year , dt . month , dt . day ) return strdate",
  "docstring_tokens": ": param dt : pythone datetime . datetime : return : 1999 - 02 - 01 string type"
 },
 {
  "idx": "webquery-test-64",
  "doc": "fetch month from date object python",
  "code": "def str_to_date(date: str) -> datetime.datetime:\n    \"\"\" Convert cbr.ru API date ste to python datetime\n\n    :param date: date from API response\n\n    :return: date like datetime\n    :rtype: datetime\n    \"\"\"\n    date = date.split('.')\n    date.reverse()\n    y, m, d = date\n    return datetime.datetime(int(y), int(m), int(d))",
  "label": 0,
  "code_tokens": "def str_to_date ( date : str ) -> datetime . datetime : date = date . split ( '.' ) date . reverse ( ) y , m , d = date return datetime . datetime ( int ( y ) , int ( m ) , int ( d ) )",
  "docstring_tokens": "Convert cbr . ru API date ste to python datetime"
 },
 {
  "idx": "webquery-test-65",
  "doc": "get value of an index in list in python",
  "code": "def index(self, item):\n        \"\"\" Not recommended for use on large lists due to time\n            complexity, but it works\n\n            -> #int list index of @item\n        \"\"\"\n        for i, x in enumerate(self.iter()):\n            if x == item:\n                return i\n        return None",
  "label": 1,
  "code_tokens": "def index ( self , item ) : for i , x in enumerate ( self . iter ( ) ) : if x == item : return i return None",
  "docstring_tokens": "Not recommended for use on large lists due to time complexity but it works"
 },
 {
  "idx": "webquery-test-66",
  "doc": "get value of an index in list in python",
  "code": "def find(self, name):\n        \"\"\"Return the index of the toc entry with name NAME.\n\n           Return -1 for failure.\"\"\"\n        for i, nm in enumerate(self.data):\n            if nm[-1] == name:\n                return i\n        return -1",
  "label": 1,
  "code_tokens": "def find ( self , name ) : for i , nm in enumerate ( self . data ) : if nm [ - 1 ] == name : return i return - 1",
  "docstring_tokens": "Return the index of the toc entry with name NAME ."
 },
 {
  "idx": "webquery-test-67",
  "doc": "function returns index position of thing in list python",
  "code": "def index(self, item):\n        \"\"\" Not recommended for use on large lists due to time\n            complexity, but it works\n\n            -> #int list index of @item\n        \"\"\"\n        for i, x in enumerate(self.iter()):\n            if x == item:\n                return i\n        return None",
  "label": 1,
  "code_tokens": "def index ( self , item ) : for i , x in enumerate ( self . iter ( ) ) : if x == item : return i return None",
  "docstring_tokens": "Not recommended for use on large lists due to time complexity but it works"
 },
 {
  "idx": "webquery-test-68",
  "doc": "function returns index position of thing in list python",
  "code": "def getIndex(predicateFn: Callable[[T], bool], items: List[T]) -> int:\n    \"\"\"\n    Finds the index of an item in list, which satisfies predicate\n    :param predicateFn: predicate function to run on items of list\n    :param items: list of tuples\n    :return: first index for which predicate function returns True\n    \"\"\"\n    try:\n        return next(i for i, v in enumerate(items) if predicateFn(v))\n    except StopIteration:\n        return -1",
  "label": 1,
  "code_tokens": "def getIndex ( predicateFn : Callable [ [ T ] , bool ] , items : List [ T ] ) -> int : try : return next ( i for i , v in enumerate ( items ) if predicateFn ( v ) ) except StopIteration : return - 1",
  "docstring_tokens": "Finds the index of an item in list which satisfies predicate : param predicateFn : predicate function to run on items of list : param items : list of tuples : return : first index for which predicate function returns True"
 },
 {
  "idx": "webquery-test-69",
  "doc": "python split list into lists by lenth",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-70",
  "doc": "python split list into lists by lenth",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-71",
  "doc": "python three dimensional rotation matrix",
  "code": "def quaternion_to_rotation_matrix(quaternion):\n    \"\"\"Compute the rotation matrix representated by the quaternion\"\"\"\n    c, x, y, z = quaternion\n    return np.array([\n        [c*c + x*x - y*y - z*z, 2*x*y - 2*c*z,         2*x*z + 2*c*y        ],\n        [2*x*y + 2*c*z,         c*c - x*x + y*y - z*z, 2*y*z - 2*c*x        ],\n        [2*x*z - 2*c*y,         2*y*z + 2*c*x,         c*c - x*x - y*y + z*z]\n    ], float)",
  "label": 0,
  "code_tokens": "def quaternion_to_rotation_matrix ( quaternion ) : c , x , y , z = quaternion return np . array ( [ [ c * c + x * x - y * y - z * z , 2 * x * y - 2 * c * z , 2 * x * z + 2 * c * y ] , [ 2 * x * y + 2 * c * z , c * c - x * x + y * y - z * z , 2 * y * z - 2 * c * x ] , [ 2 * x * z - 2 * c * y , 2 * y * z + 2 * c * x , c * c - x * x - y * y + z * z ] ] , float )",
  "docstring_tokens": "Compute the rotation matrix representated by the quaternion"
 },
 {
  "idx": "webquery-test-72",
  "doc": "python three dimensional rotation matrix",
  "code": "def Ry_matrix(theta):\n    \"\"\"Rotation matrix around the Y axis\"\"\"\n    return np.array([\n        [np.cos(theta), 0, np.sin(theta)],\n        [0, 1, 0],\n        [-np.sin(theta), 0, np.cos(theta)]\n    ])",
  "label": 1,
  "code_tokens": "def Ry_matrix ( theta ) : return np . array ( [ [ np . cos ( theta ) , 0 , np . sin ( theta ) ] , [ 0 , 1 , 0 ] , [ - np . sin ( theta ) , 0 , np . cos ( theta ) ] ] )",
  "docstring_tokens": "Rotation matrix around the Y axis"
 },
 {
  "idx": "webquery-test-73",
  "doc": "validating network design with python",
  "code": "def firmware_download_input_rbridge_id(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        firmware_download = ET.Element(\"firmware_download\")\n        config = firmware_download\n        input = ET.SubElement(firmware_download, \"input\")\n        rbridge_id = ET.SubElement(input, \"rbridge-id\")\n        rbridge_id.text = kwargs.pop('rbridge_id')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 1,
  "code_tokens": "def firmware_download_input_rbridge_id ( self , * * kwargs ) : config = ET . Element ( \"config\" ) firmware_download = ET . Element ( \"firmware_download\" ) config = firmware_download input = ET . SubElement ( firmware_download , \"input\" ) rbridge_id = ET . SubElement ( input , \"rbridge-id\" ) rbridge_id . text = kwargs . pop ( 'rbridge_id' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-74",
  "doc": "validating network design with python",
  "code": "def nas_server_ip_server_ip(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        nas = ET.SubElement(config, \"nas\", xmlns=\"urn:brocade.com:mgmt:brocade-qos\")\n        server_ip = ET.SubElement(nas, \"server-ip\")\n        server_ip = ET.SubElement(server_ip, \"server-ip\")\n        server_ip.text = kwargs.pop('server_ip')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 1,
  "code_tokens": "def nas_server_ip_server_ip ( self , * * kwargs ) : config = ET . Element ( \"config\" ) nas = ET . SubElement ( config , \"nas\" , xmlns = \"urn:brocade.com:mgmt:brocade-qos\" ) server_ip = ET . SubElement ( nas , \"server-ip\" ) server_ip = ET . SubElement ( server_ip , \"server-ip\" ) server_ip . text = kwargs . pop ( 'server_ip' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-75",
  "doc": "how to multiply with floats in python",
  "code": "def convert(self, value, units, newunits):\n        \"\"\"\n        Converts a value expressed in certain *units* to a new units.\n        \"\"\"\n        return value * self._units[units] / self._units[newunits]",
  "label": 0,
  "code_tokens": "def convert ( self , value , units , newunits ) : return value * self . _units [ units ] / self . _units [ newunits ]",
  "docstring_tokens": "Converts a value expressed in certain * units * to a new units ."
 },
 {
  "idx": "webquery-test-76",
  "doc": "how to multiply with floats in python",
  "code": "def unit_net_value(self):\n        \"\"\"\n        [float] \u5b9e\u65f6\u51c0\u503c\n        \"\"\"\n        if self._units == 0:\n            return np.nan\n        return self.total_value / self._units",
  "label": 0,
  "code_tokens": "def unit_net_value ( self ) : if self . _units == 0 : return np . nan return self . total_value / self . _units",
  "docstring_tokens": "[ float ] \u5b9e\u65f6\u51c0\u503c"
 },
 {
  "idx": "webquery-test-77",
  "doc": "return the value of the diaganol matrix python",
  "code": "def lengths( self ):\n        \"\"\"\n        The cell lengths.\n\n        Args:\n            None\n\n        Returns:\n            (np.array(a,b,c)): The cell lengths.\n        \"\"\"\n        return( np.array( [ math.sqrt( sum( row**2 ) ) for row in self.matrix ] ) )",
  "label": 0,
  "code_tokens": "def lengths ( self ) : return ( np . array ( [ math . sqrt ( sum ( row ** 2 ) ) for row in self . matrix ] ) )",
  "docstring_tokens": "The cell lengths ."
 },
 {
  "idx": "webquery-test-78",
  "doc": "return the value of the diaganol matrix python",
  "code": "def get_magnitude_squared(self):\n        \"\"\"Returns the square of the magnitude of this vector.\"\"\"\n        return self.x*self.x + self.y*self.y",
  "label": 0,
  "code_tokens": "def get_magnitude_squared ( self ) : return self . x * self . x + self . y * self . y",
  "docstring_tokens": "Returns the square of the magnitude of this vector ."
 },
 {
  "idx": "webquery-test-79",
  "doc": "python file exists in directory",
  "code": "def _pip_exists(self):\n        \"\"\"Returns True if pip exists inside the virtual environment. Can be\n        used as a naive way to verify that the environment is installed.\"\"\"\n        return os.path.isfile(os.path.join(self.path, 'bin', 'pip'))",
  "label": 1,
  "code_tokens": "def _pip_exists ( self ) : return os . path . isfile ( os . path . join ( self . path , 'bin' , 'pip' ) )",
  "docstring_tokens": "Returns True if pip exists inside the virtual environment . Can be used as a naive way to verify that the environment is installed ."
 },
 {
  "idx": "webquery-test-80",
  "doc": "python file exists in directory",
  "code": "def is_executable(path):\n  \"\"\"Returns whether a path names an existing executable file.\"\"\"\n  return os.path.isfile(path) and os.access(path, os.X_OK)",
  "label": 1,
  "code_tokens": "def is_executable ( path ) : return os . path . isfile ( path ) and os . access ( path , os . X_OK )",
  "docstring_tokens": "Returns whether a path names an existing executable file ."
 },
 {
  "idx": "webquery-test-81",
  "doc": "python dict to yaml",
  "code": "def print_yaml(o):\n    \"\"\"Pretty print an object as YAML.\"\"\"\n    print(yaml.dump(o, default_flow_style=False, indent=4, encoding='utf-8'))",
  "label": 1,
  "code_tokens": "def print_yaml ( o ) : print ( yaml . dump ( o , default_flow_style = False , indent = 4 , encoding = 'utf-8' ) )",
  "docstring_tokens": "Pretty print an object as YAML ."
 },
 {
  "idx": "webquery-test-82",
  "doc": "python dict to yaml",
  "code": "def yaml_to_param(obj, name):\n\t\"\"\"\n\tReturn the top-level element of a document sub-tree containing the\n\tYAML serialization of a Python object.\n\t\"\"\"\n\treturn from_pyvalue(u\"yaml:%s\" % name, unicode(yaml.dump(obj)))",
  "label": 0,
  "code_tokens": "def yaml_to_param ( obj , name ) : return from_pyvalue ( u\"yaml:%s\" % name , unicode ( yaml . dump ( obj ) ) )",
  "docstring_tokens": "Return the top - level element of a document sub - tree containing the YAML serialization of a Python object ."
 },
 {
  "idx": "webquery-test-83",
  "doc": "remove key/value from dict python",
  "code": "def _remove_dict_keys_with_value(dict_, val):\n  \"\"\"Removes `dict` keys which have have `self` as value.\"\"\"\n  return {k: v for k, v in dict_.items() if v is not val}",
  "label": 1,
  "code_tokens": "def _remove_dict_keys_with_value ( dict_ , val ) : return { k : v for k , v in dict_ . items ( ) if v is not val }",
  "docstring_tokens": "Removes dict keys which have have self as value ."
 },
 {
  "idx": "webquery-test-84",
  "doc": "remove key/value from dict python",
  "code": "def rm_keys_from_dict(d, keys):\n    \"\"\"\n    Given a dictionary and a key list, remove any data in the dictionary with the given keys.\n\n    :param dict d: Metadata\n    :param list keys: Keys to be removed\n    :return dict d: Metadata\n    \"\"\"\n    # Loop for each key given\n    for key in keys:\n        # Is the key in the dictionary?\n        if key in d:\n            try:\n                d.pop(key, None)\n            except KeyError:\n                # Not concerned with an error. Keep going.\n                pass\n    return d",
  "label": 1,
  "code_tokens": "def rm_keys_from_dict ( d , keys ) : # Loop for each key given for key in keys : # Is the key in the dictionary? if key in d : try : d . pop ( key , None ) except KeyError : # Not concerned with an error. Keep going. pass return d",
  "docstring_tokens": "Given a dictionary and a key list remove any data in the dictionary with the given keys ."
 },
 {
  "idx": "webquery-test-85",
  "doc": "python hyphen in forlder names",
  "code": "def classnameify(s):\n  \"\"\"\n  Makes a classname\n  \"\"\"\n  return ''.join(w if w in ACRONYMS else w.title() for w in s.split('_'))",
  "label": 1,
  "code_tokens": "def classnameify ( s ) : return '' . join ( w if w in ACRONYMS else w . title ( ) for w in s . split ( '_' ) )",
  "docstring_tokens": "Makes a classname"
 },
 {
  "idx": "webquery-test-86",
  "doc": "python hyphen in forlder names",
  "code": "def to_pascal_case(s):\n    \"\"\"Transform underscore separated string to pascal case\n\n    \"\"\"\n    return re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), s.capitalize())",
  "label": 0,
  "code_tokens": "def to_pascal_case ( s ) : return re . sub ( r'(?!^)_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , s . capitalize ( ) )",
  "docstring_tokens": "Transform underscore separated string to pascal case"
 },
 {
  "idx": "webquery-test-87",
  "doc": "how to change delimiter in big csv file python",
  "code": "def csvpretty(csvfile: csvfile=sys.stdin):\n    \"\"\" Pretty print a CSV file. \"\"\"\n    shellish.tabulate(csv.reader(csvfile))",
  "label": 0,
  "code_tokens": "def csvpretty ( csvfile : csvfile = sys . stdin ) : shellish . tabulate ( csv . reader ( csvfile ) )",
  "docstring_tokens": "Pretty print a CSV file ."
 },
 {
  "idx": "webquery-test-88",
  "doc": "how to change delimiter in big csv file python",
  "code": "def csv_dict_writer(f, fieldnames, **kwargs):\n    \"\"\"Equivalent of csv.DictWriter, but allows `delimiter` to be a unicode string on Py2.\"\"\"\n    import csv\n    if \"delimiter\" in kwargs:\n        kwargs[\"delimiter\"] = str(kwargs[\"delimiter\"])\n    return csv.DictWriter(f, fieldnames, **kwargs)",
  "label": 0,
  "code_tokens": "def csv_dict_writer ( f , fieldnames , * * kwargs ) : import csv if \"delimiter\" in kwargs : kwargs [ \"delimiter\" ] = str ( kwargs [ \"delimiter\" ] ) return csv . DictWriter ( f , fieldnames , * * kwargs )",
  "docstring_tokens": "Equivalent of csv . DictWriter but allows delimiter to be a unicode string on Py2 ."
 },
 {
  "idx": "webquery-test-89",
  "doc": "python write out hex values",
  "code": "def hex_to_rgb(h):\n    \"\"\" Returns 0 to 1 rgb from a hex list or tuple \"\"\"\n    h = h.lstrip('#')\n    return tuple(int(h[i:i+2], 16)/255. for i in (0, 2 ,4))",
  "label": 0,
  "code_tokens": "def hex_to_rgb ( h ) : h = h . lstrip ( '#' ) return tuple ( int ( h [ i : i + 2 ] , 16 ) / 255. for i in ( 0 , 2 , 4 ) )",
  "docstring_tokens": "Returns 0 to 1 rgb from a hex list or tuple"
 },
 {
  "idx": "webquery-test-90",
  "doc": "python write out hex values",
  "code": "def hex2rgb(value):\n    \"\"\"Converts a hexadeximal color string to an RGB 3-tuple\n\n    EXAMPLE\n    -------\n    >>> hex2rgb('#0000FF')\n    (0, 0, 255)\n    \"\"\"\n    value = value.lstrip('#')\n    lv = len(value)\n    return tuple(int(value[i:i+lv//3], 16) for i in range(0, lv, lv//3))",
  "label": 1,
  "code_tokens": "def hex2rgb ( value ) : value = value . lstrip ( '#' ) lv = len ( value ) return tuple ( int ( value [ i : i + lv // 3 ] , 16 ) for i in range ( 0 , lv , lv // 3 ) )",
  "docstring_tokens": "Converts a hexadeximal color string to an RGB 3 - tuple"
 },
 {
  "idx": "webquery-test-91",
  "doc": "graph a line between two points python",
  "code": "def _linepoint(self, t, x0, y0, x1, y1):\n        \"\"\" Returns coordinates for point at t on the line.\n            Calculates the coordinates of x and y for a point at t on a straight line.\n            The t parameter is a number between 0.0 and 1.0,\n            x0 and y0 define the starting point of the line,\n            x1 and y1 the ending point of the line.\n        \"\"\"\n        # Originally from nodebox-gl\n        out_x = x0 + t * (x1 - x0)\n        out_y = y0 + t * (y1 - y0)\n        return (out_x, out_y)",
  "label": 0,
  "code_tokens": "def _linepoint ( self , t , x0 , y0 , x1 , y1 ) : # Originally from nodebox-gl out_x = x0 + t * ( x1 - x0 ) out_y = y0 + t * ( y1 - y0 ) return ( out_x , out_y )",
  "docstring_tokens": "Returns coordinates for point at t on the line . Calculates the coordinates of x and y for a point at t on a straight line . The t parameter is a number between 0 . 0 and 1 . 0 x0 and y0 define the starting point of the line x1 and y1 the ending point of the line ."
 },
 {
  "idx": "webquery-test-92",
  "doc": "graph a line between two points python",
  "code": "def spline_interpolate(x1, y1, x2):\n    \"\"\"\n    Given a function at a set of points (x1, y1), interpolate to\n    evaluate it at points x2.\n    \"\"\"\n    sp = Spline(x1, y1)\n    return sp(x2)",
  "label": 0,
  "code_tokens": "def spline_interpolate ( x1 , y1 , x2 ) : sp = Spline ( x1 , y1 ) return sp ( x2 )",
  "docstring_tokens": "Given a function at a set of points ( x1 y1 ) interpolate to evaluate it at points x2 ."
 },
 {
  "idx": "webquery-test-93",
  "doc": "read values from a file in a two dimensional array python",
  "code": "def ReadTif(tifFile):\n        \"\"\"Reads a tif file to a 2D NumPy array\"\"\"\n        img = Image.open(tifFile)\n        img = np.array(img)\n        return img",
  "label": 1,
  "code_tokens": "def ReadTif ( tifFile ) : img = Image . open ( tifFile ) img = np . array ( img ) return img",
  "docstring_tokens": "Reads a tif file to a 2D NumPy array"
 },
 {
  "idx": "webquery-test-94",
  "doc": "read values from a file in a two dimensional array python",
  "code": "def read_mm_header(fd, byte_order, dtype, count):\n    \"\"\"Read MM_HEADER tag from file and return as numpy.rec.array.\"\"\"\n    return numpy.rec.fromfile(fd, MM_HEADER, 1, byteorder=byte_order)[0]",
  "label": 1,
  "code_tokens": "def read_mm_header ( fd , byte_order , dtype , count ) : return numpy . rec . fromfile ( fd , MM_HEADER , 1 , byteorder = byte_order ) [ 0 ]",
  "docstring_tokens": "Read MM_HEADER tag from file and return as numpy . rec . array ."
 },
 {
  "idx": "webquery-test-95",
  "doc": "length of two dimensional array python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-96",
  "doc": "length of two dimensional array python",
  "code": "def length(self):\n        \"\"\"Array of vector lengths\"\"\"\n        return np.sqrt(np.sum(self**2, axis=1)).view(np.ndarray)",
  "label": 0,
  "code_tokens": "def length ( self ) : return np . sqrt ( np . sum ( self ** 2 , axis = 1 ) ) . view ( np . ndarray )",
  "docstring_tokens": "Array of vector lengths"
 },
 {
  "idx": "webquery-test-97",
  "doc": "enforcing input length in python",
  "code": "def length(length):\n    \"\"\"Checks value for minimum length using len().\"\"\"\n    def min_len(value):\n        if not len(value) >= length:\n            raise ValueError(\n                \"Minimum length is {0} but value is {1}\".format(length, len(value))\n            )\n        return True\n\n    return min_len",
  "label": 1,
  "code_tokens": "def length ( length ) : def min_len ( value ) : if not len ( value ) >= length : raise ValueError ( \"Minimum length is {0} but value is {1}\" . format ( length , len ( value ) ) ) return True return min_len",
  "docstring_tokens": "Checks value for minimum length using len () ."
 },
 {
  "idx": "webquery-test-98",
  "doc": "enforcing input length in python",
  "code": "def __len__(self):\n        \"\"\" This will equal 124 for the V1 database. \"\"\"\n        length = 0\n        for typ, siz, _ in self.format:\n            length += siz\n        return length",
  "label": 0,
  "code_tokens": "def __len__ ( self ) : length = 0 for typ , siz , _ in self . format : length += siz return length",
  "docstring_tokens": "This will equal 124 for the V1 database ."
 },
 {
  "idx": "webquery-test-99",
  "doc": "how to compare the percentage of matches of two datasets python",
  "code": "def tanimoto_set_similarity(x: Iterable[X], y: Iterable[X]) -> float:\n    \"\"\"Calculate the tanimoto set similarity.\"\"\"\n    a, b = set(x), set(y)\n    union = a | b\n\n    if not union:\n        return 0.0\n\n    return len(a & b) / len(union)",
  "label": 1,
  "code_tokens": "def tanimoto_set_similarity ( x : Iterable [ X ] , y : Iterable [ X ] ) -> float : a , b = set ( x ) , set ( y ) union = a | b if not union : return 0.0 return len ( a & b ) / len ( union )",
  "docstring_tokens": "Calculate the tanimoto set similarity ."
 },
 {
  "idx": "webquery-test-100",
  "doc": "how to compare the percentage of matches of two datasets python",
  "code": "def _sim_colour(r1, r2):\n    \"\"\"\n        calculate the sum of histogram intersection of colour\n    \"\"\"\n    return sum([min(a, b) for a, b in zip(r1[\"hist_c\"], r2[\"hist_c\"])])",
  "label": 0,
  "code_tokens": "def _sim_colour ( r1 , r2 ) : return sum ( [ min ( a , b ) for a , b in zip ( r1 [ \"hist_c\" ] , r2 [ \"hist_c\" ] ) ] )",
  "docstring_tokens": "calculate the sum of histogram intersection of colour"
 },
 {
  "idx": "webquery-test-101",
  "doc": "python rotation matrix from axis angle 3d",
  "code": "def rotate_2D(angle):\n    \"\"\"\n    Returns a 2x2 transformation matrix to rotate\n    by an angle in two dimensions\n    \"\"\"\n    return N.array([[N.cos(angle),-N.sin(angle)],\n                    [N.sin(angle),N.cos(angle)]])",
  "label": 0,
  "code_tokens": "def rotate_2D ( angle ) : return N . array ( [ [ N . cos ( angle ) , - N . sin ( angle ) ] , [ N . sin ( angle ) , N . cos ( angle ) ] ] )",
  "docstring_tokens": "Returns a 2x2 transformation matrix to rotate by an angle in two dimensions"
 },
 {
  "idx": "webquery-test-102",
  "doc": "python rotation matrix from axis angle 3d",
  "code": "def create_rot2d(angle):\n    \"\"\"Create 2D rotation matrix\"\"\"\n    ca = math.cos(angle)\n    sa = math.sin(angle)\n    return np.array([[ca, -sa], [sa, ca]])",
  "label": 0,
  "code_tokens": "def create_rot2d ( angle ) : ca = math . cos ( angle ) sa = math . sin ( angle ) return np . array ( [ [ ca , - sa ] , [ sa , ca ] ] )",
  "docstring_tokens": "Create 2D rotation matrix"
 },
 {
  "idx": "webquery-test-103",
  "doc": "how to combine 2 lists and make 1 list in python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-104",
  "doc": "how to combine 2 lists and make 1 list in python",
  "code": "def _fill_array_from_list(the_list, the_array):\n        \"\"\"Fill an `array` from a `list`\"\"\"\n        for i, val in enumerate(the_list):\n            the_array[i] = val\n        return the_array",
  "label": 0,
  "code_tokens": "def _fill_array_from_list ( the_list , the_array ) : for i , val in enumerate ( the_list ) : the_array [ i ] = val return the_array",
  "docstring_tokens": "Fill an array from a list"
 },
 {
  "idx": "webquery-test-105",
  "doc": "using variance for 2d array in python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-106",
  "doc": "using variance for 2d array in python",
  "code": "def torecarray(*args, **kwargs):\n    \"\"\"\n    Convenient shorthand for ``toarray(*args, **kwargs).view(np.recarray)``.\n\n    \"\"\"\n\n    import numpy as np\n    return toarray(*args, **kwargs).view(np.recarray)",
  "label": 0,
  "code_tokens": "def torecarray ( * args , * * kwargs ) : import numpy as np return toarray ( * args , * * kwargs ) . view ( np . recarray )",
  "docstring_tokens": "Convenient shorthand for toarray ( * args ** kwargs ) . view ( np . recarray ) ."
 },
 {
  "idx": "webquery-test-107",
  "doc": "check that all of the elements in an array are greater than zero python nympy",
  "code": "def is_square_matrix(mat):\n    \"\"\"Test if an array is a square matrix.\"\"\"\n    mat = np.array(mat)\n    if mat.ndim != 2:\n        return False\n    shape = mat.shape\n    return shape[0] == shape[1]",
  "label": 0,
  "code_tokens": "def is_square_matrix ( mat ) : mat = np . array ( mat ) if mat . ndim != 2 : return False shape = mat . shape return shape [ 0 ] == shape [ 1 ]",
  "docstring_tokens": "Test if an array is a square matrix ."
 },
 {
  "idx": "webquery-test-108",
  "doc": "check that all of the elements in an array are greater than zero python nympy",
  "code": "def is_bool_matrix(l):\n    r\"\"\"Checks if l is a 2D numpy array of bools\n\n    \"\"\"\n    if isinstance(l, np.ndarray):\n        if l.ndim == 2 and (l.dtype == bool):\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def is_bool_matrix ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 2 and ( l . dtype == bool ) : return True return False",
  "docstring_tokens": "r Checks if l is a 2D numpy array of bools"
 },
 {
  "idx": "webquery-test-109",
  "doc": "python randomely divide a dataset into 5",
  "code": "def __split_every_n(self, n, data):\n        \"\"\"\n        \"\"\"\n        return [data[i:i+n] for i in range(0, len(data), n)]",
  "label": 1,
  "code_tokens": "def __split_every_n ( self , n , data ) : return [ data [ i : i + n ] for i in range ( 0 , len ( data ) , n ) ]",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-110",
  "doc": "python randomely divide a dataset into 5",
  "code": "def chunked(iterable, n):\n    \"\"\"Break an iterable into lists of a given length::\n\n        >>> list(chunked([1, 2, 3, 4, 5, 6, 7], 3))\n        [[1, 2, 3], [4, 5, 6], [7]]\n\n    If the length of ``iterable`` is not evenly divisible by ``n``, the last\n    returned list will be shorter.\n\n    This is useful for splitting up a computation on a large number of keys\n    into batches, to be pickled and sent off to worker processes. One example\n    is operations on rows in MySQL, which does not implement server-side\n    cursors properly and would otherwise load the entire dataset into RAM on\n    the client.\n    \n    Taken from more_itertools\n\n    \"\"\"\n    return iter(functools.partial(take, n, iter(iterable)), [])",
  "label": 1,
  "code_tokens": "def chunked ( iterable , n ) : return iter ( functools . partial ( take , n , iter ( iterable ) ) , [ ] )",
  "docstring_tokens": "Break an iterable into lists of a given length ::"
 },
 {
  "idx": "webquery-test-111",
  "doc": "stackoverflow python how to read text file and print without \\n",
  "code": "def lint_file(in_file, out_file=None):\n    \"\"\"Helps remove extraneous whitespace from the lines of a file\n\n    :param file in_file: A readable file or file-like\n    :param file out_file: A writable file or file-like\n    \"\"\"\n    for line in in_file:\n        print(line.strip(), file=out_file)",
  "label": 1,
  "code_tokens": "def lint_file ( in_file , out_file = None ) : for line in in_file : print ( line . strip ( ) , file = out_file )",
  "docstring_tokens": "Helps remove extraneous whitespace from the lines of a file"
 },
 {
  "idx": "webquery-test-112",
  "doc": "stackoverflow python how to read text file and print without \\n",
  "code": "def stdout_display():\n    \"\"\" Print results straight to stdout \"\"\"\n    if sys.version_info[0] == 2:\n        yield SmartBuffer(sys.stdout)\n    else:\n        yield SmartBuffer(sys.stdout.buffer)",
  "label": 0,
  "code_tokens": "def stdout_display ( ) : if sys . version_info [ 0 ] == 2 : yield SmartBuffer ( sys . stdout ) else : yield SmartBuffer ( sys . stdout . buffer )",
  "docstring_tokens": "Print results straight to stdout"
 },
 {
  "idx": "webquery-test-113",
  "doc": "union of two dictionaries in python",
  "code": "def dict_merge(set1, set2):\n    \"\"\"Joins two dictionaries.\"\"\"\n    return dict(list(set1.items()) + list(set2.items()))",
  "label": 1,
  "code_tokens": "def dict_merge ( set1 , set2 ) : return dict ( list ( set1 . items ( ) ) + list ( set2 . items ( ) ) )",
  "docstring_tokens": "Joins two dictionaries ."
 },
 {
  "idx": "webquery-test-114",
  "doc": "union of two dictionaries in python",
  "code": "def union(self, other):\n        \"\"\"produce a 'union' of this dict and another (at the key level).\n\n        values in the second dict take precedence over that of the first\"\"\"\n        x = SetLikeDict(**self)\n        x.update(other)\n        return x",
  "label": 1,
  "code_tokens": "def union ( self , other ) : x = SetLikeDict ( * * self ) x . update ( other ) return x",
  "docstring_tokens": "produce a union of this dict and another ( at the key level ) ."
 },
 {
  "idx": "webquery-test-115",
  "doc": "python multiply all elements of list",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-116",
  "doc": "python multiply all elements of list",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-117",
  "doc": "latitude longitude height azimuth pitch distance python",
  "code": "def theta(v):\n    \"\"\"Neutrino direction in polar coordinates.\n\n    Downgoing event: theta = 180deg\n    Horizont: 90deg\n    Upgoing: theta = 0\n\n    Angles in radians.\n    \"\"\"\n    v = np.atleast_2d(v)\n    dir_z = v[:, 2]\n    return theta_separg(dir_z)",
  "label": 0,
  "code_tokens": "def theta ( v ) : v = np . atleast_2d ( v ) dir_z = v [ : , 2 ] return theta_separg ( dir_z )",
  "docstring_tokens": "Neutrino direction in polar coordinates ."
 },
 {
  "idx": "webquery-test-118",
  "doc": "latitude longitude height azimuth pitch distance python",
  "code": "def _num2deg(self, tile):\n        \"\"\" Taken from http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Python \"\"\"\n        n = 2.0 ** tile.zoom\n        lon_deg = tile.x / n * 360.0 - 180.0\n        lat_rad = mod_math.atan(mod_math.sinh(mod_math.pi * (1 - 2 * tile.y / n)))\n        lat_deg = mod_math.degrees(lat_rad)\n        return (lat_deg, lon_deg)",
  "label": 0,
  "code_tokens": "def _num2deg ( self , tile ) : n = 2.0 ** tile . zoom lon_deg = tile . x / n * 360.0 - 180.0 lat_rad = mod_math . atan ( mod_math . sinh ( mod_math . pi * ( 1 - 2 * tile . y / n ) ) ) lat_deg = mod_math . degrees ( lat_rad ) return ( lat_deg , lon_deg )",
  "docstring_tokens": "Taken from http : // wiki . openstreetmap . org / wiki / Slippy_map_tilenames#Python"
 },
 {
  "idx": "webquery-test-119",
  "doc": "python split string on comma sometimes space",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 1,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-120",
  "doc": "python split string on comma sometimes space",
  "code": "def string_to_list(string, sep=\",\", filter_empty=False):\n    \"\"\"Transforma una string con elementos separados por `sep` en una lista.\"\"\"\n    return [value.strip() for value in string.split(sep)\n            if (not filter_empty or value)]",
  "label": 1,
  "code_tokens": "def string_to_list ( string , sep = \",\" , filter_empty = False ) : return [ value . strip ( ) for value in string . split ( sep ) if ( not filter_empty or value ) ]",
  "docstring_tokens": "Transforma una string con elementos separados por sep en una lista ."
 },
 {
  "idx": "webquery-test-121",
  "doc": "how to remove integers from string python",
  "code": "def str2int(string_with_int):\n    \"\"\" Collect digits from a string \"\"\"\n    return int(\"\".join([char for char in string_with_int if char in string.digits]) or 0)",
  "label": 1,
  "code_tokens": "def str2int ( string_with_int ) : return int ( \"\" . join ( [ char for char in string_with_int if char in string . digits ] ) or 0 )",
  "docstring_tokens": "Collect digits from a string"
 },
 {
  "idx": "webquery-test-122",
  "doc": "how to remove integers from string python",
  "code": "def get_numbers(s):\n    \"\"\"Extracts all integers from a string an return them in a list\"\"\"\n\n    result = map(int, re.findall(r'[0-9]+', unicode(s)))\n    return result + [1] * (2 - len(result))",
  "label": 1,
  "code_tokens": "def get_numbers ( s ) : result = map ( int , re . findall ( r'[0-9]+' , unicode ( s ) ) ) return result + [ 1 ] * ( 2 - len ( result ) )",
  "docstring_tokens": "Extracts all integers from a string an return them in a list"
 },
 {
  "idx": "webquery-test-123",
  "doc": "with open file python automatic close",
  "code": "def close(self):\n        \"\"\"Close the file and restore the channel.\"\"\"\n        self.flush()\n        setattr(sys, self.channel, self.ostream)\n        self.file.close()\n        self._closed = True",
  "label": 0,
  "code_tokens": "def close ( self ) : self . flush ( ) setattr ( sys , self . channel , self . ostream ) self . file . close ( ) self . _closed = True",
  "docstring_tokens": "Close the file and restore the channel ."
 },
 {
  "idx": "webquery-test-124",
  "doc": "with open file python automatic close",
  "code": "def __exit__(self, type, value, traceback):\n        \"\"\"When the `with` statement ends.\"\"\"\n\n        if not self.asarfile:\n            return\n\n        self.asarfile.close()\n        self.asarfile = None",
  "label": 0,
  "code_tokens": "def __exit__ ( self , type , value , traceback ) : if not self . asarfile : return self . asarfile . close ( ) self . asarfile = None",
  "docstring_tokens": "When the with statement ends ."
 },
 {
  "idx": "webquery-test-125",
  "doc": "python check file permission in windows",
  "code": "def add_exec_permission_to(target_file):\n    \"\"\"Add executable permissions to the file\n\n    :param target_file: the target file whose permission to be changed\n    \"\"\"\n    mode = os.stat(target_file).st_mode\n    os.chmod(target_file, mode | stat.S_IXUSR)",
  "label": 0,
  "code_tokens": "def add_exec_permission_to ( target_file ) : mode = os . stat ( target_file ) . st_mode os . chmod ( target_file , mode | stat . S_IXUSR )",
  "docstring_tokens": "Add executable permissions to the file"
 },
 {
  "idx": "webquery-test-126",
  "doc": "python check file permission in windows",
  "code": "def chmod_add_excute(filename):\n        \"\"\"\n        Adds execute permission to file.\n        :param filename:\n        :return:\n        \"\"\"\n        st = os.stat(filename)\n        os.chmod(filename, st.st_mode | stat.S_IEXEC)",
  "label": 0,
  "code_tokens": "def chmod_add_excute ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )",
  "docstring_tokens": "Adds execute permission to file . : param filename : : return :"
 },
 {
  "idx": "webquery-test-127",
  "doc": "if a number is true python",
  "code": "def is_natural(x):\n    \"\"\"A non-negative integer.\"\"\"\n    try:\n        is_integer = int(x) == x\n    except (TypeError, ValueError):\n        return False\n    return is_integer and x >= 0",
  "label": 1,
  "code_tokens": "def is_natural ( x ) : try : is_integer = int ( x ) == x except ( TypeError , ValueError ) : return False return is_integer and x >= 0",
  "docstring_tokens": "A non - negative integer ."
 },
 {
  "idx": "webquery-test-128",
  "doc": "if a number is true python",
  "code": "def is_int(value):\n    \"\"\"Return `True` if ``value`` is an integer.\"\"\"\n    if isinstance(value, bool):\n        return False\n    try:\n        int(value)\n        return True\n    except (ValueError, TypeError):\n        return False",
  "label": 1,
  "code_tokens": "def is_int ( value ) : if isinstance ( value , bool ) : return False try : int ( value ) return True except ( ValueError , TypeError ) : return False",
  "docstring_tokens": "Return True if value is an integer ."
 },
 {
  "idx": "webquery-test-129",
  "doc": "python draw kmean graph",
  "code": "def kernel_shap_1000_meanref(model, data):\n    \"\"\" Kernel SHAP 1000 mean ref.\n    color = red_blue_circle(0.5)\n    linestyle = solid\n    \"\"\"\n    return lambda X: KernelExplainer(model.predict, kmeans(data, 1)).shap_values(X, nsamples=1000, l1_reg=0)",
  "label": 0,
  "code_tokens": "def kernel_shap_1000_meanref ( model , data ) : return lambda X : KernelExplainer ( model . predict , kmeans ( data , 1 ) ) . shap_values ( X , nsamples = 1000 , l1_reg = 0 )",
  "docstring_tokens": "Kernel SHAP 1000 mean ref . color = red_blue_circle ( 0 . 5 ) linestyle = solid"
 },
 {
  "idx": "webquery-test-130",
  "doc": "python draw kmean graph",
  "code": "def fit(self, X):\n        \"\"\" Apply KMeans Clustering\n              X: dataset with feature vectors\n        \"\"\"\n        self.centers_, self.labels_, self.sse_arr_, self.n_iter_ = \\\n              _kmeans(X, self.n_clusters, self.max_iter, self.n_trials, self.tol)",
  "label": 1,
  "code_tokens": "def fit ( self , X ) : self . centers_ , self . labels_ , self . sse_arr_ , self . n_iter_ = _kmeans ( X , self . n_clusters , self . max_iter , self . n_trials , self . tol )",
  "docstring_tokens": "Apply KMeans Clustering X : dataset with feature vectors"
 },
 {
  "idx": "webquery-test-131",
  "doc": "python turn a datetime object into naiv",
  "code": "def timestamp_to_datetime(timestamp):\n    \"\"\"Convert an ARF timestamp to a datetime.datetime object (naive local time)\"\"\"\n    from datetime import datetime, timedelta\n    obj = datetime.fromtimestamp(timestamp[0])\n    return obj + timedelta(microseconds=int(timestamp[1]))",
  "label": 1,
  "code_tokens": "def timestamp_to_datetime ( timestamp ) : from datetime import datetime , timedelta obj = datetime . fromtimestamp ( timestamp [ 0 ] ) return obj + timedelta ( microseconds = int ( timestamp [ 1 ] ) )",
  "docstring_tokens": "Convert an ARF timestamp to a datetime . datetime object ( naive local time )"
 },
 {
  "idx": "webquery-test-132",
  "doc": "python turn a datetime object into naiv",
  "code": "def convert_timestamp(timestamp):\n    \"\"\"\n    Converts bokehJS timestamp to datetime64.\n    \"\"\"\n    datetime = dt.datetime.utcfromtimestamp(timestamp/1000.)\n    return np.datetime64(datetime.replace(tzinfo=None))",
  "label": 0,
  "code_tokens": "def convert_timestamp ( timestamp ) : datetime = dt . datetime . utcfromtimestamp ( timestamp / 1000. ) return np . datetime64 ( datetime . replace ( tzinfo = None ) )",
  "docstring_tokens": "Converts bokehJS timestamp to datetime64 ."
 },
 {
  "idx": "webquery-test-133",
  "doc": "python iterate throguh list of strings",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-134",
  "doc": "python iterate throguh list of strings",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 0,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-135",
  "doc": "python 2 compare float to str",
  "code": "def _tofloat(obj):\n    \"\"\"Convert to float if object is a float string.\"\"\"\n    if \"inf\" in obj.lower().strip():\n        return obj\n    try:\n        return int(obj)\n    except ValueError:\n        try:\n            return float(obj)\n        except ValueError:\n            return obj",
  "label": 0,
  "code_tokens": "def _tofloat ( obj ) : if \"inf\" in obj . lower ( ) . strip ( ) : return obj try : return int ( obj ) except ValueError : try : return float ( obj ) except ValueError : return obj",
  "docstring_tokens": "Convert to float if object is a float string ."
 },
 {
  "idx": "webquery-test-136",
  "doc": "python 2 compare float to str",
  "code": "def try_convert(value):\n        \"\"\"Convert value to a numeric value or raise a ValueError\n        if that isn't possible.\n\n        \"\"\"\n        convertible = ForceNumeric.is_convertible(value)\n        if not convertible or isinstance(value, bool):\n            raise ValueError\n        if isinstance(str(value), str):\n            return ForceNumeric.str_to_num(value)\n        return float(value)",
  "label": 0,
  "code_tokens": "def try_convert ( value ) : convertible = ForceNumeric . is_convertible ( value ) if not convertible or isinstance ( value , bool ) : raise ValueError if isinstance ( str ( value ) , str ) : return ForceNumeric . str_to_num ( value ) return float ( value )",
  "docstring_tokens": "Convert value to a numeric value or raise a ValueError if that isn t possible ."
 },
 {
  "idx": "webquery-test-137",
  "doc": "python determine if an object is bytes or string",
  "code": "def is_string(obj):\n    \"\"\"Is this a string.\n\n    :param object obj:\n    :rtype: bool\n    \"\"\"\n    if PYTHON3:\n        str_type = (bytes, str)\n    else:\n        str_type = (bytes, str, unicode)\n    return isinstance(obj, str_type)",
  "label": 1,
  "code_tokens": "def is_string ( obj ) : if PYTHON3 : str_type = ( bytes , str ) else : str_type = ( bytes , str , unicode ) return isinstance ( obj , str_type )",
  "docstring_tokens": "Is this a string ."
 },
 {
  "idx": "webquery-test-138",
  "doc": "python determine if an object is bytes or string",
  "code": "def isstring(value):\n    \"\"\"Report whether the given value is a byte or unicode string.\"\"\"\n    classes = (str, bytes) if pyutils.PY3 else basestring  # noqa: F821\n    return isinstance(value, classes)",
  "label": 1,
  "code_tokens": "def isstring ( value ) : classes = ( str , bytes ) if pyutils . PY3 else basestring # noqa: F821 return isinstance ( value , classes )",
  "docstring_tokens": "Report whether the given value is a byte or unicode string ."
 },
 {
  "idx": "webquery-test-139",
  "doc": "replace charter in file python",
  "code": "def replace_all(filepath, searchExp, replaceExp):\n    \"\"\"\n    Replace all the ocurrences (in a file) of a string with another value.\n    \"\"\"\n    for line in fileinput.input(filepath, inplace=1):\n        if searchExp in line:\n            line = line.replace(searchExp, replaceExp)\n        sys.stdout.write(line)",
  "label": 1,
  "code_tokens": "def replace_all ( filepath , searchExp , replaceExp ) : for line in fileinput . input ( filepath , inplace = 1 ) : if searchExp in line : line = line . replace ( searchExp , replaceExp ) sys . stdout . write ( line )",
  "docstring_tokens": "Replace all the ocurrences ( in a file ) of a string with another value ."
 },
 {
  "idx": "webquery-test-140",
  "doc": "replace charter in file python",
  "code": "def fix_header_comment(filename, timestamp):\n    \"\"\"Fixes the header-comment of the given file.\"\"\"\n    # Fix input file.\n    name = os.path.basename( filename )\n    for line in fileinput.input( filename, inplace=1, mode=\"rU\" ):\n        # If header-comment already contains anything for '$Id$', remove it.\n        line = re.sub(r'\\$Id:[^$]+\\$', r'$Id$', line.rstrip())\n        # Replace '$Id$' by a string containing the file's name (and a timestamp)!\n        line = re.sub(re.escape(r'$Id$'), r'$Id: ' + name + r' ' + timestamp.isoformat() + r' $', line.rstrip())\n        print(line)",
  "label": 1,
  "code_tokens": "def fix_header_comment ( filename , timestamp ) : # Fix input file. name = os . path . basename ( filename ) for line in fileinput . input ( filename , inplace = 1 , mode = \"rU\" ) : # If header-comment already contains anything for '$Id$', remove it. line = re . sub ( r'\\$Id:[^$]+\\$' , r'$Id$' , line . rstrip ( ) ) # Replace '$Id$' by a string containing the file's name (and a timestamp)! line = re . sub ( re . escape ( r'$Id$' ) , r'$Id: ' + name + r' ' + timestamp . isoformat ( ) + r' $' , line . rstrip ( ) ) print ( line )",
  "docstring_tokens": "Fixes the header - comment of the given file ."
 },
 {
  "idx": "webquery-test-141",
  "doc": "turn list of string of numbers to in python",
  "code": "def int2str(num, radix=10, alphabet=BASE85):\n    \"\"\"helper function for quick base conversions from integers to strings\"\"\"\n    return NumConv(radix, alphabet).int2str(num)",
  "label": 0,
  "code_tokens": "def int2str ( num , radix = 10 , alphabet = BASE85 ) : return NumConv ( radix , alphabet ) . int2str ( num )",
  "docstring_tokens": "helper function for quick base conversions from integers to strings"
 },
 {
  "idx": "webquery-test-142",
  "doc": "turn list of string of numbers to in python",
  "code": "def try_cast_int(s):\n    \"\"\"(str) -> int\n    All the digits in a given string are concatenated and converted into a single number.\n    \"\"\"\n    try:\n        temp = re.findall('\\d', str(s))\n        temp = ''.join(temp)\n        return int(temp)\n    except:\n        return s",
  "label": 1,
  "code_tokens": "def try_cast_int ( s ) : try : temp = re . findall ( '\\d' , str ( s ) ) temp = '' . join ( temp ) return int ( temp ) except : return s",
  "docstring_tokens": "( str ) - > int All the digits in a given string are concatenated and converted into a single number ."
 },
 {
  "idx": "webquery-test-143",
  "doc": "python 3 read binary file 16 bytes at a time and finding eof",
  "code": "def eof(fd):\n    \"\"\"Determine if end-of-file is reached for file fd.\"\"\"\n    b = fd.read(1)\n    end = len(b) == 0\n    if not end:\n        curpos = fd.tell()\n        fd.seek(curpos - 1)\n    return end",
  "label": 1,
  "code_tokens": "def eof ( fd ) : b = fd . read ( 1 ) end = len ( b ) == 0 if not end : curpos = fd . tell ( ) fd . seek ( curpos - 1 ) return end",
  "docstring_tokens": "Determine if end - of - file is reached for file fd ."
 },
 {
  "idx": "webquery-test-144",
  "doc": "python 3 read binary file 16 bytes at a time and finding eof",
  "code": "def read_string(buff, byteorder='big'):\r\n    \"\"\"Read a string from a file-like object.\"\"\"\r\n    length = read_numeric(USHORT, buff, byteorder)\r\n    return buff.read(length).decode('utf-8')",
  "label": 0,
  "code_tokens": "def read_string ( buff , byteorder = 'big' ) : length = read_numeric ( USHORT , buff , byteorder ) return buff . read ( length ) . decode ( 'utf-8' )",
  "docstring_tokens": "Read a string from a file - like object ."
 },
 {
  "idx": "webquery-test-145",
  "doc": "how to get index of maximum element in list in python",
  "code": "def MultiArgMax(x):\n  \"\"\"\n  Get tuple (actually a generator) of indices where the max value of\n  array x occurs. Requires that x have a max() method, as x.max()\n  (in the case of NumPy) is much faster than max(x).\n  For a simpler, faster argmax when there is only a single maximum entry,\n  or when knowing only the first index where the maximum occurs,\n  call argmax() on a NumPy array.\n\n  :param x: Any sequence that has a max() method.\n  :returns: Generator with the indices where the max value occurs.\n  \"\"\"\n  m = x.max()\n  return (i for i, v in enumerate(x) if v == m)",
  "label": 1,
  "code_tokens": "def MultiArgMax ( x ) : m = x . max ( ) return ( i for i , v in enumerate ( x ) if v == m )",
  "docstring_tokens": "Get tuple ( actually a generator ) of indices where the max value of array x occurs . Requires that x have a max () method as x . max () ( in the case of NumPy ) is much faster than max ( x ) . For a simpler faster argmax when there is only a single maximum entry or when knowing only the first index where the maximum occurs call argmax () on a NumPy array ."
 },
 {
  "idx": "webquery-test-146",
  "doc": "how to get index of maximum element in list in python",
  "code": "def get_longest_orf(orfs):\n    \"\"\"Find longest ORF from the given list of ORFs.\"\"\"\n    sorted_orf = sorted(orfs, key=lambda x: len(x['sequence']), reverse=True)[0]\n    return sorted_orf",
  "label": 0,
  "code_tokens": "def get_longest_orf ( orfs ) : sorted_orf = sorted ( orfs , key = lambda x : len ( x [ 'sequence' ] ) , reverse = True ) [ 0 ] return sorted_orf",
  "docstring_tokens": "Find longest ORF from the given list of ORFs ."
 },
 {
  "idx": "webquery-test-147",
  "doc": "testing efficeny in python tonget the time of programs completion",
  "code": "def test3():\n    \"\"\"Test the multiprocess\n    \"\"\"\n    import time\n    \n    p = MVisionProcess()\n    p.start()\n    time.sleep(5)\n    p.stop()",
  "label": 0,
  "code_tokens": "def test3 ( ) : import time p = MVisionProcess ( ) p . start ( ) time . sleep ( 5 ) p . stop ( )",
  "docstring_tokens": "Test the multiprocess"
 },
 {
  "idx": "webquery-test-148",
  "doc": "testing efficeny in python tonget the time of programs completion",
  "code": "def speedtest(func, *args, **kwargs):\n    \"\"\" Test the speed of a function. \"\"\"\n    n = 100\n    start = time.time()\n    for i in range(n): func(*args,**kwargs)\n    end = time.time()\n    return (end-start)/n",
  "label": 1,
  "code_tokens": "def speedtest ( func , * args , * * kwargs ) : n = 100 start = time . time ( ) for i in range ( n ) : func ( * args , * * kwargs ) end = time . time ( ) return ( end - start ) / n",
  "docstring_tokens": "Test the speed of a function ."
 },
 {
  "idx": "webquery-test-149",
  "doc": "create a dictionary from two list python",
  "code": "def list2dict(list_of_options):\n    \"\"\"Transforms a list of 2 element tuples to a dictionary\"\"\"\n    d = {}\n    for key, value in list_of_options:\n        d[key] = value\n    return d",
  "label": 1,
  "code_tokens": "def list2dict ( list_of_options ) : d = { } for key , value in list_of_options : d [ key ] = value return d",
  "docstring_tokens": "Transforms a list of 2 element tuples to a dictionary"
 },
 {
  "idx": "webquery-test-150",
  "doc": "create a dictionary from two list python",
  "code": "def list_of_lists_to_dict(l):\n    \"\"\" Convert list of key,value lists to dict\n\n    [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]\n    {'id': [1, 2, 3], 'foo': [4]}\n    \"\"\"\n    d = {}\n    for key, val in l:\n        d.setdefault(key, []).append(val)\n    return d",
  "label": 1,
  "code_tokens": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d",
  "docstring_tokens": "Convert list of key value lists to dict"
 },
 {
  "idx": "webquery-test-151",
  "doc": "determine number of columns in python",
  "code": "def size(self):\n        \"\"\"Total number of grid points.\"\"\"\n        # Since np.prod(()) == 1.0 we need to handle that by ourselves\n        return (0 if self.shape == () else\n                int(np.prod(self.shape, dtype='int64')))",
  "label": 1,
  "code_tokens": "def size ( self ) : # Since np.prod(()) == 1.0 we need to handle that by ourselves return ( 0 if self . shape == ( ) else int ( np . prod ( self . shape , dtype = 'int64' ) ) )",
  "docstring_tokens": "Total number of grid points ."
 },
 {
  "idx": "webquery-test-152",
  "doc": "determine number of columns in python",
  "code": "def shape(self):\n        \"\"\"Compute the shape of the dataset as (rows, cols).\"\"\"\n        if not self.data:\n            return (0, 0)\n        return (len(self.data), len(self.dimensions))",
  "label": 1,
  "code_tokens": "def shape ( self ) : if not self . data : return ( 0 , 0 ) return ( len ( self . data ) , len ( self . dimensions ) )",
  "docstring_tokens": "Compute the shape of the dataset as ( rows cols ) ."
 },
 {
  "idx": "webquery-test-153",
  "doc": "how to check the status of table widget in python",
  "code": "def is_installable(self, model_index):\n        \"\"\" \"\"\"\n        row = model_index.row()\n        status = self._rows[row][C.COL_STATUS]\n        return status == C.NOT_INSTALLED",
  "label": 1,
  "code_tokens": "def is_installable ( self , model_index ) : row = model_index . row ( ) status = self . _rows [ row ] [ C . COL_STATUS ] return status == C . NOT_INSTALLED",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-154",
  "doc": "how to check the status of table widget in python",
  "code": "def autofit(self):\n        \"\"\"\n        Return |False| if there is a ``<w:tblLayout>`` child with ``w:type``\n        attribute set to ``'fixed'``. Otherwise return |True|.\n        \"\"\"\n        tblLayout = self.tblLayout\n        if tblLayout is None:\n            return True\n        return False if tblLayout.type == 'fixed' else True",
  "label": 0,
  "code_tokens": "def autofit ( self ) : tblLayout = self . tblLayout if tblLayout is None : return True return False if tblLayout . type == 'fixed' else True",
  "docstring_tokens": "Return |False| if there is a <w : tblLayout > child with w : type attribute set to fixed . Otherwise return |True| ."
 },
 {
  "idx": "webquery-test-155",
  "doc": "filter number in string python",
  "code": "def split(s):\n  \"\"\"Uses dynamic programming to infer the location of spaces in a string without spaces.\"\"\"\n  l = [_split(x) for x in _SPLIT_RE.split(s)]\n  return [item for sublist in l for item in sublist]",
  "label": 0,
  "code_tokens": "def split ( s ) : l = [ _split ( x ) for x in _SPLIT_RE . split ( s ) ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Uses dynamic programming to infer the location of spaces in a string without spaces ."
 },
 {
  "idx": "webquery-test-156",
  "doc": "filter number in string python",
  "code": "def valid_substitution(strlen, index):\n    \"\"\"\n    skip performing substitutions that are outside the bounds of the string\n    \"\"\"\n    values = index[0]\n    return all([strlen > i for i in values])",
  "label": 0,
  "code_tokens": "def valid_substitution ( strlen , index ) : values = index [ 0 ] return all ( [ strlen > i for i in values ] )",
  "docstring_tokens": "skip performing substitutions that are outside the bounds of the string"
 },
 {
  "idx": "webquery-test-157",
  "doc": "python functions return an integer from a boolean",
  "code": "def _cast_boolean(value):\n    \"\"\"\n    Helper to convert config values to boolean as ConfigParser do.\n    \"\"\"\n    _BOOLEANS = {'1': True, 'yes': True, 'true': True, 'on': True,\n                 '0': False, 'no': False, 'false': False, 'off': False, '': False}\n    value = str(value)\n    if value.lower() not in _BOOLEANS:\n        raise ValueError('Not a boolean: %s' % value)\n\n    return _BOOLEANS[value.lower()]",
  "label": 0,
  "code_tokens": "def _cast_boolean ( value ) : _BOOLEANS = { '1' : True , 'yes' : True , 'true' : True , 'on' : True , '0' : False , 'no' : False , 'false' : False , 'off' : False , '' : False } value = str ( value ) if value . lower ( ) not in _BOOLEANS : raise ValueError ( 'Not a boolean: %s' % value ) return _BOOLEANS [ value . lower ( ) ]",
  "docstring_tokens": "Helper to convert config values to boolean as ConfigParser do ."
 },
 {
  "idx": "webquery-test-158",
  "doc": "python functions return an integer from a boolean",
  "code": "def convertToNative(self, aVal):\n        \"\"\" Convert to native bool; interpret certain strings. \"\"\"\n        if aVal is None:\n            return None\n        if isinstance(aVal, bool): return aVal\n        # otherwise interpret strings\n        return str(aVal).lower() in ('1','on','yes','true')",
  "label": 0,
  "code_tokens": "def convertToNative ( self , aVal ) : if aVal is None : return None if isinstance ( aVal , bool ) : return aVal # otherwise interpret strings return str ( aVal ) . lower ( ) in ( '1' , 'on' , 'yes' , 'true' )",
  "docstring_tokens": "Convert to native bool ; interpret certain strings ."
 },
 {
  "idx": "webquery-test-159",
  "doc": "get double valuye datetime python",
  "code": "def date_to_timestamp(date):\n    \"\"\"\n        date to unix timestamp in milliseconds\n    \"\"\"\n    date_tuple = date.timetuple()\n    timestamp = calendar.timegm(date_tuple) * 1000\n    return timestamp",
  "label": 0,
  "code_tokens": "def date_to_timestamp ( date ) : date_tuple = date . timetuple ( ) timestamp = calendar . timegm ( date_tuple ) * 1000 return timestamp",
  "docstring_tokens": "date to unix timestamp in milliseconds"
 },
 {
  "idx": "webquery-test-160",
  "doc": "get double valuye datetime python",
  "code": "def timestamp_to_datetime(timestamp):\n    \"\"\"Convert an ARF timestamp to a datetime.datetime object (naive local time)\"\"\"\n    from datetime import datetime, timedelta\n    obj = datetime.fromtimestamp(timestamp[0])\n    return obj + timedelta(microseconds=int(timestamp[1]))",
  "label": 0,
  "code_tokens": "def timestamp_to_datetime ( timestamp ) : from datetime import datetime , timedelta obj = datetime . fromtimestamp ( timestamp [ 0 ] ) return obj + timedelta ( microseconds = int ( timestamp [ 1 ] ) )",
  "docstring_tokens": "Convert an ARF timestamp to a datetime . datetime object ( naive local time )"
 },
 {
  "idx": "webquery-test-161",
  "doc": "how to delete text values python",
  "code": "def remove_bad(string):\n    \"\"\"\n    remove problem characters from string\n    \"\"\"\n    remove = [':', ',', '(', ')', ' ', '|', ';', '\\'']\n    for c in remove:\n        string = string.replace(c, '_')\n    return string",
  "label": 1,
  "code_tokens": "def remove_bad ( string ) : remove = [ ':' , ',' , '(' , ')' , ' ' , '|' , ';' , '\\'' ] for c in remove : string = string . replace ( c , '_' ) return string",
  "docstring_tokens": "remove problem characters from string"
 },
 {
  "idx": "webquery-test-162",
  "doc": "how to delete text values python",
  "code": "def drop_bad_characters(text):\n    \"\"\"Takes a text and drops all non-printable and non-ascii characters and\n    also any whitespace characters that aren't space.\n\n    :arg str text: the text to fix\n\n    :returns: text with all bad characters dropped\n\n    \"\"\"\n    # Strip all non-ascii and non-printable characters\n    text = ''.join([c for c in text if c in ALLOWED_CHARS])\n    return text",
  "label": 1,
  "code_tokens": "def drop_bad_characters ( text ) : # Strip all non-ascii and non-printable characters text = '' . join ( [ c for c in text if c in ALLOWED_CHARS ] ) return text",
  "docstring_tokens": "Takes a text and drops all non - printable and non - ascii characters and also any whitespace characters that aren t space ."
 },
 {
  "idx": "webquery-test-163",
  "doc": "python clean html remove css script",
  "code": "def strip_html(string, keep_tag_content=False):\n    \"\"\"\n    Remove html code contained into the given string.\n\n    :param string: String to manipulate.\n    :type string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    :rtype: str\n    \"\"\"\n    r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE\n    return r.sub('', string)",
  "label": 1,
  "code_tokens": "def strip_html ( string , keep_tag_content = False ) : r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE return r . sub ( '' , string )",
  "docstring_tokens": "Remove html code contained into the given string ."
 },
 {
  "idx": "webquery-test-164",
  "doc": "python clean html remove css script",
  "code": "def convert_html_subscripts_to_latex(text):\n    \"\"\"Convert some HTML tags to latex equivalents.\"\"\"\n    text = re.sub(\"<sub>(.*?)</sub>\", r\"$_{\\1}$\", text)\n    text = re.sub(\"<sup>(.*?)</sup>\", r\"$^{\\1}$\", text)\n    return text",
  "label": 1,
  "code_tokens": "def convert_html_subscripts_to_latex ( text ) : text = re . sub ( \"<sub>(.*?)</sub>\" , r\"$_{\\1}$\" , text ) text = re . sub ( \"<sup>(.*?)</sup>\" , r\"$^{\\1}$\" , text ) return text",
  "docstring_tokens": "Convert some HTML tags to latex equivalents ."
 },
 {
  "idx": "webquery-test-165",
  "doc": "python insert a variable string",
  "code": "def getSystemVariable(self, remote, name):\n        \"\"\"Get single system variable from CCU / Homegear\"\"\"\n        if self._server is not None:\n            return self._server.getSystemVariable(remote, name)",
  "label": 0,
  "code_tokens": "def getSystemVariable ( self , remote , name ) : if self . _server is not None : return self . _server . getSystemVariable ( remote , name )",
  "docstring_tokens": "Get single system variable from CCU / Homegear"
 },
 {
  "idx": "webquery-test-166",
  "doc": "python insert a variable string",
  "code": "def _station(self) -> str:\n        \"\"\"Extract station name.\"\"\"\n        return str(self.obj.SBRes.SBReq.Start.Station.HafasName.Text.pyval)",
  "label": 0,
  "code_tokens": "def _station ( self ) -> str : return str ( self . obj . SBRes . SBReq . Start . Station . HafasName . Text . pyval )",
  "docstring_tokens": "Extract station name ."
 },
 {
  "idx": "webquery-test-167",
  "doc": "python rename stdout log file name",
  "code": "def log_no_newline(self, msg):\n      \"\"\" print the message to the predefined log file without newline \"\"\"\n      self.print2file(self.logfile, False, False, msg)",
  "label": 0,
  "code_tokens": "def log_no_newline ( self , msg ) : self . print2file ( self . logfile , False , False , msg )",
  "docstring_tokens": "print the message to the predefined log file without newline"
 },
 {
  "idx": "webquery-test-168",
  "doc": "python rename stdout log file name",
  "code": "def pstd(self, *args, **kwargs):\n        \"\"\" Console to STDOUT \"\"\"\n        kwargs['file'] = self.out\n        self.print(*args, **kwargs)\n        sys.stdout.flush()",
  "label": 0,
  "code_tokens": "def pstd ( self , * args , * * kwargs ) : kwargs [ 'file' ] = self . out self . print ( * args , * * kwargs ) sys . stdout . flush ( )",
  "docstring_tokens": "Console to STDOUT"
 },
 {
  "idx": "webquery-test-169",
  "doc": "python opencv read image size inverted",
  "code": "def read_img(path):\n    \"\"\" Reads image specified by path into numpy.ndarray\"\"\"\n    img = cv2.resize(cv2.imread(path, 0), (80, 30)).astype(np.float32) / 255\n    img = np.expand_dims(img.transpose(1, 0), 0)\n    return img",
  "label": 1,
  "code_tokens": "def read_img ( path ) : img = cv2 . resize ( cv2 . imread ( path , 0 ) , ( 80 , 30 ) ) . astype ( np . float32 ) / 255 img = np . expand_dims ( img . transpose ( 1 , 0 ) , 0 ) return img",
  "docstring_tokens": "Reads image specified by path into numpy . ndarray"
 },
 {
  "idx": "webquery-test-170",
  "doc": "python opencv read image size inverted",
  "code": "def resize(src, size, interpolation=cv2.INTER_LINEAR):\n    \"\"\"Decode image from str buffer.\n    Wrapper for cv2.imresize that uses mx.nd.NDArray\n\n    Parameters\n    ----------\n    src : NDArray\n        image in (width, height, channels)\n    size : tuple\n        target size in (width, height)\n    interpolation : int\n        same as interpolation for cv2.imresize\n\n    Returns\n    -------\n    img : NDArray\n        resized image\n    \"\"\"\n    hdl = NDArrayHandle()\n    check_call(_LIB.MXCVResize(src.handle, mx_uint(size[0]), mx_uint(size[1]),\n                               interpolation, ctypes.byref(hdl)))\n    return mx.nd.NDArray(hdl)",
  "label": 0,
  "code_tokens": "def resize ( src , size , interpolation = cv2 . INTER_LINEAR ) : hdl = NDArrayHandle ( ) check_call ( _LIB . MXCVResize ( src . handle , mx_uint ( size [ 0 ] ) , mx_uint ( size [ 1 ] ) , interpolation , ctypes . byref ( hdl ) ) ) return mx . nd . NDArray ( hdl )",
  "docstring_tokens": "Decode image from str buffer . Wrapper for cv2 . imresize that uses mx . nd . NDArray"
 },
 {
  "idx": "webquery-test-171",
  "doc": "csv format to 2d array in python",
  "code": "def _array2cstr(arr):\n    \"\"\" Serializes a numpy array to a compressed base64 string \"\"\"\n    out = StringIO()\n    np.save(out, arr)\n    return b64encode(out.getvalue())",
  "label": 0,
  "code_tokens": "def _array2cstr ( arr ) : out = StringIO ( ) np . save ( out , arr ) return b64encode ( out . getvalue ( ) )",
  "docstring_tokens": "Serializes a numpy array to a compressed base64 string"
 },
 {
  "idx": "webquery-test-172",
  "doc": "csv format to 2d array in python",
  "code": "def C_dict2array(C):\n    \"\"\"Convert an OrderedDict containing C values to a 1D array.\"\"\"\n    return np.hstack([np.asarray(C[k]).ravel() for k in C_keys])",
  "label": 0,
  "code_tokens": "def C_dict2array ( C ) : return np . hstack ( [ np . asarray ( C [ k ] ) . ravel ( ) for k in C_keys ] )",
  "docstring_tokens": "Convert an OrderedDict containing C values to a 1D array ."
 },
 {
  "idx": "webquery-test-173",
  "doc": "corrolation plot code python",
  "code": "def show_correlation_matrix(self, correlation_matrix):\n        \"\"\"Shows the given correlation matrix as image\n\n        :param correlation_matrix: Correlation matrix of features\n        \"\"\"\n        cr_plot.create_correlation_matrix_plot(\n            correlation_matrix, self.title, self.headers_to_test\n        )\n        pyplot.show()",
  "label": 0,
  "code_tokens": "def show_correlation_matrix ( self , correlation_matrix ) : cr_plot . create_correlation_matrix_plot ( correlation_matrix , self . title , self . headers_to_test ) pyplot . show ( )",
  "docstring_tokens": "Shows the given correlation matrix as image"
 },
 {
  "idx": "webquery-test-174",
  "doc": "corrolation plot code python",
  "code": "def plot_target(target, ax):\n    \"\"\"Ajoute la target au plot\"\"\"\n    ax.scatter(target[0], target[1], target[2], c=\"red\", s=80)",
  "label": 1,
  "code_tokens": "def plot_target ( target , ax ) : ax . scatter ( target [ 0 ] , target [ 1 ] , target [ 2 ] , c = \"red\" , s = 80 )",
  "docstring_tokens": "Ajoute la target au plot"
 },
 {
  "idx": "webquery-test-175",
  "doc": "python xml utf8 tostring",
  "code": "def safe_unicode(string):\n    \"\"\"If Python 2, replace non-ascii characters and return encoded string.\"\"\"\n    if not PY3:\n        uni = string.replace(u'\\u2019', \"'\")\n        return uni.encode('utf-8')\n        \n    return string",
  "label": 0,
  "code_tokens": "def safe_unicode ( string ) : if not PY3 : uni = string . replace ( u'\\u2019' , \"'\" ) return uni . encode ( 'utf-8' ) return string",
  "docstring_tokens": "If Python 2 replace non - ascii characters and return encoded string ."
 },
 {
  "idx": "webquery-test-176",
  "doc": "python xml utf8 tostring",
  "code": "def b2u(string):\n    \"\"\" bytes to unicode \"\"\"\n    if (isinstance(string, bytes) or\n        (PY2 and isinstance(string, str))):\n        return string.decode('utf-8')\n    return string",
  "label": 1,
  "code_tokens": "def b2u ( string ) : if ( isinstance ( string , bytes ) or ( PY2 and isinstance ( string , str ) ) ) : return string . decode ( 'utf-8' ) return string",
  "docstring_tokens": "bytes to unicode"
 },
 {
  "idx": "webquery-test-177",
  "doc": "python ascii int to char",
  "code": "def _unichr(i):\n    \"\"\"\n    Helper function for taking a Unicode scalar value and returning a Unicode character.\n\n    :param s: Unicode scalar value to convert.\n    :return: Unicode character\n    \"\"\"\n    if not isinstance(i, int):\n        raise TypeError\n    try:\n        return six.unichr(i)\n    except ValueError:\n        # Workaround the error \"ValueError: unichr() arg not in range(0x10000) (narrow Python build)\"\n        return struct.pack(\"i\", i).decode(\"utf-32\")",
  "label": 1,
  "code_tokens": "def _unichr ( i ) : if not isinstance ( i , int ) : raise TypeError try : return six . unichr ( i ) except ValueError : # Workaround the error \"ValueError: unichr() arg not in range(0x10000) (narrow Python build)\" return struct . pack ( \"i\" , i ) . decode ( \"utf-32\" )",
  "docstring_tokens": "Helper function for taking a Unicode scalar value and returning a Unicode character ."
 },
 {
  "idx": "webquery-test-178",
  "doc": "python ascii int to char",
  "code": "def c_str(string):\n    \"\"\"\"Convert a python string to C string.\"\"\"\n    if not isinstance(string, str):\n        string = string.decode('ascii')\n    return ctypes.c_char_p(string.encode('utf-8'))",
  "label": 1,
  "code_tokens": "def c_str ( string ) : if not isinstance ( string , str ) : string = string . decode ( 'ascii' ) return ctypes . c_char_p ( string . encode ( 'utf-8' ) )",
  "docstring_tokens": "Convert a python string to C string ."
 },
 {
  "idx": "webquery-test-179",
  "doc": "python and replace multerble charaters in string",
  "code": "def _sanitize(text):\n    \"\"\"Return sanitized Eidos text field for human readability.\"\"\"\n    d = {'-LRB-': '(', '-RRB-': ')'}\n    return re.sub('|'.join(d.keys()), lambda m: d[m.group(0)], text)",
  "label": 1,
  "code_tokens": "def _sanitize ( text ) : d = { '-LRB-' : '(' , '-RRB-' : ')' } return re . sub ( '|' . join ( d . keys ( ) ) , lambda m : d [ m . group ( 0 ) ] , text )",
  "docstring_tokens": "Return sanitized Eidos text field for human readability ."
 },
 {
  "idx": "webquery-test-180",
  "doc": "python and replace multerble charaters in string",
  "code": "def dashrepl(value):\n    \"\"\"\n    Replace any non-word characters with a dash.\n    \"\"\"\n    patt = re.compile(r'\\W', re.UNICODE)\n    return re.sub(patt, '-', value)",
  "label": 1,
  "code_tokens": "def dashrepl ( value ) : patt = re . compile ( r'\\W' , re . UNICODE ) return re . sub ( patt , '-' , value )",
  "docstring_tokens": "Replace any non - word characters with a dash ."
 },
 {
  "idx": "webquery-test-181",
  "doc": "number of repeated elements in list python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-182",
  "doc": "number of repeated elements in list python",
  "code": "def count_list(the_list):\n    \"\"\"\n    Generates a count of the number of times each unique item appears in a list\n    \"\"\"\n    count = the_list.count\n    result = [(item, count(item)) for item in set(the_list)]\n    result.sort()\n    return result",
  "label": 1,
  "code_tokens": "def count_list ( the_list ) : count = the_list . count result = [ ( item , count ( item ) ) for item in set ( the_list ) ] result . sort ( ) return result",
  "docstring_tokens": "Generates a count of the number of times each unique item appears in a list"
 },
 {
  "idx": "webquery-test-183",
  "doc": "python listen to socket continuously",
  "code": "def begin_stream_loop(stream, poll_interval):\n    \"\"\"Start and maintain the streaming connection...\"\"\"\n    while should_continue():\n        try:\n            stream.start_polling(poll_interval)\n        except Exception as e:\n            # Infinite restart\n            logger.error(\"Exception while polling. Restarting in 1 second.\", exc_info=True)\n            time.sleep(1)",
  "label": 0,
  "code_tokens": "def begin_stream_loop ( stream , poll_interval ) : while should_continue ( ) : try : stream . start_polling ( poll_interval ) except Exception as e : # Infinite restart logger . error ( \"Exception while polling. Restarting in 1 second.\" , exc_info = True ) time . sleep ( 1 )",
  "docstring_tokens": "Start and maintain the streaming connection ..."
 },
 {
  "idx": "webquery-test-184",
  "doc": "python listen to socket continuously",
  "code": "def public_broadcaster():\n    \"\"\"\n    Thread which runs in parallel and constantly checks for new messages\n    in the public pipe and broadcasts them publicly to all connected clients.\n    \"\"\"\n    while __websocket_server_running__:\n        pipein = open(PUBLIC_PIPE, 'r')\n        line = pipein.readline().replace('\\n', '').replace('\\r', '')\n        if line != '':\n            WebSocketHandler.broadcast(line)\n            print line\n            \n            remaining_lines = pipein.read()\n            pipein.close()\n            pipeout = open(PUBLIC_PIPE, 'w')\n            pipeout.write(remaining_lines)\n            pipeout.close()\n        else:\n            pipein.close()\n        \n        time.sleep(0.05)",
  "label": 1,
  "code_tokens": "def public_broadcaster ( ) : while __websocket_server_running__ : pipein = open ( PUBLIC_PIPE , 'r' ) line = pipein . readline ( ) . replace ( '\\n' , '' ) . replace ( '\\r' , '' ) if line != '' : WebSocketHandler . broadcast ( line ) print line remaining_lines = pipein . read ( ) pipein . close ( ) pipeout = open ( PUBLIC_PIPE , 'w' ) pipeout . write ( remaining_lines ) pipeout . close ( ) else : pipein . close ( ) time . sleep ( 0.05 )",
  "docstring_tokens": "Thread which runs in parallel and constantly checks for new messages in the public pipe and broadcasts them publicly to all connected clients ."
 },
 {
  "idx": "webquery-test-185",
  "doc": "finding the python path",
  "code": "def path_for_import(name):\n    \"\"\"\n    Returns the directory path for the given package or module.\n    \"\"\"\n    return os.path.dirname(os.path.abspath(import_module(name).__file__))",
  "label": 1,
  "code_tokens": "def path_for_import ( name ) : return os . path . dirname ( os . path . abspath ( import_module ( name ) . __file__ ) )",
  "docstring_tokens": "Returns the directory path for the given package or module ."
 },
 {
  "idx": "webquery-test-186",
  "doc": "finding the python path",
  "code": "def get_module_path(module):\n    \"\"\"return a directory path to a module\"\"\"\n    return pathlib.Path(\n        os.path.dirname(os.path.abspath(inspect.getfile(module))))",
  "label": 1,
  "code_tokens": "def get_module_path ( module ) : return pathlib . Path ( os . path . dirname ( os . path . abspath ( inspect . getfile ( module ) ) ) )",
  "docstring_tokens": "return a directory path to a module"
 },
 {
  "idx": "webquery-test-187",
  "doc": "python script to shutdown computer os independent",
  "code": "def shutdown(self):\n        \"\"\"\n        Shutdown the cluster.\n        \"\"\"\n        self.stop = True\n        if self.stats:\n            self.stats.shutDownStats()\n        self.join()",
  "label": 0,
  "code_tokens": "def shutdown ( self ) : self . stop = True if self . stats : self . stats . shutDownStats ( ) self . join ( )",
  "docstring_tokens": "Shutdown the cluster ."
 },
 {
  "idx": "webquery-test-188",
  "doc": "python script to shutdown computer os independent",
  "code": "def _shutdown(self):\n    \"\"\"Terminate the sub-process.\"\"\"\n    if self._proc:\n      ret = _shutdown_proc(self._proc, 3)\n      logging.info(\"Shutdown with return code: %s\", ret)\n      self._proc = None",
  "label": 0,
  "code_tokens": "def _shutdown ( self ) : if self . _proc : ret = _shutdown_proc ( self . _proc , 3 ) logging . info ( \"Shutdown with return code: %s\" , ret ) self . _proc = None",
  "docstring_tokens": "Terminate the sub - process ."
 },
 {
  "idx": "webquery-test-189",
  "doc": "how to fill the color in python",
  "code": "def write_color(string, name, style='normal', when='auto'):\n    \"\"\" Write the given colored string to standard out. \"\"\"\n    write(color(string, name, style, when))",
  "label": 1,
  "code_tokens": "def write_color ( string , name , style = 'normal' , when = 'auto' ) : write ( color ( string , name , style , when ) )",
  "docstring_tokens": "Write the given colored string to standard out ."
 },
 {
  "idx": "webquery-test-190",
  "doc": "how to fill the color in python",
  "code": "def ansi(color, text):\n    \"\"\"Wrap text in an ansi escape sequence\"\"\"\n    code = COLOR_CODES[color]\n    return '\\033[1;{0}m{1}{2}'.format(code, text, RESET_TERM)",
  "label": 1,
  "code_tokens": "def ansi ( color , text ) : code = COLOR_CODES [ color ] return '\\033[1;{0}m{1}{2}' . format ( code , text , RESET_TERM )",
  "docstring_tokens": "Wrap text in an ansi escape sequence"
 },
 {
  "idx": "webquery-test-191",
  "doc": "python matplotlib choose what goes in your legend",
  "code": "def finish_plot():\n    \"\"\"Helper for plotting.\"\"\"\n    plt.legend()\n    plt.grid(color='0.7')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()",
  "label": 1,
  "code_tokens": "def finish_plot ( ) : plt . legend ( ) plt . grid ( color = '0.7' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ( )",
  "docstring_tokens": "Helper for plotting ."
 },
 {
  "idx": "webquery-test-192",
  "doc": "python matplotlib choose what goes in your legend",
  "code": "def plot(self):\r\n        \"\"\"Plot the empirical histogram versus best-fit distribution's PDF.\"\"\"\r\n        plt.plot(self.bin_edges, self.hist, self.bin_edges, self.best_pdf)",
  "label": 0,
  "code_tokens": "def plot ( self ) : plt . plot ( self . bin_edges , self . hist , self . bin_edges , self . best_pdf )",
  "docstring_tokens": "Plot the empirical histogram versus best - fit distribution s PDF ."
 },
 {
  "idx": "webquery-test-193",
  "doc": "how to separate plots in python",
  "code": "def basic():\n    \"\"\"Set up a basic stereonet and plot the same data each time.\"\"\"\n    fig, ax = mplstereonet.subplots()\n\n    strike, dip = 315, 30\n    ax.plane(strike, dip, color='lightblue')\n    ax.pole(strike, dip, color='green', markersize=15)\n    ax.rake(strike, dip, 40, marker='*', markersize=20, color='green')\n\n    # Make a bit of room for the title...\n    fig.subplots_adjust(top=0.8)\n\n    return ax",
  "label": 0,
  "code_tokens": "def basic ( ) : fig , ax = mplstereonet . subplots ( ) strike , dip = 315 , 30 ax . plane ( strike , dip , color = 'lightblue' ) ax . pole ( strike , dip , color = 'green' , markersize = 15 ) ax . rake ( strike , dip , 40 , marker = '*' , markersize = 20 , color = 'green' ) # Make a bit of room for the title... fig . subplots_adjust ( top = 0.8 ) return ax",
  "docstring_tokens": "Set up a basic stereonet and plot the same data each time ."
 },
 {
  "idx": "webquery-test-194",
  "doc": "how to separate plots in python",
  "code": "def plot_target(target, ax):\n    \"\"\"Ajoute la target au plot\"\"\"\n    ax.scatter(target[0], target[1], target[2], c=\"red\", s=80)",
  "label": 0,
  "code_tokens": "def plot_target ( target , ax ) : ax . scatter ( target [ 0 ] , target [ 1 ] , target [ 2 ] , c = \"red\" , s = 80 )",
  "docstring_tokens": "Ajoute la target au plot"
 },
 {
  "idx": "webquery-test-195",
  "doc": "python os get pid",
  "code": "def generate_unique_host_id():\n    \"\"\"Generate a unique ID, that is somewhat guaranteed to be unique among all\n    instances running at the same time.\"\"\"\n    host = \".\".join(reversed(socket.gethostname().split(\".\")))\n    pid = os.getpid()\n    return \"%s.%d\" % (host, pid)",
  "label": 1,
  "code_tokens": "def generate_unique_host_id ( ) : host = \".\" . join ( reversed ( socket . gethostname ( ) . split ( \".\" ) ) ) pid = os . getpid ( ) return \"%s.%d\" % ( host , pid )",
  "docstring_tokens": "Generate a unique ID that is somewhat guaranteed to be unique among all instances running at the same time ."
 },
 {
  "idx": "webquery-test-196",
  "doc": "python os get pid",
  "code": "def _write_pidfile(pidfile):\n    \"\"\" Write file with current process ID.\n    \"\"\"\n    pid = str(os.getpid())\n    handle = open(pidfile, 'w')\n    try:\n        handle.write(\"%s\\n\" % pid)\n    finally:\n        handle.close()",
  "label": 1,
  "code_tokens": "def _write_pidfile ( pidfile ) : pid = str ( os . getpid ( ) ) handle = open ( pidfile , 'w' ) try : handle . write ( \"%s\\n\" % pid ) finally : handle . close ( )",
  "docstring_tokens": "Write file with current process ID ."
 },
 {
  "idx": "webquery-test-197",
  "doc": "python test if a list is all none",
  "code": "def _not_none(items):\n    \"\"\"Whether the item is a placeholder or contains a placeholder.\"\"\"\n    if not isinstance(items, (tuple, list)):\n        items = (items,)\n    return all(item is not _none for item in items)",
  "label": 1,
  "code_tokens": "def _not_none ( items ) : if not isinstance ( items , ( tuple , list ) ) : items = ( items , ) return all ( item is not _none for item in items )",
  "docstring_tokens": "Whether the item is a placeholder or contains a placeholder ."
 },
 {
  "idx": "webquery-test-198",
  "doc": "python test if a list is all none",
  "code": "def contains_empty(features):\n    \"\"\"Check features data are not empty\n\n    :param features: The features data to check.\n    :type features: list of numpy arrays.\n\n    :return: True if one of the array is empty, False else.\n\n    \"\"\"\n    if not features:\n        return True\n    for feature in features:\n        if feature.shape[0] == 0:\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def contains_empty ( features ) : if not features : return True for feature in features : if feature . shape [ 0 ] == 0 : return True return False",
  "docstring_tokens": "Check features data are not empty"
 },
 {
  "idx": "webquery-test-199",
  "doc": "removine item from a list python",
  "code": "def unique_element(ll):\n    \"\"\" returns unique elements from a list preserving the original order \"\"\"\n    seen = {}\n    result = []\n    for item in ll:\n        if item in seen:\n            continue\n        seen[item] = 1\n        result.append(item)\n    return result",
  "label": 0,
  "code_tokens": "def unique_element ( ll ) : seen = { } result = [ ] for item in ll : if item in seen : continue seen [ item ] = 1 result . append ( item ) return result",
  "docstring_tokens": "returns unique elements from a list preserving the original order"
 },
 {
  "idx": "webquery-test-200",
  "doc": "removine item from a list python",
  "code": "def ziptake(items_list, indexes_list):\n    \"\"\"\n    SeeAlso:\n        vt.ziptake\n    \"\"\"\n    return [take(list_, index_list)\n            for list_, index_list in zip(items_list, indexes_list)]",
  "label": 0,
  "code_tokens": "def ziptake ( items_list , indexes_list ) : return [ take ( list_ , index_list ) for list_ , index_list in zip ( items_list , indexes_list ) ]",
  "docstring_tokens": "SeeAlso : vt . ziptake"
 },
 {
  "idx": "webquery-test-201",
  "doc": "python check if array is true",
  "code": "def is_bool_matrix(l):\n    r\"\"\"Checks if l is a 2D numpy array of bools\n\n    \"\"\"\n    if isinstance(l, np.ndarray):\n        if l.ndim == 2 and (l.dtype == bool):\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def is_bool_matrix ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 2 and ( l . dtype == bool ) : return True return False",
  "docstring_tokens": "r Checks if l is a 2D numpy array of bools"
 },
 {
  "idx": "webquery-test-202",
  "doc": "python check if array is true",
  "code": "def is_iterable(value):\n    \"\"\"must be an iterable (list, array, tuple)\"\"\"\n    return isinstance(value, np.ndarray) or isinstance(value, list) or isinstance(value, tuple), value",
  "label": 1,
  "code_tokens": "def is_iterable ( value ) : return isinstance ( value , np . ndarray ) or isinstance ( value , list ) or isinstance ( value , tuple ) , value",
  "docstring_tokens": "must be an iterable ( list array tuple )"
 },
 {
  "idx": "webquery-test-203",
  "doc": "how to access 3d array pythong",
  "code": "def _transform_triple_numpy(x):\n    \"\"\"Transform triple index into a 1-D numpy array.\"\"\"\n    return np.array([x.head, x.relation, x.tail], dtype=np.int64)",
  "label": 0,
  "code_tokens": "def _transform_triple_numpy ( x ) : return np . array ( [ x . head , x . relation , x . tail ] , dtype = np . int64 )",
  "docstring_tokens": "Transform triple index into a 1 - D numpy array ."
 },
 {
  "idx": "webquery-test-204",
  "doc": "how to access 3d array pythong",
  "code": "def S(self):\n        \"\"\":obj:`numpy.ndarray` : The 3x3 scaling matrix for this projection\n        \"\"\"\n        S = np.array([[self._plane_width / self._vol_width, 0, 0],\n                      [0, self._plane_height / self._vol_height, 0],\n                      [0, 0, self._depth_scale / self._vol_depth]])\n        return S",
  "label": 1,
  "code_tokens": "def S ( self ) : S = np . array ( [ [ self . _plane_width / self . _vol_width , 0 , 0 ] , [ 0 , self . _plane_height / self . _vol_height , 0 ] , [ 0 , 0 , self . _depth_scale / self . _vol_depth ] ] ) return S",
  "docstring_tokens": ": obj : numpy . ndarray : The 3x3 scaling matrix for this projection"
 },
 {
  "idx": "webquery-test-205",
  "doc": "get element of a matrix in python'",
  "code": "def load_data(filename):\n    \"\"\"\n    :rtype : numpy matrix\n    \"\"\"\n    data = pandas.read_csv(filename, header=None, delimiter='\\t', skiprows=9)\n    return data.as_matrix()",
  "label": 0,
  "code_tokens": "def load_data ( filename ) : data = pandas . read_csv ( filename , header = None , delimiter = '\\t' , skiprows = 9 ) return data . as_matrix ( )",
  "docstring_tokens": ": rtype : numpy matrix"
 },
 {
  "idx": "webquery-test-206",
  "doc": "get element of a matrix in python'",
  "code": "def csv_to_matrix(csv_file_path):\n    \"\"\"Load a CSV file into a Python matrix of strings.\n\n    Args:\n        csv_file_path: Full path to a valid CSV file (e.g. c:/ladybug/test.csv)\n    \"\"\"\n    mtx = []\n    with open(csv_file_path) as csv_data_file:\n        for row in csv_data_file:\n            mtx.append(row.split(','))\n    return mtx",
  "label": 0,
  "code_tokens": "def csv_to_matrix ( csv_file_path ) : mtx = [ ] with open ( csv_file_path ) as csv_data_file : for row in csv_data_file : mtx . append ( row . split ( ',' ) ) return mtx",
  "docstring_tokens": "Load a CSV file into a Python matrix of strings ."
 },
 {
  "idx": "webquery-test-207",
  "doc": "python how to only accept intigers as inputs",
  "code": "def safe_int_conv(number):\n    \"\"\"Safely convert a single number to integer.\"\"\"\n    try:\n        return int(np.array(number).astype(int, casting='safe'))\n    except TypeError:\n        raise ValueError('cannot safely convert {} to integer'.format(number))",
  "label": 1,
  "code_tokens": "def safe_int_conv ( number ) : try : return int ( np . array ( number ) . astype ( int , casting = 'safe' ) ) except TypeError : raise ValueError ( 'cannot safely convert {} to integer' . format ( number ) )",
  "docstring_tokens": "Safely convert a single number to integer ."
 },
 {
  "idx": "webquery-test-208",
  "doc": "python how to only accept intigers as inputs",
  "code": "def robust_int(v):\n    \"\"\"Parse an int robustly, ignoring commas and other cruft. \"\"\"\n\n    if isinstance(v, int):\n        return v\n\n    if isinstance(v, float):\n        return int(v)\n\n    v = str(v).replace(',', '')\n\n    if not v:\n        return None\n\n    return int(v)",
  "label": 1,
  "code_tokens": "def robust_int ( v ) : if isinstance ( v , int ) : return v if isinstance ( v , float ) : return int ( v ) v = str ( v ) . replace ( ',' , '' ) if not v : return None return int ( v )",
  "docstring_tokens": "Parse an int robustly ignoring commas and other cruft ."
 },
 {
  "idx": "webquery-test-209",
  "doc": "filter out nans in python data frame",
  "code": "def dropna(self, subset=None):\n        \"\"\"Remove missing values according to Baloo's convention.\n\n        Parameters\n        ----------\n        subset : list of str, optional\n            Which columns to check for missing values in.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with no null values in columns.\n\n        \"\"\"\n        subset = check_and_obtain_subset_columns(subset, self)\n        not_nas = [v.notna() for v in self[subset]._iter()]\n        and_filter = reduce(lambda x, y: x & y, not_nas)\n\n        return self[and_filter]",
  "label": 1,
  "code_tokens": "def dropna ( self , subset = None ) : subset = check_and_obtain_subset_columns ( subset , self ) not_nas = [ v . notna ( ) for v in self [ subset ] . _iter ( ) ] and_filter = reduce ( lambda x , y : x & y , not_nas ) return self [ and_filter ]",
  "docstring_tokens": "Remove missing values according to Baloo s convention ."
 },
 {
  "idx": "webquery-test-210",
  "doc": "filter out nans in python data frame",
  "code": "def clean_with_zeros(self,x):\n        \"\"\" set nan and inf rows from x to zero\"\"\"\n        x[~np.any(np.isnan(x) | np.isinf(x),axis=1)] = 0\n        return x",
  "label": 1,
  "code_tokens": "def clean_with_zeros ( self , x ) : x [ ~ np . any ( np . isnan ( x ) | np . isinf ( x ) , axis = 1 ) ] = 0 return x",
  "docstring_tokens": "set nan and inf rows from x to zero"
 },
 {
  "idx": "webquery-test-211",
  "doc": "python functions that compute the l1 and l2 distances between x and y",
  "code": "def difference(ydata1, ydata2):\n    \"\"\"\n\n    Returns the number you should add to ydata1 to make it line up with ydata2\n\n    \"\"\"\n\n    y1 = _n.array(ydata1)\n    y2 = _n.array(ydata2)\n\n    return(sum(y2-y1)/len(ydata1))",
  "label": 0,
  "code_tokens": "def difference ( ydata1 , ydata2 ) : y1 = _n . array ( ydata1 ) y2 = _n . array ( ydata2 ) return ( sum ( y2 - y1 ) / len ( ydata1 ) )",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-212",
  "doc": "python functions that compute the l1 and l2 distances between x and y",
  "code": "def skip_connection_distance(a, b):\n    \"\"\"The distance between two skip-connections.\"\"\"\n    if a[2] != b[2]:\n        return 1.0\n    len_a = abs(a[1] - a[0])\n    len_b = abs(b[1] - b[0])\n    return (abs(a[0] - b[0]) + abs(len_a - len_b)) / (max(a[0], b[0]) + max(len_a, len_b))",
  "label": 0,
  "code_tokens": "def skip_connection_distance ( a , b ) : if a [ 2 ] != b [ 2 ] : return 1.0 len_a = abs ( a [ 1 ] - a [ 0 ] ) len_b = abs ( b [ 1 ] - b [ 0 ] ) return ( abs ( a [ 0 ] - b [ 0 ] ) + abs ( len_a - len_b ) ) / ( max ( a [ 0 ] , b [ 0 ] ) + max ( len_a , len_b ) )",
  "docstring_tokens": "The distance between two skip - connections ."
 },
 {
  "idx": "webquery-test-213",
  "doc": "appending data into data frame python",
  "code": "def to_dataframe(products):\n        \"\"\"Return the products from a query response as a Pandas DataFrame\n        with the values in their appropriate Python types.\n        \"\"\"\n        try:\n            import pandas as pd\n        except ImportError:\n            raise ImportError(\"to_dataframe requires the optional dependency Pandas.\")\n\n        return pd.DataFrame.from_dict(products, orient='index')",
  "label": 0,
  "code_tokens": "def to_dataframe ( products ) : try : import pandas as pd except ImportError : raise ImportError ( \"to_dataframe requires the optional dependency Pandas.\" ) return pd . DataFrame . from_dict ( products , orient = 'index' )",
  "docstring_tokens": "Return the products from a query response as a Pandas DataFrame with the values in their appropriate Python types ."
 },
 {
  "idx": "webquery-test-214",
  "doc": "appending data into data frame python",
  "code": "def QA_util_to_json_from_pandas(data):\n    \"\"\"\u9700\u8981\u5bf9\u4e8edatetime \u548cdate \u8fdb\u884c\u8f6c\u6362, \u4ee5\u514d\u76f4\u63a5\u88ab\u53d8\u6210\u4e86\u65f6\u95f4\u6233\"\"\"\n    if 'datetime' in data.columns:\n        data.datetime = data.datetime.apply(str)\n    if 'date' in data.columns:\n        data.date = data.date.apply(str)\n    return json.loads(data.to_json(orient='records'))",
  "label": 0,
  "code_tokens": "def QA_util_to_json_from_pandas ( data ) : if 'datetime' in data . columns : data . datetime = data . datetime . apply ( str ) if 'date' in data . columns : data . date = data . date . apply ( str ) return json . loads ( data . to_json ( orient = 'records' ) )",
  "docstring_tokens": "\u9700\u8981\u5bf9\u4e8edatetime \u548cdate \u8fdb\u884c\u8f6c\u6362 \u4ee5\u514d\u76f4\u63a5\u88ab\u53d8\u6210\u4e86\u65f6\u95f4\u6233"
 },
 {
  "idx": "webquery-test-215",
  "doc": "dynamic password changer python",
  "code": "def sflow_sample_rate(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        sflow = ET.SubElement(config, \"sflow\", xmlns=\"urn:brocade.com:mgmt:brocade-sflow\")\n        sample_rate = ET.SubElement(sflow, \"sample-rate\")\n        sample_rate.text = kwargs.pop('sample_rate')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 0,
  "code_tokens": "def sflow_sample_rate ( self , * * kwargs ) : config = ET . Element ( \"config\" ) sflow = ET . SubElement ( config , \"sflow\" , xmlns = \"urn:brocade.com:mgmt:brocade-sflow\" ) sample_rate = ET . SubElement ( sflow , \"sample-rate\" ) sample_rate . text = kwargs . pop ( 'sample_rate' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-216",
  "doc": "dynamic password changer python",
  "code": "def dot1x_enable(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        dot1x = ET.SubElement(config, \"dot1x\", xmlns=\"urn:brocade.com:mgmt:brocade-dot1x\")\n        enable = ET.SubElement(dot1x, \"enable\")\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 0,
  "code_tokens": "def dot1x_enable ( self , * * kwargs ) : config = ET . Element ( \"config\" ) dot1x = ET . SubElement ( config , \"dot1x\" , xmlns = \"urn:brocade.com:mgmt:brocade-dot1x\" ) enable = ET . SubElement ( dot1x , \"enable\" ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-217",
  "doc": "how to apply oop to fuction in python",
  "code": "def __init__(self,\n                 post_clean_up: Callable[[Sequence[ops.Operation]], ops.OP_TREE\n                                ] = lambda op_list: op_list\n                 ) -> None:\n        \"\"\"\n        Args:\n            post_clean_up: This function is called on each set of optimized\n                operations before they are put into the circuit to replace the\n                old operations.\n        \"\"\"\n        self.post_clean_up = post_clean_up",
  "label": 0,
  "code_tokens": "def __init__ ( self , post_clean_up : Callable [ [ Sequence [ ops . Operation ] ] , ops . OP_TREE ] = lambda op_list : op_list ) -> None : self . post_clean_up = post_clean_up",
  "docstring_tokens": "Args : post_clean_up : This function is called on each set of optimized operations before they are put into the circuit to replace the old operations ."
 },
 {
  "idx": "webquery-test-218",
  "doc": "how to apply oop to fuction in python",
  "code": "def apply_operation(op_stack, out_stack):\r\n    \"\"\"\r\n    Apply operation to the first 2 items of the output queue\r\n\r\n    op_stack Deque (reference)\r\n    out_stack Deque (reference)\r\n    \"\"\"\r\n    out_stack.append(calc(out_stack.pop(), out_stack.pop(), op_stack.pop()))",
  "label": 1,
  "code_tokens": "def apply_operation ( op_stack , out_stack ) : out_stack . append ( calc ( out_stack . pop ( ) , out_stack . pop ( ) , op_stack . pop ( ) ) )",
  "docstring_tokens": "Apply operation to the first 2 items of the output queue op_stack Deque ( reference ) out_stack Deque ( reference )"
 },
 {
  "idx": "webquery-test-219",
  "doc": "ad number from list python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-220",
  "doc": "ad number from list python",
  "code": "def flatten(l, types=(list, float)):\n    \"\"\"\n    Flat nested list of lists into a single list.\n    \"\"\"\n    l = [item if isinstance(item, types) else [item] for item in l]\n    return [item for sublist in l for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten ( l , types = ( list , float ) ) : l = [ item if isinstance ( item , types ) else [ item ] for item in l ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Flat nested list of lists into a single list ."
 },
 {
  "idx": "webquery-test-221",
  "doc": "disable python requests logging",
  "code": "def should_skip_logging(func):\n    \"\"\"\n    Should we skip logging for this handler?\n\n    \"\"\"\n    disabled = strtobool(request.headers.get(\"x-request-nolog\", \"false\"))\n    return disabled or getattr(func, SKIP_LOGGING, False)",
  "label": 1,
  "code_tokens": "def should_skip_logging ( func ) : disabled = strtobool ( request . headers . get ( \"x-request-nolog\" , \"false\" ) ) return disabled or getattr ( func , SKIP_LOGGING , False )",
  "docstring_tokens": "Should we skip logging for this handler?"
 },
 {
  "idx": "webquery-test-222",
  "doc": "disable python requests logging",
  "code": "def logger(message, level=10):\n    \"\"\"Handle logging.\"\"\"\n    logging.getLogger(__name__).log(level, str(message))",
  "label": 0,
  "code_tokens": "def logger ( message , level = 10 ) : logging . getLogger ( __name__ ) . log ( level , str ( message ) )",
  "docstring_tokens": "Handle logging ."
 },
 {
  "idx": "webquery-test-223",
  "doc": "python subprocess popen non blocking",
  "code": "def disown(cmd):\n    \"\"\"Call a system command in the background,\n       disown it and hide it's output.\"\"\"\n    subprocess.Popen(cmd,\n                     stdout=subprocess.DEVNULL,\n                     stderr=subprocess.DEVNULL)",
  "label": 1,
  "code_tokens": "def disown ( cmd ) : subprocess . Popen ( cmd , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL )",
  "docstring_tokens": "Call a system command in the background disown it and hide it s output ."
 },
 {
  "idx": "webquery-test-224",
  "doc": "python subprocess popen non blocking",
  "code": "def correspond(text):\n    \"\"\"Communicate with the child process without closing stdin.\"\"\"\n    if text:\n        subproc.stdin.write(text)\n    subproc.stdin.flush()\n    return get_lines()",
  "label": 0,
  "code_tokens": "def correspond ( text ) : if text : subproc . stdin . write ( text ) subproc . stdin . flush ( ) return get_lines ( )",
  "docstring_tokens": "Communicate with the child process without closing stdin ."
 },
 {
  "idx": "webquery-test-225",
  "doc": "how to make sure only letters are inputted python",
  "code": "def _stdin_(p):\n    \"\"\"Takes input from user. Works for Python 2 and 3.\"\"\"\n    _v = sys.version[0]\n    return input(p) if _v is '3' else raw_input(p)",
  "label": 0,
  "code_tokens": "def _stdin_ ( p ) : _v = sys . version [ 0 ] return input ( p ) if _v is '3' else raw_input ( p )",
  "docstring_tokens": "Takes input from user . Works for Python 2 and 3 ."
 },
 {
  "idx": "webquery-test-226",
  "doc": "how to make sure only letters are inputted python",
  "code": "def return_letters_from_string(text):\n    \"\"\"Get letters from string only.\"\"\"\n    out = \"\"\n    for letter in text:\n        if letter.isalpha():\n            out += letter\n    return out",
  "label": 1,
  "code_tokens": "def return_letters_from_string ( text ) : out = \"\" for letter in text : if letter . isalpha ( ) : out += letter return out",
  "docstring_tokens": "Get letters from string only ."
 },
 {
  "idx": "webquery-test-227",
  "doc": "how to for loop the value of dict in python",
  "code": "def printdict(adict):\n    \"\"\"printdict\"\"\"\n    dlist = list(adict.keys())\n    dlist.sort()\n    for i in range(0, len(dlist)):\n        print(dlist[i], adict[dlist[i]])",
  "label": 1,
  "code_tokens": "def printdict ( adict ) : dlist = list ( adict . keys ( ) ) dlist . sort ( ) for i in range ( 0 , len ( dlist ) ) : print ( dlist [ i ] , adict [ dlist [ i ] ] )",
  "docstring_tokens": "printdict"
 },
 {
  "idx": "webquery-test-228",
  "doc": "how to for loop the value of dict in python",
  "code": "def dmap(fn, record):\n    \"\"\"map for a directory\"\"\"\n    values = (fn(v) for k, v in record.items())\n    return dict(itertools.izip(record, values))",
  "label": 1,
  "code_tokens": "def dmap ( fn , record ) : values = ( fn ( v ) for k , v in record . items ( ) ) return dict ( itertools . izip ( record , values ) )",
  "docstring_tokens": "map for a directory"
 },
 {
  "idx": "webquery-test-229",
  "doc": "how to check if a specific index in a list is empty in python",
  "code": "def isin(value, values):\n    \"\"\" Check that value is in values \"\"\"\n    for i, v in enumerate(value):\n        if v not in np.array(values)[:, i]:\n            return False\n    return True",
  "label": 0,
  "code_tokens": "def isin ( value , values ) : for i , v in enumerate ( value ) : if v not in np . array ( values ) [ : , i ] : return False return True",
  "docstring_tokens": "Check that value is in values"
 },
 {
  "idx": "webquery-test-230",
  "doc": "how to check if a specific index in a list is empty in python",
  "code": "def _check_elements_equal(lst):\n    \"\"\"\n    Returns true if all of the elements in the list are equal.\n    \"\"\"\n    assert isinstance(lst, list), \"Input value must be a list.\"\n    return not lst or lst.count(lst[0]) == len(lst)",
  "label": 0,
  "code_tokens": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )",
  "docstring_tokens": "Returns true if all of the elements in the list are equal ."
 },
 {
  "idx": "webquery-test-231",
  "doc": "python str replace punctuation marks with a space",
  "code": "def unpunctuate(s, *, char_blacklist=string.punctuation):\n    \"\"\" Remove punctuation from string s. \"\"\"\n    # remove punctuation\n    s = \"\".join(c for c in s if c not in char_blacklist)\n    # remove consecutive spaces\n    return \" \".join(filter(None, s.split(\" \")))",
  "label": 1,
  "code_tokens": "def unpunctuate ( s , * , char_blacklist = string . punctuation ) : # remove punctuation s = \"\" . join ( c for c in s if c not in char_blacklist ) # remove consecutive spaces return \" \" . join ( filter ( None , s . split ( \" \" ) ) )",
  "docstring_tokens": "Remove punctuation from string s ."
 },
 {
  "idx": "webquery-test-232",
  "doc": "python str replace punctuation marks with a space",
  "code": "def unaccentuate(s):\n    \"\"\" Replace accentuated chars in string by their non accentuated equivalent. \"\"\"\n    return \"\".join(c for c in unicodedata.normalize(\"NFKD\", s) if not unicodedata.combining(c))",
  "label": 0,
  "code_tokens": "def unaccentuate ( s ) : return \"\" . join ( c for c in unicodedata . normalize ( \"NFKD\" , s ) if not unicodedata . combining ( c ) )",
  "docstring_tokens": "Replace accentuated chars in string by their non accentuated equivalent ."
 },
 {
  "idx": "webquery-test-233",
  "doc": "populate a tuple python",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 1,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-234",
  "doc": "populate a tuple python",
  "code": "def compose_all(tups):\n  \"\"\"Compose all given tuples together.\"\"\"\n  from . import ast  # I weep for humanity\n  return functools.reduce(lambda x, y: x.compose(y), map(ast.make_tuple, tups), ast.make_tuple({}))",
  "label": 0,
  "code_tokens": "def compose_all ( tups ) : from . import ast # I weep for humanity return functools . reduce ( lambda x , y : x . compose ( y ) , map ( ast . make_tuple , tups ) , ast . make_tuple ( { } ) )",
  "docstring_tokens": "Compose all given tuples together ."
 },
 {
  "idx": "webquery-test-235",
  "doc": "how to write a 2d array into file python",
  "code": "def adapt_array(arr):\n    \"\"\"\n    Adapts a Numpy array into an ARRAY string to put into the database.\n\n    Parameters\n    ----------\n    arr: array\n        The Numpy array to be adapted into an ARRAY type that can be inserted into a SQL file.\n\n    Returns\n    -------\n    ARRAY\n            The adapted array object\n\n    \"\"\"\n    out = io.BytesIO()\n    np.save(out, arr), out.seek(0)\n    return buffer(out.read())",
  "label": 1,
  "code_tokens": "def adapt_array ( arr ) : out = io . BytesIO ( ) np . save ( out , arr ) , out . seek ( 0 ) return buffer ( out . read ( ) )",
  "docstring_tokens": "Adapts a Numpy array into an ARRAY string to put into the database ."
 },
 {
  "idx": "webquery-test-236",
  "doc": "how to write a 2d array into file python",
  "code": "def bitsToString(arr):\n  \"\"\"Returns a string representing a numpy array of 0's and 1's\"\"\"\n  s = array('c','.'*len(arr))\n  for i in xrange(len(arr)):\n    if arr[i] == 1:\n      s[i]='*'\n  return s",
  "label": 0,
  "code_tokens": "def bitsToString ( arr ) : s = array ( 'c' , '.' * len ( arr ) ) for i in xrange ( len ( arr ) ) : if arr [ i ] == 1 : s [ i ] = '*' return s",
  "docstring_tokens": "Returns a string representing a numpy array of 0 s and 1 s"
 },
 {
  "idx": "webquery-test-237",
  "doc": "python killo float formating",
  "code": "def _saferound(value, decimal_places):\n    \"\"\"\n    Rounds a float value off to the desired precision\n    \"\"\"\n    try:\n        f = float(value)\n    except ValueError:\n        return ''\n    format = '%%.%df' % decimal_places\n    return format % f",
  "label": 1,
  "code_tokens": "def _saferound ( value , decimal_places ) : try : f = float ( value ) except ValueError : return '' format = '%%.%df' % decimal_places return format % f",
  "docstring_tokens": "Rounds a float value off to the desired precision"
 },
 {
  "idx": "webquery-test-238",
  "doc": "python killo float formating",
  "code": "def round_float(f, digits, rounding=ROUND_HALF_UP):\n    \"\"\"\n    Accurate float rounding from http://stackoverflow.com/a/15398691.\n    \"\"\"\n    return Decimal(str(f)).quantize(Decimal(10) ** (-1 * digits),\n                                    rounding=rounding)",
  "label": 0,
  "code_tokens": "def round_float ( f , digits , rounding = ROUND_HALF_UP ) : return Decimal ( str ( f ) ) . quantize ( Decimal ( 10 ) ** ( - 1 * digits ) , rounding = rounding )",
  "docstring_tokens": "Accurate float rounding from http : // stackoverflow . com / a / 15398691 ."
 },
 {
  "idx": "webquery-test-239",
  "doc": "how do i repeat a string in python",
  "code": "def insert_slash(string, every=2):\n    \"\"\"insert_slash insert / every 2 char\"\"\"\n    return os.path.join(string[i:i+every] for i in xrange(0, len(string), every))",
  "label": 1,
  "code_tokens": "def insert_slash ( string , every = 2 ) : return os . path . join ( string [ i : i + every ] for i in xrange ( 0 , len ( string ) , every ) )",
  "docstring_tokens": "insert_slash insert / every 2 char"
 },
 {
  "idx": "webquery-test-240",
  "doc": "how do i repeat a string in python",
  "code": "def column(self, i): \n        \"\"\"from right\"\"\"\n        return ''.join([str(digitat2(r,i)) for r in self])",
  "label": 0,
  "code_tokens": "def column ( self , i ) : return '' . join ( [ str ( digitat2 ( r , i ) ) for r in self ] )",
  "docstring_tokens": "from right"
 },
 {
  "idx": "webquery-test-241",
  "doc": "check s3 file existance using python",
  "code": "def file_exists(original_file):\n    \"\"\"\n    Check to make sure the original file exists\n    \"\"\"\n    if original_file.startswith(\"s3://\"):\n        from filesystem import s3\n        return s3.file_exists(original_file)\n    else:\n        if not os.path.exists(original_file):\n            return False\n        if not os.path.isfile(original_file):\n            return False\n    return True",
  "label": 1,
  "code_tokens": "def file_exists ( original_file ) : if original_file . startswith ( \"s3://\" ) : from filesystem import s3 return s3 . file_exists ( original_file ) else : if not os . path . exists ( original_file ) : return False if not os . path . isfile ( original_file ) : return False return True",
  "docstring_tokens": "Check to make sure the original file exists"
 },
 {
  "idx": "webquery-test-242",
  "doc": "check s3 file existance using python",
  "code": "def _exists(self, path):\n        \"\"\"S3 directory is not S3Ojbect.\n        \"\"\"\n        if path.endswith('/'):\n            return True\n        return self.storage.exists(path)",
  "label": 0,
  "code_tokens": "def _exists ( self , path ) : if path . endswith ( '/' ) : return True return self . storage . exists ( path )",
  "docstring_tokens": "S3 directory is not S3Ojbect ."
 },
 {
  "idx": "webquery-test-243",
  "doc": "append items to list on new lines python",
  "code": "def write_tsv_line_from_list(linelist, outfp):\n    \"\"\"Utility method to convert list to tsv line with carriage return\"\"\"\n    line = '\\t'.join(linelist)\n    outfp.write(line)\n    outfp.write('\\n')",
  "label": 0,
  "code_tokens": "def write_tsv_line_from_list ( linelist , outfp ) : line = '\\t' . join ( linelist ) outfp . write ( line ) outfp . write ( '\\n' )",
  "docstring_tokens": "Utility method to convert list to tsv line with carriage return"
 },
 {
  "idx": "webquery-test-244",
  "doc": "append items to list on new lines python",
  "code": "def add_lines(self, txt, indent=0):\n        \"\"\"Adds a list of lines.\n\n        The list can be indented with the optional argument 'indent'.\n        \"\"\"\n        for line in txt:\n            self.add_line(line, indent)",
  "label": 0,
  "code_tokens": "def add_lines ( self , txt , indent = 0 ) : for line in txt : self . add_line ( line , indent )",
  "docstring_tokens": "Adds a list of lines ."
 },
 {
  "idx": "webquery-test-245",
  "doc": "check list of points and see if any are collinear python",
  "code": "def is_colliding(self, other):\n        \"\"\"Check to see if two AABoundingBoxes are colliding.\"\"\"\n        if isinstance(other, AABoundingBox):\n            if self.rect.colliderect(other.rect):\n                return True\n            return False",
  "label": 0,
  "code_tokens": "def is_colliding ( self , other ) : if isinstance ( other , AABoundingBox ) : if self . rect . colliderect ( other . rect ) : return True return False",
  "docstring_tokens": "Check to see if two AABoundingBoxes are colliding ."
 },
 {
  "idx": "webquery-test-246",
  "doc": "check list of points and see if any are collinear python",
  "code": "def intersects(self, other_grid_coordinates):\n        \"\"\" returns True if the GC's overlap. \"\"\"\n        ogc = other_grid_coordinates  # alias\n        # for explanation: http://stackoverflow.com/questions/306316/determine-if-two-rectangles-overlap-each-other\n        # Note the flipped y-coord in this coord system.\n        ax1, ay1, ax2, ay2 = self.ULC.lon, self.ULC.lat, self.LRC.lon, self.LRC.lat\n        bx1, by1, bx2, by2 = ogc.ULC.lon, ogc.ULC.lat, ogc.LRC.lon, ogc.LRC.lat\n        if ((ax1 <= bx2) and (ax2 >= bx1) and (ay1 >= by2) and (ay2 <= by1)):\n            return True\n        else:\n            return False",
  "label": 0,
  "code_tokens": "def intersects ( self , other_grid_coordinates ) : ogc = other_grid_coordinates # alias # for explanation: http://stackoverflow.com/questions/306316/determine-if-two-rectangles-overlap-each-other # Note the flipped y-coord in this coord system. ax1 , ay1 , ax2 , ay2 = self . ULC . lon , self . ULC . lat , self . LRC . lon , self . LRC . lat bx1 , by1 , bx2 , by2 = ogc . ULC . lon , ogc . ULC . lat , ogc . LRC . lon , ogc . LRC . lat if ( ( ax1 <= bx2 ) and ( ax2 >= bx1 ) and ( ay1 >= by2 ) and ( ay2 <= by1 ) ) : return True else : return False",
  "docstring_tokens": "returns True if the GC s overlap ."
 },
 {
  "idx": "webquery-test-247",
  "doc": "input degrees and give out sin python",
  "code": "def get_input(input_func, input_str):\n    \"\"\"\n    Get input from the user given an input function and an input string\n    \"\"\"\n    val = input_func(\"Please enter your {0}: \".format(input_str))\n    while not val or not len(val.strip()):\n        val = input_func(\"You didn't enter a valid {0}, please try again: \".format(input_str))\n    return val",
  "label": 0,
  "code_tokens": "def get_input ( input_func , input_str ) : val = input_func ( \"Please enter your {0}: \" . format ( input_str ) ) while not val or not len ( val . strip ( ) ) : val = input_func ( \"You didn't enter a valid {0}, please try again: \" . format ( input_str ) ) return val",
  "docstring_tokens": "Get input from the user given an input function and an input string"
 },
 {
  "idx": "webquery-test-248",
  "doc": "input degrees and give out sin python",
  "code": "def main(arguments=None):\n    \"\"\"Main command line entry point.\"\"\"\n\n    if not arguments:\n        arguments = sys.argv[1:]\n\n    wordlist, sowpods, by_length, start, end = argument_parser(arguments)\n    for word in wordlist:\n        pretty_print(\n            word,\n            anagrams_in_word(word, sowpods, start, end),\n            by_length,\n        )",
  "label": 0,
  "code_tokens": "def main ( arguments = None ) : if not arguments : arguments = sys . argv [ 1 : ] wordlist , sowpods , by_length , start , end = argument_parser ( arguments ) for word in wordlist : pretty_print ( word , anagrams_in_word ( word , sowpods , start , end ) , by_length , )",
  "docstring_tokens": "Main command line entry point ."
 },
 {
  "idx": "webquery-test-249",
  "doc": "check if file is present in directory python",
  "code": "def contained_in(filename, directory):\n    \"\"\"Test if a file is located within the given directory.\"\"\"\n    filename = os.path.normcase(os.path.abspath(filename))\n    directory = os.path.normcase(os.path.abspath(directory))\n    return os.path.commonprefix([filename, directory]) == directory",
  "label": 1,
  "code_tokens": "def contained_in ( filename , directory ) : filename = os . path . normcase ( os . path . abspath ( filename ) ) directory = os . path . normcase ( os . path . abspath ( directory ) ) return os . path . commonprefix ( [ filename , directory ] ) == directory",
  "docstring_tokens": "Test if a file is located within the given directory ."
 },
 {
  "idx": "webquery-test-250",
  "doc": "check if file is present in directory python",
  "code": "def is_executable(path):\n  \"\"\"Returns whether a path names an existing executable file.\"\"\"\n  return os.path.isfile(path) and os.access(path, os.X_OK)",
  "label": 0,
  "code_tokens": "def is_executable ( path ) : return os . path . isfile ( path ) and os . access ( path , os . X_OK )",
  "docstring_tokens": "Returns whether a path names an existing executable file ."
 },
 {
  "idx": "webquery-test-251",
  "doc": "python code get and set methods to set values in file'",
  "code": "def set(self, mutagen_file, value):\n        \"\"\"Assign the value for the field using this style.\n        \"\"\"\n        self.store(mutagen_file, self.serialize(value))",
  "label": 0,
  "code_tokens": "def set ( self , mutagen_file , value ) : self . store ( mutagen_file , self . serialize ( value ) )",
  "docstring_tokens": "Assign the value for the field using this style ."
 },
 {
  "idx": "webquery-test-252",
  "doc": "python code get and set methods to set values in file'",
  "code": "def SaveDataToFD(self, raw_data, fd):\n    \"\"\"Merge the raw data with the config file and store it.\"\"\"\n    for key, value in iteritems(raw_data):\n      # TODO(hanuszczak): Incorrect type specification for `set`.\n      # pytype: disable=wrong-arg-types\n      self.set(\"\", key, value=value)\n      # pytype: enable=wrong-arg-types\n\n    self.write(fd)",
  "label": 1,
  "code_tokens": "def SaveDataToFD ( self , raw_data , fd ) : for key , value in iteritems ( raw_data ) : # TODO(hanuszczak): Incorrect type specification for `set`. # pytype: disable=wrong-arg-types self . set ( \"\" , key , value = value ) # pytype: enable=wrong-arg-types self . write ( fd )",
  "docstring_tokens": "Merge the raw data with the config file and store it ."
 },
 {
  "idx": "webquery-test-253",
  "doc": "how to write a string in a file python",
  "code": "def write_text(filename: str, text: str) -> None:\n    \"\"\"\n    Writes text to a file.\n    \"\"\"\n    with open(filename, 'w') as f:  # type: TextIO\n        print(text, file=f)",
  "label": 1,
  "code_tokens": "def write_text ( filename : str , text : str ) -> None : with open ( filename , 'w' ) as f : # type: TextIO print ( text , file = f )",
  "docstring_tokens": "Writes text to a file ."
 },
 {
  "idx": "webquery-test-254",
  "doc": "how to write a string in a file python",
  "code": "def write(file_name, data):\n    \"\"\"Encode and write a Hip file.\"\"\"\n    with open(file_name, 'w') as f:\n        f.write(encode(data))",
  "label": 1,
  "code_tokens": "def write ( file_name , data ) : with open ( file_name , 'w' ) as f : f . write ( encode ( data ) )",
  "docstring_tokens": "Encode and write a Hip file ."
 },
 {
  "idx": "webquery-test-255",
  "doc": "python split on any whitespace",
  "code": "def clean(s):\n  \"\"\"Removes trailing whitespace on each line.\"\"\"\n  lines = [l.rstrip() for l in s.split('\\n')]\n  return '\\n'.join(lines)",
  "label": 0,
  "code_tokens": "def clean ( s ) : lines = [ l . rstrip ( ) for l in s . split ( '\\n' ) ] return '\\n' . join ( lines )",
  "docstring_tokens": "Removes trailing whitespace on each line ."
 },
 {
  "idx": "webquery-test-256",
  "doc": "python split on any whitespace",
  "code": "def normalize_value(text):\n    \"\"\"\n    This removes newlines and multiple spaces from a string.\n    \"\"\"\n    result = text.replace('\\n', ' ')\n    result = re.subn('[ ]{2,}', ' ', result)[0]\n    return result",
  "label": 0,
  "code_tokens": "def normalize_value ( text ) : result = text . replace ( '\\n' , ' ' ) result = re . subn ( '[ ]{2,}' , ' ' , result ) [ 0 ] return result",
  "docstring_tokens": "This removes newlines and multiple spaces from a string ."
 },
 {
  "idx": "webquery-test-257",
  "doc": "python program to login using the password sent through mail",
  "code": "def send_password_reset_link(self, username):\n        \"\"\"Sends the user a password reset link (by email)\n\n        Args:\n            username: The account username.\n\n        Returns:\n            True: Succeeded\n            False: If unsuccessful\n        \"\"\"\n\n        response = self._post(self.rest_url + \"/user/mail/password\",\n                              params={\"username\": username})\n\n        if response.ok:\n            return True\n\n        return False",
  "label": 1,
  "code_tokens": "def send_password_reset_link ( self , username ) : response = self . _post ( self . rest_url + \"/user/mail/password\" , params = { \"username\" : username } ) if response . ok : return True return False",
  "docstring_tokens": "Sends the user a password reset link ( by email )"
 },
 {
  "idx": "webquery-test-258",
  "doc": "python program to login using the password sent through mail",
  "code": "def authenticate(self, username=\"\", password=\"\", **kwargs):\n        \"\"\"Allow users to log in with their email address.\"\"\"\n        try:\n            user = get_user_model().objects.filter(email__iexact=username)[0]\n            if check_password(password, user.password):\n                return user\n            else:\n                return None\n        except IndexError:\n            # No user was found, return None - triggers default login failed\n            return None",
  "label": 1,
  "code_tokens": "def authenticate ( self , username = \"\" , password = \"\" , * * kwargs ) : try : user = get_user_model ( ) . objects . filter ( email__iexact = username ) [ 0 ] if check_password ( password , user . password ) : return user else : return None except IndexError : # No user was found, return None - triggers default login failed return None",
  "docstring_tokens": "Allow users to log in with their email address ."
 },
 {
  "idx": "webquery-test-259",
  "doc": "change letter into number in python",
  "code": "def safe_int_conv(number):\n    \"\"\"Safely convert a single number to integer.\"\"\"\n    try:\n        return int(np.array(number).astype(int, casting='safe'))\n    except TypeError:\n        raise ValueError('cannot safely convert {} to integer'.format(number))",
  "label": 0,
  "code_tokens": "def safe_int_conv ( number ) : try : return int ( np . array ( number ) . astype ( int , casting = 'safe' ) ) except TypeError : raise ValueError ( 'cannot safely convert {} to integer' . format ( number ) )",
  "docstring_tokens": "Safely convert a single number to integer ."
 },
 {
  "idx": "webquery-test-260",
  "doc": "change letter into number in python",
  "code": "def round_to_int(number, precision):\n    \"\"\"Round a number to a precision\"\"\"\n    precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded",
  "label": 0,
  "code_tokens": "def round_to_int ( number , precision ) : precision = int ( precision ) rounded = ( int ( number ) + precision / 2 ) // precision * precision return rounded",
  "docstring_tokens": "Round a number to a precision"
 },
 {
  "idx": "webquery-test-261",
  "doc": "python modify certain elements in list",
  "code": "def unique_element(ll):\n    \"\"\" returns unique elements from a list preserving the original order \"\"\"\n    seen = {}\n    result = []\n    for item in ll:\n        if item in seen:\n            continue\n        seen[item] = 1\n        result.append(item)\n    return result",
  "label": 1,
  "code_tokens": "def unique_element ( ll ) : seen = { } result = [ ] for item in ll : if item in seen : continue seen [ item ] = 1 result . append ( item ) return result",
  "docstring_tokens": "returns unique elements from a list preserving the original order"
 },
 {
  "idx": "webquery-test-262",
  "doc": "python modify certain elements in list",
  "code": "def unique(input_list):\n    \"\"\"\n    Return a list of unique items (similar to set functionality).\n\n    Parameters\n    ----------\n    input_list : list\n        A list containg some items that can occur more than once.\n\n    Returns\n    -------\n    list\n        A list with only unique occurances of an item.\n\n    \"\"\"\n    output = []\n    for item in input_list:\n        if item not in output:\n            output.append(item)\n    return output",
  "label": 1,
  "code_tokens": "def unique ( input_list ) : output = [ ] for item in input_list : if item not in output : output . append ( item ) return output",
  "docstring_tokens": "Return a list of unique items ( similar to set functionality ) ."
 },
 {
  "idx": "webquery-test-263",
  "doc": "validation for numbers in python",
  "code": "def normalize_unitnumber(unit_number):\n    \"\"\"Returns a normalized unit number, i.e. integers\n    Raises exception X10InvalidUnitNumber if unit number appears to be invalid\n    \"\"\"\n    try:\n        try:\n            unit_number = int(unit_number)\n        except ValueError:\n            raise X10InvalidUnitNumber('%r not a valid unit number' % unit_number)\n    except TypeError:\n        raise X10InvalidUnitNumber('%r not a valid unit number' % unit_number)\n    if not (1 <= unit_number <= 16):\n        raise X10InvalidUnitNumber('%r not a valid unit number' % unit_number)\n    return unit_number",
  "label": 1,
  "code_tokens": "def normalize_unitnumber ( unit_number ) : try : try : unit_number = int ( unit_number ) except ValueError : raise X10InvalidUnitNumber ( '%r not a valid unit number' % unit_number ) except TypeError : raise X10InvalidUnitNumber ( '%r not a valid unit number' % unit_number ) if not ( 1 <= unit_number <= 16 ) : raise X10InvalidUnitNumber ( '%r not a valid unit number' % unit_number ) return unit_number",
  "docstring_tokens": "Returns a normalized unit number i . e . integers Raises exception X10InvalidUnitNumber if unit number appears to be invalid"
 },
 {
  "idx": "webquery-test-264",
  "doc": "validation for numbers in python",
  "code": "def is_valid(number):\n    \"\"\"determines whether the card number is valid.\"\"\"\n    n = str(number)\n    if not n.isdigit():\n        return False\n    return int(n[-1]) == get_check_digit(n[:-1])",
  "label": 1,
  "code_tokens": "def is_valid ( number ) : n = str ( number ) if not n . isdigit ( ) : return False return int ( n [ - 1 ] ) == get_check_digit ( n [ : - 1 ] )",
  "docstring_tokens": "determines whether the card number is valid ."
 },
 {
  "idx": "webquery-test-265",
  "doc": "python opencv how to change black and white in binary image",
  "code": "def gray2bgr(img):\n    \"\"\"Convert a grayscale image to BGR image.\n\n    Args:\n        img (ndarray or str): The input image.\n\n    Returns:\n        ndarray: The converted BGR image.\n    \"\"\"\n    img = img[..., None] if img.ndim == 2 else img\n    out_img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\n    return out_img",
  "label": 0,
  "code_tokens": "def gray2bgr ( img ) : img = img [ ... , None ] if img . ndim == 2 else img out_img = cv2 . cvtColor ( img , cv2 . COLOR_GRAY2BGR ) return out_img",
  "docstring_tokens": "Convert a grayscale image to BGR image ."
 },
 {
  "idx": "webquery-test-266",
  "doc": "python opencv how to change black and white in binary image",
  "code": "def lighting(im, b, c):\n    \"\"\" Adjust image balance and contrast \"\"\"\n    if b==0 and c==1: return im\n    mu = np.average(im)\n    return np.clip((im-mu)*c+mu+b,0.,1.).astype(np.float32)",
  "label": 0,
  "code_tokens": "def lighting ( im , b , c ) : if b == 0 and c == 1 : return im mu = np . average ( im ) return np . clip ( ( im - mu ) * c + mu + b , 0. , 1. ) . astype ( np . float32 )",
  "docstring_tokens": "Adjust image balance and contrast"
 },
 {
  "idx": "webquery-test-267",
  "doc": "python test if variable is not null",
  "code": "def get(self):\n        \"\"\"\n        \"\"\"\n\n        if self.saved_list is None and self.null is False:\n            self.saved_list = []\n\n        return self.saved_list",
  "label": 1,
  "code_tokens": "def get ( self ) : if self . saved_list is None and self . null is False : self . saved_list = [ ] return self . saved_list",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-268",
  "doc": "python test if variable is not null",
  "code": "def is_all_field_none(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n\n        if self._type_ is not None:\n            return False\n\n        if self._value is not None:\n            return False\n\n        if self._name is not None:\n            return False\n\n        return True",
  "label": 1,
  "code_tokens": "def is_all_field_none ( self ) : if self . _type_ is not None : return False if self . _value is not None : return False if self . _name is not None : return False return True",
  "docstring_tokens": ": rtype : bool"
 },
 {
  "idx": "webquery-test-269",
  "doc": "bokeh python showing legend",
  "code": "def finish_plot():\n    \"\"\"Helper for plotting.\"\"\"\n    plt.legend()\n    plt.grid(color='0.7')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()",
  "label": 1,
  "code_tokens": "def finish_plot ( ) : plt . legend ( ) plt . grid ( color = '0.7' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ( )",
  "docstring_tokens": "Helper for plotting ."
 },
 {
  "idx": "webquery-test-270",
  "doc": "bokeh python showing legend",
  "code": "def show(self, title=''):\n        \"\"\"\n        Display Bloch sphere and corresponding data sets.\n        \"\"\"\n        self.render(title=title)\n        if self.fig:\n            plt.show(self.fig)",
  "label": 1,
  "code_tokens": "def show ( self , title = '' ) : self . render ( title = title ) if self . fig : plt . show ( self . fig )",
  "docstring_tokens": "Display Bloch sphere and corresponding data sets ."
 },
 {
  "idx": "webquery-test-271",
  "doc": "how to append text in python text box",
  "code": "def _new_output_char(self, char):\n        \"\"\" insert in text field \"\"\"\n        self.text.config(state=tkinter.NORMAL)\n        self.text.insert(\"end\", char)\n        self.text.see(\"end\")\n        self.text.config(state=tkinter.DISABLED)",
  "label": 1,
  "code_tokens": "def _new_output_char ( self , char ) : self . text . config ( state = tkinter . NORMAL ) self . text . insert ( \"end\" , char ) self . text . see ( \"end\" ) self . text . config ( state = tkinter . DISABLED )",
  "docstring_tokens": "insert in text field"
 },
 {
  "idx": "webquery-test-272",
  "doc": "how to append text in python text box",
  "code": "def set_value(self, text):\n        \"\"\"Sets the text content.\n\n        Args:\n            text (str): The string content that have to be appended as standard child identified by the key 'text'\n        \"\"\"\n        if self.single_line:\n            text = text.replace('\\n', '')\n        self.set_text(text)",
  "label": 1,
  "code_tokens": "def set_value ( self , text ) : if self . single_line : text = text . replace ( '\\n' , '' ) self . set_text ( text )",
  "docstring_tokens": "Sets the text content ."
 },
 {
  "idx": "webquery-test-273",
  "doc": "python write to file ascii",
  "code": "def writeFile(filename, data):\n\t\t\"\"\"\n\t\tWrites data to a file\n\t\t\"\"\"\n\t\twith open(filename, 'wb') as f:\n\t\t\tf.write(data.encode('utf-8'))",
  "label": 1,
  "code_tokens": "def writeFile ( filename , data ) : with open ( filename , 'wb' ) as f : f . write ( data . encode ( 'utf-8' ) )",
  "docstring_tokens": "Writes data to a file"
 },
 {
  "idx": "webquery-test-274",
  "doc": "python write to file ascii",
  "code": "def items2file(items, filename, encoding='utf-8', modifier='w'):\n    \"\"\"\n        json array to file, canonical json format\n    \"\"\"\n    with codecs.open(filename, modifier, encoding=encoding) as f:\n        for item in items:\n            f.write(u\"{}\\n\".format(json.dumps(\n                item, ensure_ascii=False, sort_keys=True)))",
  "label": 0,
  "code_tokens": "def items2file ( items , filename , encoding = 'utf-8' , modifier = 'w' ) : with codecs . open ( filename , modifier , encoding = encoding ) as f : for item in items : f . write ( u\"{}\\n\" . format ( json . dumps ( item , ensure_ascii = False , sort_keys = True ) ) )",
  "docstring_tokens": "json array to file canonical json format"
 },
 {
  "idx": "webquery-test-275",
  "doc": "how to remove /n in the end of string in python",
  "code": "def replaceNewlines(string, newlineChar):\n\t\"\"\"There's probably a way to do this with string functions but I was lazy.\n\t\tReplace all instances of \\r or \\n in a string with something else.\"\"\"\n\tif newlineChar in string:\n\t\tsegments = string.split(newlineChar)\n\t\tstring = \"\"\n\t\tfor segment in segments:\n\t\t\tstring += segment\n\treturn string",
  "label": 1,
  "code_tokens": "def replaceNewlines ( string , newlineChar ) : if newlineChar in string : segments = string . split ( newlineChar ) string = \"\" for segment in segments : string += segment return string",
  "docstring_tokens": "There s probably a way to do this with string functions but I was lazy . Replace all instances of \\ r or \\ n in a string with something else ."
 },
 {
  "idx": "webquery-test-276",
  "doc": "how to remove /n in the end of string in python",
  "code": "def normalize_value(text):\n    \"\"\"\n    This removes newlines and multiple spaces from a string.\n    \"\"\"\n    result = text.replace('\\n', ' ')\n    result = re.subn('[ ]{2,}', ' ', result)[0]\n    return result",
  "label": 1,
  "code_tokens": "def normalize_value ( text ) : result = text . replace ( '\\n' , ' ' ) result = re . subn ( '[ ]{2,}' , ' ' , result ) [ 0 ] return result",
  "docstring_tokens": "This removes newlines and multiple spaces from a string ."
 },
 {
  "idx": "webquery-test-277",
  "doc": "how to keep 4 digit python",
  "code": "def py3round(number):\n    \"\"\"Unified rounding in all python versions.\"\"\"\n    if abs(round(number) - number) == 0.5:\n        return int(2.0 * round(number / 2.0))\n\n    return int(round(number))",
  "label": 0,
  "code_tokens": "def py3round ( number ) : if abs ( round ( number ) - number ) == 0.5 : return int ( 2.0 * round ( number / 2.0 ) ) return int ( round ( number ) )",
  "docstring_tokens": "Unified rounding in all python versions ."
 },
 {
  "idx": "webquery-test-278",
  "doc": "how to keep 4 digit python",
  "code": "def round_to_x_digits(number, digits):\n    \"\"\"\n    Returns 'number' rounded to 'digits' digits.\n    \"\"\"\n    return round(number * math.pow(10, digits)) / math.pow(10, digits)",
  "label": 0,
  "code_tokens": "def round_to_x_digits ( number , digits ) : return round ( number * math . pow ( 10 , digits ) ) / math . pow ( 10 , digits )",
  "docstring_tokens": "Returns number rounded to digits digits ."
 },
 {
  "idx": "webquery-test-279",
  "doc": "how to get alist as input in python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 1,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-280",
  "doc": "how to get alist as input in python",
  "code": "def _import_string(names):\n    \"\"\"return a list of (name, asname) formatted as a string\"\"\"\n    _names = []\n    for name, asname in names:\n        if asname is not None:\n            _names.append(\"%s as %s\" % (name, asname))\n        else:\n            _names.append(name)\n    return \", \".join(_names)",
  "label": 0,
  "code_tokens": "def _import_string ( names ) : _names = [ ] for name , asname in names : if asname is not None : _names . append ( \"%s as %s\" % ( name , asname ) ) else : _names . append ( name ) return \", \" . join ( _names )",
  "docstring_tokens": "return a list of ( name asname ) formatted as a string"
 },
 {
  "idx": "webquery-test-281",
  "doc": "load gif images in python",
  "code": "def ReadTif(tifFile):\n        \"\"\"Reads a tif file to a 2D NumPy array\"\"\"\n        img = Image.open(tifFile)\n        img = np.array(img)\n        return img",
  "label": 1,
  "code_tokens": "def ReadTif ( tifFile ) : img = Image . open ( tifFile ) img = np . array ( img ) return img",
  "docstring_tokens": "Reads a tif file to a 2D NumPy array"
 },
 {
  "idx": "webquery-test-282",
  "doc": "load gif images in python",
  "code": "def load_file(self, input_file):\n        \"\"\" Loads data array from file (result of this converter)\n\n        Tries to import, load and replace files' data.\n        It will overwirte previously added items with #add_file or #load_file.\n\n        :param input_file\n        :type str or unicode\n        \"\"\"\n        pyimg = imp.load_source('image2py_taf', input_file)\n        self.files = pyimg.data\n        self.set_template(templates.templateByName(pyimg.template))",
  "label": 1,
  "code_tokens": "def load_file ( self , input_file ) : pyimg = imp . load_source ( 'image2py_taf' , input_file ) self . files = pyimg . data self . set_template ( templates . templateByName ( pyimg . template ) )",
  "docstring_tokens": "Loads data array from file ( result of this converter )"
 },
 {
  "idx": "webquery-test-283",
  "doc": "python multiprocessing to increase cpu usage",
  "code": "def _timed_process(self, *args, **kwargs):\n        \"\"\"Track Processor execution time for benchmarking.\"\"\"\n        for processor in self._processors:\n            start_time = _time.process_time()\n            processor.process(*args, **kwargs)\n            process_time = int(round((_time.process_time() - start_time) * 1000, 2))\n            self.process_times[processor.__class__.__name__] = process_time",
  "label": 1,
  "code_tokens": "def _timed_process ( self , * args , * * kwargs ) : for processor in self . _processors : start_time = _time . process_time ( ) processor . process ( * args , * * kwargs ) process_time = int ( round ( ( _time . process_time ( ) - start_time ) * 1000 , 2 ) ) self . process_times [ processor . __class__ . __name__ ] = process_time",
  "docstring_tokens": "Track Processor execution time for benchmarking ."
 },
 {
  "idx": "webquery-test-284",
  "doc": "python multiprocessing to increase cpu usage",
  "code": "def get_memory_usage():\n    \"\"\"Gets RAM memory usage\n\n    :return: MB of memory used by this process\n    \"\"\"\n    process = psutil.Process(os.getpid())\n    mem = process.memory_info().rss\n    return mem / (1024 * 1024)",
  "label": 0,
  "code_tokens": "def get_memory_usage ( ) : process = psutil . Process ( os . getpid ( ) ) mem = process . memory_info ( ) . rss return mem / ( 1024 * 1024 )",
  "docstring_tokens": "Gets RAM memory usage"
 },
 {
  "idx": "webquery-test-285",
  "doc": "save image in a path in python",
  "code": "def relative_path(path):\n    \"\"\"\n    Return the given path relative to this file.\n    \"\"\"\n    return os.path.join(os.path.dirname(__file__), path)",
  "label": 0,
  "code_tokens": "def relative_path ( path ) : return os . path . join ( os . path . dirname ( __file__ ) , path )",
  "docstring_tokens": "Return the given path relative to this file ."
 },
 {
  "idx": "webquery-test-286",
  "doc": "save image in a path in python",
  "code": "def get_cache_path(filename):\n\t\"\"\" get file path \"\"\"\n\tcwd = os.path.dirname(os.path.realpath(__file__))\n\treturn os.path.join(cwd, filename)",
  "label": 0,
  "code_tokens": "def get_cache_path ( filename ) : cwd = os . path . dirname ( os . path . realpath ( __file__ ) ) return os . path . join ( cwd , filename )",
  "docstring_tokens": "get file path"
 },
 {
  "idx": "webquery-test-287",
  "doc": "make deep copy of list python",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 1,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-288",
  "doc": "make deep copy of list python",
  "code": "def copy(self):\n        \"\"\"Return a copy of this list with each element copied to new memory\n        \"\"\"\n        out = type(self)()\n        for series in self:\n            out.append(series.copy())\n        return out",
  "label": 1,
  "code_tokens": "def copy ( self ) : out = type ( self ) ( ) for series in self : out . append ( series . copy ( ) ) return out",
  "docstring_tokens": "Return a copy of this list with each element copied to new memory"
 },
 {
  "idx": "webquery-test-289",
  "doc": "python split two delimiter",
  "code": "def make_regex(separator):\n    \"\"\"Utility function to create regexp for matching escaped separators\n    in strings.\n\n    \"\"\"\n    return re.compile(r'(?:' + re.escape(separator) + r')?((?:[^' +\n                      re.escape(separator) + r'\\\\]|\\\\.)+)')",
  "label": 1,
  "code_tokens": "def make_regex ( separator ) : return re . compile ( r'(?:' + re . escape ( separator ) + r')?((?:[^' + re . escape ( separator ) + r'\\\\]|\\\\.)+)' )",
  "docstring_tokens": "Utility function to create regexp for matching escaped separators in strings ."
 },
 {
  "idx": "webquery-test-290",
  "doc": "python split two delimiter",
  "code": "def parse_prefix(identifier):\n    \"\"\"\n    Parse identifier such as a|c|le|d|li|re|or|AT4G00480.1 and return\n    tuple of prefix string (separated at '|') and suffix (AGI identifier)\n    \"\"\"\n    pf, id = (), identifier\n    if \"|\" in identifier:\n        pf, id = tuple(identifier.split('|')[:-1]), identifier.split('|')[-1]\n\n    return pf, id",
  "label": 0,
  "code_tokens": "def parse_prefix ( identifier ) : pf , id = ( ) , identifier if \"|\" in identifier : pf , id = tuple ( identifier . split ( '|' ) [ : - 1 ] ) , identifier . split ( '|' ) [ - 1 ] return pf , id",
  "docstring_tokens": "Parse identifier such as a|c|le|d|li|re|or|AT4G00480 . 1 and return tuple of prefix string ( separated at | ) and suffix ( AGI identifier )"
 },
 {
  "idx": "webquery-test-291",
  "doc": "finding the index of an element in a list python",
  "code": "def binSearch(arr, val):\n  \"\"\" \n  Function for running binary search on a sorted list.\n\n  :param arr: (list) a sorted list of integers to search\n  :param val: (int)  a integer to search for in the sorted array\n  :returns: (int) the index of the element if it is found and -1 otherwise.\n  \"\"\"\n  i = bisect_left(arr, val)\n  if i != len(arr) and arr[i] == val:\n    return i\n  return -1",
  "label": 1,
  "code_tokens": "def binSearch ( arr , val ) : i = bisect_left ( arr , val ) if i != len ( arr ) and arr [ i ] == val : return i return - 1",
  "docstring_tokens": "Function for running binary search on a sorted list ."
 },
 {
  "idx": "webquery-test-292",
  "doc": "finding the index of an element in a list python",
  "code": "def find_geom(geom, geoms):\n    \"\"\"\n    Returns the index of a geometry in a list of geometries avoiding\n    expensive equality checks of `in` operator.\n    \"\"\"\n    for i, g in enumerate(geoms):\n        if g is geom:\n            return i",
  "label": 1,
  "code_tokens": "def find_geom ( geom , geoms ) : for i , g in enumerate ( geoms ) : if g is geom : return i",
  "docstring_tokens": "Returns the index of a geometry in a list of geometries avoiding expensive equality checks of in operator ."
 },
 {
  "idx": "webquery-test-293",
  "doc": "python dont break line",
  "code": "def scroll_down(lines=1, file=sys.stdout):\n    \"\"\" Scroll the whole page down a number of lines, new lines are added to\n        the top.\n\n        Esc[<lines>T\n    \"\"\"\n    scroll.down(lines).write(file=file)",
  "label": 0,
  "code_tokens": "def scroll_down ( lines = 1 , file = sys . stdout ) : scroll . down ( lines ) . write ( file = file )",
  "docstring_tokens": "Scroll the whole page down a number of lines new lines are added to the top ."
 },
 {
  "idx": "webquery-test-294",
  "doc": "python dont break line",
  "code": "def normalize_multiline(line):\n    \"\"\"Normalize multiline-related code that will cause syntax error.\n\n    This is for purposes of checking syntax.\n\n    \"\"\"\n    if line.startswith('def ') and line.rstrip().endswith(':'):\n        return line + ' pass'\n    elif line.startswith('return '):\n        return 'def _(): ' + line\n    elif line.startswith('@'):\n        return line + 'def _(): pass'\n    elif line.startswith('class '):\n        return line + ' pass'\n    elif line.startswith(('if ', 'elif ', 'for ', 'while ')):\n        return line + ' pass'\n    else:\n        return line",
  "label": 1,
  "code_tokens": "def normalize_multiline ( line ) : if line . startswith ( 'def ' ) and line . rstrip ( ) . endswith ( ':' ) : return line + ' pass' elif line . startswith ( 'return ' ) : return 'def _(): ' + line elif line . startswith ( '@' ) : return line + 'def _(): pass' elif line . startswith ( 'class ' ) : return line + ' pass' elif line . startswith ( ( 'if ' , 'elif ' , 'for ' , 'while ' ) ) : return line + ' pass' else : return line",
  "docstring_tokens": "Normalize multiline - related code that will cause syntax error ."
 },
 {
  "idx": "webquery-test-295",
  "doc": "how to check time stamp of file python",
  "code": "def get_time(filename):\r\n\t\"\"\"\r\n\tGet the modified time for a file as a datetime instance\r\n\t\"\"\"\r\n\tts = os.stat(filename).st_mtime\r\n\treturn datetime.datetime.utcfromtimestamp(ts)",
  "label": 1,
  "code_tokens": "def get_time ( filename ) : ts = os . stat ( filename ) . st_mtime return datetime . datetime . utcfromtimestamp ( ts )",
  "docstring_tokens": "Get the modified time for a file as a datetime instance"
 },
 {
  "idx": "webquery-test-296",
  "doc": "how to check time stamp of file python",
  "code": "def set_time(filename, mod_time):\n\t\"\"\"\n\tSet the modified time of a file\n\t\"\"\"\n\tlog.debug('Setting modified time to %s', mod_time)\n\tmtime = calendar.timegm(mod_time.utctimetuple())\n\t# utctimetuple discards microseconds, so restore it (for consistency)\n\tmtime += mod_time.microsecond / 1000000\n\tatime = os.stat(filename).st_atime\n\tos.utime(filename, (atime, mtime))",
  "label": 1,
  "code_tokens": "def set_time ( filename , mod_time ) : log . debug ( 'Setting modified time to %s' , mod_time ) mtime = calendar . timegm ( mod_time . utctimetuple ( ) ) # utctimetuple discards microseconds, so restore it (for consistency)\r mtime += mod_time . microsecond / 1000000 atime = os . stat ( filename ) . st_atime os . utime ( filename , ( atime , mtime ) )",
  "docstring_tokens": "Set the modified time of a file"
 },
 {
  "idx": "webquery-test-297",
  "doc": "python fromfile size limit",
  "code": "def check_max_filesize(chosen_file, max_size):\n    \"\"\"\n    Checks file sizes for host\n    \"\"\"\n    if os.path.getsize(chosen_file) > max_size:\n        return False\n    else:\n        return True",
  "label": 1,
  "code_tokens": "def check_max_filesize ( chosen_file , max_size ) : if os . path . getsize ( chosen_file ) > max_size : return False else : return True",
  "docstring_tokens": "Checks file sizes for host"
 },
 {
  "idx": "webquery-test-298",
  "doc": "python fromfile size limit",
  "code": "def _increase_file_handle_limit():\n    \"\"\"Raise the open file handles permitted by the Dusty daemon process\n    and its child processes. The number we choose here needs to be within\n    the OS X default kernel hard limit, which is 10240.\"\"\"\n    logging.info('Increasing file handle limit to {}'.format(constants.FILE_HANDLE_LIMIT))\n    resource.setrlimit(resource.RLIMIT_NOFILE,\n                       (constants.FILE_HANDLE_LIMIT, resource.RLIM_INFINITY))",
  "label": 0,
  "code_tokens": "def _increase_file_handle_limit ( ) : logging . info ( 'Increasing file handle limit to {}' . format ( constants . FILE_HANDLE_LIMIT ) ) resource . setrlimit ( resource . RLIMIT_NOFILE , ( constants . FILE_HANDLE_LIMIT , resource . RLIM_INFINITY ) )",
  "docstring_tokens": "Raise the open file handles permitted by the Dusty daemon process and its child processes . The number we choose here needs to be within the OS X default kernel hard limit which is 10240 ."
 },
 {
  "idx": "webquery-test-299",
  "doc": "python does slicing return a new list",
  "code": "def Slice(a, begin, size):\n    \"\"\"\n    Slicing op.\n    \"\"\"\n    return np.copy(a)[[slice(*tpl) for tpl in zip(begin, begin+size)]],",
  "label": 1,
  "code_tokens": "def Slice ( a , begin , size ) : return np . copy ( a ) [ [ slice ( * tpl ) for tpl in zip ( begin , begin + size ) ] ] ,",
  "docstring_tokens": "Slicing op ."
 },
 {
  "idx": "webquery-test-300",
  "doc": "python does slicing return a new list",
  "code": "def sliced(seq, n):\n    \"\"\"Yield slices of length *n* from the sequence *seq*.\n\n        >>> list(sliced((1, 2, 3, 4, 5, 6), 3))\n        [(1, 2, 3), (4, 5, 6)]\n\n    If the length of the sequence is not divisible by the requested slice\n    length, the last slice will be shorter.\n\n        >>> list(sliced((1, 2, 3, 4, 5, 6, 7, 8), 3))\n        [(1, 2, 3), (4, 5, 6), (7, 8)]\n\n    This function will only work for iterables that support slicing.\n    For non-sliceable iterables, see :func:`chunked`.\n\n    \"\"\"\n    return takewhile(bool, (seq[i: i + n] for i in count(0, n)))",
  "label": 1,
  "code_tokens": "def sliced ( seq , n ) : return takewhile ( bool , ( seq [ i : i + n ] for i in count ( 0 , n ) ) )",
  "docstring_tokens": "Yield slices of length * n * from the sequence * seq * ."
 },
 {
  "idx": "webquery-test-301",
  "doc": "how to set number boundaries in python",
  "code": "def _numbers_units(N):\n    \"\"\"\n    >>> _numbers_units(45)\n    '123456789012345678901234567890123456789012345'\n    \"\"\"\n    lst = range(1, N + 1)\n    return \"\".join(list(map(lambda i: str(i % 10), lst)))",
  "label": 1,
  "code_tokens": "def _numbers_units ( N ) : lst = range ( 1 , N + 1 ) return \"\" . join ( list ( map ( lambda i : str ( i % 10 ) , lst ) ) )",
  "docstring_tokens": ">>> _numbers_units ( 45 ) 123456789012345678901234567890123456789012345"
 },
 {
  "idx": "webquery-test-302",
  "doc": "how to set number boundaries in python",
  "code": "def pp(i, base=1024):\n    \"\"\"\n    Pretty-print the integer `i` as a human-readable size representation.\n    \"\"\"\n    degree = 0\n    pattern = \"%4d     %s\"\n    while i > base:\n        pattern = \"%7.2f %s\"\n        i = i / float(base)\n        degree += 1\n    scales = ['B', 'KB', 'MB', 'GB', 'TB', 'EB']\n    return pattern % (i, scales[degree])",
  "label": 1,
  "code_tokens": "def pp ( i , base = 1024 ) : degree = 0 pattern = \"%4d     %s\" while i > base : pattern = \"%7.2f %s\" i = i / float ( base ) degree += 1 scales = [ 'B' , 'KB' , 'MB' , 'GB' , 'TB' , 'EB' ] return pattern % ( i , scales [ degree ] )",
  "docstring_tokens": "Pretty - print the integer i as a human - readable size representation ."
 },
 {
  "idx": "webquery-test-303",
  "doc": "python subtract array from each row",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 1,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-304",
  "doc": "python subtract array from each row",
  "code": "def recarray(self):\n        \"\"\"Returns data as :class:`numpy.recarray`.\"\"\"\n        return numpy.rec.fromrecords(self.records, names=self.names)",
  "label": 1,
  "code_tokens": "def recarray ( self ) : return numpy . rec . fromrecords ( self . records , names = self . names )",
  "docstring_tokens": "Returns data as : class : numpy . recarray ."
 },
 {
  "idx": "webquery-test-305",
  "doc": "how to match letter in list python",
  "code": "def isin(elems, line):\n    \"\"\"Check if an element from a list is in a string.\n\n    :type elems: list\n    :type line: str\n\n    \"\"\"\n    found = False\n    for e in elems:\n        if e in line.lower():\n            found = True\n            break\n    return found",
  "label": 1,
  "code_tokens": "def isin ( elems , line ) : found = False for e in elems : if e in line . lower ( ) : found = True break return found",
  "docstring_tokens": "Check if an element from a list is in a string ."
 },
 {
  "idx": "webquery-test-306",
  "doc": "how to match letter in list python",
  "code": "def match_all_in(self, matches, item):\n        \"\"\"Matches all matches to elements of item.\"\"\"\n        for i, match in enumerate(matches):\n            self.match(match, item + \"[\" + str(i) + \"]\")",
  "label": 1,
  "code_tokens": "def match_all_in ( self , matches , item ) : for i , match in enumerate ( matches ) : self . match ( match , item + \"[\" + str ( i ) + \"]\" )",
  "docstring_tokens": "Matches all matches to elements of item ."
 },
 {
  "idx": "webquery-test-307",
  "doc": "python string check if char is letter",
  "code": "def isthaichar(ch: str) -> bool:\n    \"\"\"\n    Check if a character is Thai\n    \u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e31\u0e01\u0e29\u0e23\u0e44\u0e17\u0e22\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48\n\n    :param str ch: input character\n    :return: True or False\n    \"\"\"\n    ch_val = ord(ch)\n    if ch_val >= 3584 and ch_val <= 3711:\n        return True\n    return False",
  "label": 1,
  "code_tokens": "def isthaichar ( ch : str ) -> bool : ch_val = ord ( ch ) if ch_val >= 3584 and ch_val <= 3711 : return True return False",
  "docstring_tokens": "Check if a character is Thai \u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e31\u0e01\u0e29\u0e23\u0e44\u0e17\u0e22\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48"
 },
 {
  "idx": "webquery-test-308",
  "doc": "python string check if char is letter",
  "code": "def isAlphanum(c):\n    \"\"\"return true if the character is a letter, digit, underscore,\n           dollar sign, or non-ASCII character.\n    \"\"\"\n    return ((c >= 'a' and c <= 'z') or (c >= '0' and c <= '9') or\n            (c >= 'A' and c <= 'Z') or c == '_' or c == '$' or c == '\\\\' or (c is not None and ord(c) > 126));",
  "label": 1,
  "code_tokens": "def isAlphanum ( c ) : return ( ( c >= 'a' and c <= 'z' ) or ( c >= '0' and c <= '9' ) or ( c >= 'A' and c <= 'Z' ) or c == '_' or c == '$' or c == '\\\\' or ( c is not None and ord ( c ) > 126 ) )",
  "docstring_tokens": "return true if the character is a letter digit underscore dollar sign or non - ASCII character ."
 },
 {
  "idx": "webquery-test-309",
  "doc": "write a dict to a file in python",
  "code": "def _write_json(file, contents):\n    \"\"\"Write a dict to a JSON file.\"\"\"\n    with open(file, 'w') as f:\n        return json.dump(contents, f, indent=2, sort_keys=True)",
  "label": 1,
  "code_tokens": "def _write_json ( file , contents ) : with open ( file , 'w' ) as f : return json . dump ( contents , f , indent = 2 , sort_keys = True )",
  "docstring_tokens": "Write a dict to a JSON file ."
 },
 {
  "idx": "webquery-test-310",
  "doc": "write a dict to a file in python",
  "code": "def dump_dict_to_file(dictionary, filepath):\n    \"\"\"Dump @dictionary as a line to @filepath.\"\"\"\n    create_dirs(\n        os.path.dirname(filepath)\n    )\n\n    with open(filepath, 'a') as outfile:\n        json.dump(dictionary, outfile)\n        outfile.write('\\n')",
  "label": 1,
  "code_tokens": "def dump_dict_to_file ( dictionary , filepath ) : create_dirs ( os . path . dirname ( filepath ) ) with open ( filepath , 'a' ) as outfile : json . dump ( dictionary , outfile ) outfile . write ( '\\n' )",
  "docstring_tokens": "Dump"
 },
 {
  "idx": "webquery-test-311",
  "doc": "how to put comma in number then right alignment in python",
  "code": "def add_colons(s):\n    \"\"\"Add colons after every second digit.\n\n    This function is used in functions to prettify serials.\n\n    >>> add_colons('teststring')\n    'te:st:st:ri:ng'\n    \"\"\"\n    return ':'.join([s[i:i + 2] for i in range(0, len(s), 2)])",
  "label": 0,
  "code_tokens": "def add_colons ( s ) : return ':' . join ( [ s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ] )",
  "docstring_tokens": "Add colons after every second digit ."
 },
 {
  "idx": "webquery-test-312",
  "doc": "how to put comma in number then right alignment in python",
  "code": "def draw_header(self, stream, header):\n        \"\"\"Draw header with underline\"\"\"\n        stream.writeln('=' * (len(header) + 4))\n        stream.writeln('| ' + header + ' |')\n        stream.writeln('=' * (len(header) + 4))\n        stream.writeln()",
  "label": 0,
  "code_tokens": "def draw_header ( self , stream , header ) : stream . writeln ( '=' * ( len ( header ) + 4 ) ) stream . writeln ( '| ' + header + ' |' ) stream . writeln ( '=' * ( len ( header ) + 4 ) ) stream . writeln ( )",
  "docstring_tokens": "Draw header with underline"
 },
 {
  "idx": "webquery-test-313",
  "doc": "python urllib how to save image use",
  "code": "def url_to_image(url):\n    \"\"\"\n    Fetch an image from url and convert it into a Pillow Image object\n    \"\"\"\n    r = requests.get(url)\n    image = StringIO(r.content)\n    return image",
  "label": 0,
  "code_tokens": "def url_to_image ( url ) : r = requests . get ( url ) image = StringIO ( r . content ) return image",
  "docstring_tokens": "Fetch an image from url and convert it into a Pillow Image object"
 },
 {
  "idx": "webquery-test-314",
  "doc": "python urllib how to save image use",
  "code": "def downloadImg(url, tofile=None):\n    \"\"\"\n    \"\"\"\n    r = urllib2.Request(url)\n    img_data = urllib2.urlopen(r).read()\n    img_buffer = StringIO.StringIO(img_data)\n    img = Image.open(img_buffer)\n    if FILE.make and tofile is not None:\n        img.save(FILE.dir + tofile)\n    return img",
  "label": 1,
  "code_tokens": "def downloadImg ( url , tofile = None ) : r = urllib2 . Request ( url ) img_data = urllib2 . urlopen ( r ) . read ( ) img_buffer = StringIO . StringIO ( img_data ) img = Image . open ( img_buffer ) if FILE . make and tofile is not None : img . save ( FILE . dir + tofile ) return img",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-315",
  "doc": "for loop comment line python",
  "code": "def sflow_sample_rate(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        sflow = ET.SubElement(config, \"sflow\", xmlns=\"urn:brocade.com:mgmt:brocade-sflow\")\n        sample_rate = ET.SubElement(sflow, \"sample-rate\")\n        sample_rate.text = kwargs.pop('sample_rate')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 1,
  "code_tokens": "def sflow_sample_rate ( self , * * kwargs ) : config = ET . Element ( \"config\" ) sflow = ET . SubElement ( config , \"sflow\" , xmlns = \"urn:brocade.com:mgmt:brocade-sflow\" ) sample_rate = ET . SubElement ( sflow , \"sample-rate\" ) sample_rate . text = kwargs . pop ( 'sample_rate' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-316",
  "doc": "for loop comment line python",
  "code": "def firmware_download_input_rbridge_id(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        firmware_download = ET.Element(\"firmware_download\")\n        config = firmware_download\n        input = ET.SubElement(firmware_download, \"input\")\n        rbridge_id = ET.SubElement(input, \"rbridge-id\")\n        rbridge_id.text = kwargs.pop('rbridge_id')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 1,
  "code_tokens": "def firmware_download_input_rbridge_id ( self , * * kwargs ) : config = ET . Element ( \"config\" ) firmware_download = ET . Element ( \"firmware_download\" ) config = firmware_download input = ET . SubElement ( firmware_download , \"input\" ) rbridge_id = ET . SubElement ( input , \"rbridge-id\" ) rbridge_id . text = kwargs . pop ( 'rbridge_id' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-317",
  "doc": "python not character, continue",
  "code": "def backward_char(self, e): # (C-b)\r\n        u\"\"\"Move back a character. \"\"\"\r\n        self.l_buffer.backward_char(self.argument_reset)\r\n        self.finalize()",
  "label": 0,
  "code_tokens": "def backward_char ( self , e ) : # (C-b)\r self . l_buffer . backward_char ( self . argument_reset ) self . finalize ( )",
  "docstring_tokens": "u Move back a character ."
 },
 {
  "idx": "webquery-test-318",
  "doc": "python not character, continue",
  "code": "def backward_char_extend_selection(self, e): #\r\n        u\"\"\"Move back a character. \"\"\"\r\n        self.l_buffer.backward_char_extend_selection(self.argument_reset)\r\n        self.finalize()",
  "label": 0,
  "code_tokens": "def backward_char_extend_selection ( self , e ) : #\r self . l_buffer . backward_char_extend_selection ( self . argument_reset ) self . finalize ( )",
  "docstring_tokens": "u Move back a character ."
 },
 {
  "idx": "webquery-test-319",
  "doc": "python how to delete lines",
  "code": "def cleanLines(source, lineSep=os.linesep):\n    \"\"\"\n    :param source: some iterable source (list, file, etc)\n    :param lineSep: string of separators (chars) that must be removed\n    :return: list of non empty lines with removed separators\n    \"\"\"\n    stripped = (line.strip(lineSep) for line in source)\n    return (line for line in stripped if len(line) != 0)",
  "label": 1,
  "code_tokens": "def cleanLines ( source , lineSep = os . linesep ) : stripped = ( line . strip ( lineSep ) for line in source ) return ( line for line in stripped if len ( line ) != 0 )",
  "docstring_tokens": ": param source : some iterable source ( list file etc ) : param lineSep : string of separators ( chars ) that must be removed : return : list of non empty lines with removed separators"
 },
 {
  "idx": "webquery-test-320",
  "doc": "python how to delete lines",
  "code": "def _ignore_comments(lines_enum):\n    \"\"\"\n    Strips comments and filter empty lines.\n    \"\"\"\n    for line_number, line in lines_enum:\n        line = COMMENT_RE.sub('', line)\n        line = line.strip()\n        if line:\n            yield line_number, line",
  "label": 1,
  "code_tokens": "def _ignore_comments ( lines_enum ) : for line_number , line in lines_enum : line = COMMENT_RE . sub ( '' , line ) line = line . strip ( ) if line : yield line_number , line",
  "docstring_tokens": "Strips comments and filter empty lines ."
 },
 {
  "idx": "webquery-test-321",
  "doc": "datetime extract week fo year in python",
  "code": "def biweekly(date=datetime.date.today()):\n    \"\"\"\n    Every two weeks.\n    \"\"\"\n    return datetime.date(date.year, date.month, 1 if date.day < 15 else 15)",
  "label": 0,
  "code_tokens": "def biweekly ( date = datetime . date . today ( ) ) : return datetime . date ( date . year , date . month , 1 if date . day < 15 else 15 )",
  "docstring_tokens": "Every two weeks ."
 },
 {
  "idx": "webquery-test-322",
  "doc": "datetime extract week fo year in python",
  "code": "def week_number(date):\n    \"\"\"\n    Return the Python week number of a date.\n    The django \\|date:\"W\" returns incompatible value\n    with the view implementation.\n    \"\"\"\n    week_number = date.strftime('%W')\n    if int(week_number) < 10:\n        week_number = week_number[-1]\n    return week_number",
  "label": 1,
  "code_tokens": "def week_number ( date ) : week_number = date . strftime ( '%W' ) if int ( week_number ) < 10 : week_number = week_number [ - 1 ] return week_number",
  "docstring_tokens": "Return the Python week number of a date . The django \\ |date : W returns incompatible value with the view implementation ."
 },
 {
  "idx": "webquery-test-323",
  "doc": "python are inputs string by default",
  "code": "def _stdin_(p):\n    \"\"\"Takes input from user. Works for Python 2 and 3.\"\"\"\n    _v = sys.version[0]\n    return input(p) if _v is '3' else raw_input(p)",
  "label": 0,
  "code_tokens": "def _stdin_ ( p ) : _v = sys . version [ 0 ] return input ( p ) if _v is '3' else raw_input ( p )",
  "docstring_tokens": "Takes input from user . Works for Python 2 and 3 ."
 },
 {
  "idx": "webquery-test-324",
  "doc": "python are inputs string by default",
  "code": "def get_input(input_func, input_str):\n    \"\"\"\n    Get input from the user given an input function and an input string\n    \"\"\"\n    val = input_func(\"Please enter your {0}: \".format(input_str))\n    while not val or not len(val.strip()):\n        val = input_func(\"You didn't enter a valid {0}, please try again: \".format(input_str))\n    return val",
  "label": 1,
  "code_tokens": "def get_input ( input_func , input_str ) : val = input_func ( \"Please enter your {0}: \" . format ( input_str ) ) while not val or not len ( val . strip ( ) ) : val = input_func ( \"You didn't enter a valid {0}, please try again: \" . format ( input_str ) ) return val",
  "docstring_tokens": "Get input from the user given an input function and an input string"
 },
 {
  "idx": "webquery-test-325",
  "doc": "how to check lenght of matrix in python",
  "code": "def is_square_matrix(mat):\n    \"\"\"Test if an array is a square matrix.\"\"\"\n    mat = np.array(mat)\n    if mat.ndim != 2:\n        return False\n    shape = mat.shape\n    return shape[0] == shape[1]",
  "label": 1,
  "code_tokens": "def is_square_matrix ( mat ) : mat = np . array ( mat ) if mat . ndim != 2 : return False shape = mat . shape return shape [ 0 ] == shape [ 1 ]",
  "docstring_tokens": "Test if an array is a square matrix ."
 },
 {
  "idx": "webquery-test-326",
  "doc": "how to check lenght of matrix in python",
  "code": "def _rectangular(n):\n    \"\"\"Checks to see if a 2D list is a valid 2D matrix\"\"\"\n    for i in n:\n        if len(i) != len(n[0]):\n            return False\n    return True",
  "label": 1,
  "code_tokens": "def _rectangular ( n ) : for i in n : if len ( i ) != len ( n [ 0 ] ) : return False return True",
  "docstring_tokens": "Checks to see if a 2D list is a valid 2D matrix"
 },
 {
  "idx": "webquery-test-327",
  "doc": "python hw to check if string is integer",
  "code": "def _isint(string):\n    \"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"\n    return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)",
  "label": 1,
  "code_tokens": "def _isint ( string ) : return type ( string ) is int or ( isinstance ( string , _binary_type ) or isinstance ( string , _text_type ) ) and _isconvertible ( int , string )",
  "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"
 },
 {
  "idx": "webquery-test-328",
  "doc": "python hw to check if string is integer",
  "code": "def str2int(string_with_int):\n    \"\"\" Collect digits from a string \"\"\"\n    return int(\"\".join([char for char in string_with_int if char in string.digits]) or 0)",
  "label": 0,
  "code_tokens": "def str2int ( string_with_int ) : return int ( \"\" . join ( [ char for char in string_with_int if char in string . digits ] ) or 0 )",
  "docstring_tokens": "Collect digits from a string"
 },
 {
  "idx": "webquery-test-329",
  "doc": "python data from multiple columns dumping into one column",
  "code": "def join_cols(cols):\n    \"\"\"Join list of columns into a string for a SQL query\"\"\"\n    return \", \".join([i for i in cols]) if isinstance(cols, (list, tuple, set)) else cols",
  "label": 1,
  "code_tokens": "def join_cols ( cols ) : return \", \" . join ( [ i for i in cols ] ) if isinstance ( cols , ( list , tuple , set ) ) else cols",
  "docstring_tokens": "Join list of columns into a string for a SQL query"
 },
 {
  "idx": "webquery-test-330",
  "doc": "python data from multiple columns dumping into one column",
  "code": "def convert_to_output_format(param):\n    \"\"\"\n    Helper function to convert parameters to a valid string, that can be used in a column name.\n    Does the opposite which is used in the from_columns function.\n\n    The parameters are sorted by their name and written out in the form\n\n       <param name>_<param value>__<param name>_<param value>__ ...\n\n    If a <param_value> is a string, this method will wrap it with parenthesis \", so \"<param_value>\"\n\n    :param param: The dictionary of parameters to write out\n    :type param: dict\n\n    :return: The string of parsed parameters\n    :rtype: str\n    \"\"\"\n\n    def add_parenthesis_if_string_value(x):\n        if isinstance(x, string_types):\n            return '\"' + str(x) + '\"'\n        else:\n            return str(x)\n\n    return \"__\".join(str(key) + \"_\" + add_parenthesis_if_string_value(param[key]) for key in sorted(param.keys()))",
  "label": 0,
  "code_tokens": "def convert_to_output_format ( param ) : def add_parenthesis_if_string_value ( x ) : if isinstance ( x , string_types ) : return '\"' + str ( x ) + '\"' else : return str ( x ) return \"__\" . join ( str ( key ) + \"_\" + add_parenthesis_if_string_value ( param [ key ] ) for key in sorted ( param . keys ( ) ) )",
  "docstring_tokens": "Helper function to convert parameters to a valid string that can be used in a column name . Does the opposite which is used in the from_columns function ."
 },
 {
  "idx": "webquery-test-331",
  "doc": "pythong concatenate sting and int",
  "code": "def concat_padded(base, *args):\n    \"\"\"\n    Concatenate string and zero-padded 4 digit number\n    \"\"\"\n    ret = base\n    for n in args:\n        if is_string(n):\n            ret = \"%s_%s\" % (ret, n)\n        else:\n            ret = \"%s_%04i\"  % (ret, n + 1)\n    return ret",
  "label": 1,
  "code_tokens": "def concat_padded ( base , * args ) : ret = base for n in args : if is_string ( n ) : ret = \"%s_%s\" % ( ret , n ) else : ret = \"%s_%04i\" % ( ret , n + 1 ) return ret",
  "docstring_tokens": "Concatenate string and zero - padded 4 digit number"
 },
 {
  "idx": "webquery-test-332",
  "doc": "pythong concatenate sting and int",
  "code": "def _naturalize_numbers(self, string):\n        \"\"\"\n        Makes any integers into very zero-padded numbers.\n        e.g. '1' becomes '00000001'.\n        \"\"\"\n\n        def naturalize_int_match(match):\n            return '%08d' % (int(match.group(0)),)\n\n        string = re.sub(r'\\d+', naturalize_int_match, string)\n\n        return string",
  "label": 1,
  "code_tokens": "def _naturalize_numbers ( self , string ) : def naturalize_int_match ( match ) : return '%08d' % ( int ( match . group ( 0 ) ) , ) string = re . sub ( r'\\d+' , naturalize_int_match , string ) return string",
  "docstring_tokens": "Makes any integers into very zero - padded numbers . e . g . 1 becomes 00000001 ."
 },
 {
  "idx": "webquery-test-333",
  "doc": "python list comprehension to reverse order",
  "code": "def rvalues(self):\n        \"\"\" \n        in reversed order\n        \"\"\"\n        tmp = self\n        while tmp is not None:\n            yield tmp.data\n            tmp = tmp.prev",
  "label": 1,
  "code_tokens": "def rvalues ( self ) : tmp = self while tmp is not None : yield tmp . data tmp = tmp . prev",
  "docstring_tokens": "in reversed order"
 },
 {
  "idx": "webquery-test-334",
  "doc": "python list comprehension to reverse order",
  "code": "def get_order(self, codes):\n        \"\"\"Return evidence codes in order shown in code2name.\"\"\"\n        return sorted(codes, key=lambda e: [self.ev2idx.get(e)])",
  "label": 0,
  "code_tokens": "def get_order ( self , codes ) : return sorted ( codes , key = lambda e : [ self . ev2idx . get ( e ) ] )",
  "docstring_tokens": "Return evidence codes in order shown in code2name ."
 },
 {
  "idx": "webquery-test-335",
  "doc": "python stringmethods to check exact equality",
  "code": "def hard_equals(a, b):\n    \"\"\"Implements the '===' operator.\"\"\"\n    if type(a) != type(b):\n        return False\n    return a == b",
  "label": 1,
  "code_tokens": "def hard_equals ( a , b ) : if type ( a ) != type ( b ) : return False return a == b",
  "docstring_tokens": "Implements the === operator ."
 },
 {
  "idx": "webquery-test-336",
  "doc": "python stringmethods to check exact equality",
  "code": "def __eq__(self, other):\n        \"\"\"\n        Returns +true+ if the other object is a MIME::Type and the content\n        types match.\n        \"\"\"\n        return isinstance(other, self.__class__) and cmp(self, other) == 0",
  "label": 1,
  "code_tokens": "def __eq__ ( self , other ) : return isinstance ( other , self . __class__ ) and cmp ( self , other ) == 0",
  "docstring_tokens": "Returns + true + if the other object is a MIME :: Type and the content types match ."
 },
 {
  "idx": "webquery-test-337",
  "doc": "iterate throug list of lists python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 1,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-338",
  "doc": "iterate throug list of lists python",
  "code": "def column_stack_2d(data):\n    \"\"\"Perform column-stacking on a list of 2d data blocks.\"\"\"\n    return list(list(itt.chain.from_iterable(_)) for _ in zip(*data))",
  "label": 1,
  "code_tokens": "def column_stack_2d ( data ) : return list ( list ( itt . chain . from_iterable ( _ ) ) for _ in zip ( * data ) )",
  "docstring_tokens": "Perform column - stacking on a list of 2d data blocks ."
 },
 {
  "idx": "webquery-test-339",
  "doc": "nested for loop with list coprehension python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-340",
  "doc": "nested for loop with list coprehension python",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 1,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-341",
  "doc": "python dump json pretty each element in new line",
  "code": "def prt_js(js, sort_keys=True, indent=4):\n    \"\"\"Print Json in pretty format.\n    There's a standard module pprint, can pretty print python dict and list.\n    But it doesn't support sorted key. That why we need this func.\n\n    Usage::\n\n        >>> from weatherlab.lib.dataIO.js import prt_js\n        >>> prt_js({\"a\": 1, \"b\": 2})\n        {\n            \"a\": 1,\n            \"b\": 2\n        }\n\n    **\u4e2d\u6587\u6587\u6863**\n\n    \u4ee5\u4eba\u7c7b\u53ef\u8bfb\u7684\u65b9\u5f0f\u6253\u5370\u53efJson\u5316\u7684Python\u5bf9\u8c61\u3002\n    \"\"\"\n    print(js2str(js, sort_keys, indent))",
  "label": 1,
  "code_tokens": "def prt_js ( js , sort_keys = True , indent = 4 ) : print ( js2str ( js , sort_keys , indent ) )",
  "docstring_tokens": "Print Json in pretty format . There s a standard module pprint can pretty print python dict and list . But it doesn t support sorted key . That why we need this func ."
 },
 {
  "idx": "webquery-test-342",
  "doc": "python dump json pretty each element in new line",
  "code": "def pretty_dict_str(d, indent=2):\n    \"\"\"shows JSON indented representation of d\"\"\"\n    b = StringIO()\n    write_pretty_dict_str(b, d, indent=indent)\n    return b.getvalue()",
  "label": 1,
  "code_tokens": "def pretty_dict_str ( d , indent = 2 ) : b = StringIO ( ) write_pretty_dict_str ( b , d , indent = indent ) return b . getvalue ( )",
  "docstring_tokens": "shows JSON indented representation of d"
 },
 {
  "idx": "webquery-test-343",
  "doc": "how to say \"anything else\" in python",
  "code": "def show_help(self):\n        \"\"\"Prints to stdout help on how to answer properly\"\"\"\n        print(\"Sorry, not well understood.\")\n        print(\"- use\", str(self.yes_input), \"to answer 'YES'\")\n        print(\"- use\", str(self.no_input), \"to answer 'NO'\")",
  "label": 0,
  "code_tokens": "def show_help ( self ) : print ( \"Sorry, not well understood.\" ) print ( \"- use\" , str ( self . yes_input ) , \"to answer 'YES'\" ) print ( \"- use\" , str ( self . no_input ) , \"to answer 'NO'\" )",
  "docstring_tokens": "Prints to stdout help on how to answer properly"
 },
 {
  "idx": "webquery-test-344",
  "doc": "how to say \"anything else\" in python",
  "code": "def pause(msg=\"Press Enter to Continue...\"):\n    \"\"\"press to continue\"\"\"\n    print('\\n' + Fore.YELLOW + msg + Fore.RESET, end='')\n    input()",
  "label": 0,
  "code_tokens": "def pause ( msg = \"Press Enter to Continue...\" ) : print ( '\\n' + Fore . YELLOW + msg + Fore . RESET , end = '' ) input ( )",
  "docstring_tokens": "press to continue"
 },
 {
  "idx": "webquery-test-345",
  "doc": "get index if there are repeats python",
  "code": "def remove_dups(seq):\n    \"\"\"remove duplicates from a sequence, preserving order\"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if not (x in seen or seen_add(x))]",
  "label": 1,
  "code_tokens": "def remove_dups ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]",
  "docstring_tokens": "remove duplicates from a sequence preserving order"
 },
 {
  "idx": "webquery-test-346",
  "doc": "get index if there are repeats python",
  "code": "def unduplicate_field_names(field_names):\n    \"\"\"Append a number to duplicate field names to make them unique. \"\"\"\n    res = []\n    for k in field_names:\n        if k in res:\n            i = 1\n            while k + '_' + str(i) in res:\n                i += 1\n            k += '_' + str(i)\n        res.append(k)\n    return res",
  "label": 0,
  "code_tokens": "def unduplicate_field_names ( field_names ) : res = [ ] for k in field_names : if k in res : i = 1 while k + '_' + str ( i ) in res : i += 1 k += '_' + str ( i ) res . append ( k ) return res",
  "docstring_tokens": "Append a number to duplicate field names to make them unique ."
 },
 {
  "idx": "webquery-test-347",
  "doc": "python program for probabolity density and guassian distribution function",
  "code": "def GeneralGuinier(q, G, Rg, s):\n    \"\"\"Generalized Guinier scattering\n\n    Inputs:\n    -------\n        ``q``: independent variable\n        ``G``: factor\n        ``Rg``: radius of gyration\n        ``s``: dimensionality parameter (can be 1, 2, 3)\n\n    Formula:\n    --------\n        ``G/q**(3-s)*exp(-(q^2*Rg^2)/s)``\n    \"\"\"\n    return G / q ** (3 - s) * np.exp(-(q * Rg) ** 2 / s)",
  "label": 0,
  "code_tokens": "def GeneralGuinier ( q , G , Rg , s ) : return G / q ** ( 3 - s ) * np . exp ( - ( q * Rg ) ** 2 / s )",
  "docstring_tokens": "Generalized Guinier scattering"
 },
 {
  "idx": "webquery-test-348",
  "doc": "python program for probabolity density and guassian distribution function",
  "code": "def predictive_probability_multistate(M_c, X_L_list, X_D_list, Y, Q):\n    \"\"\"\n    Returns the predictive probability, averaged over each sample.\n    \"\"\"\n    logprobs = [float(predictive_probability(M_c, X_L, X_D, Y, Q))\n        for X_L, X_D in zip(X_L_list, X_D_list)]\n    return logmeanexp(logprobs)",
  "label": 0,
  "code_tokens": "def predictive_probability_multistate ( M_c , X_L_list , X_D_list , Y , Q ) : logprobs = [ float ( predictive_probability ( M_c , X_L , X_D , Y , Q ) ) for X_L , X_D in zip ( X_L_list , X_D_list ) ] return logmeanexp ( logprobs )",
  "docstring_tokens": "Returns the predictive probability averaged over each sample ."
 },
 {
  "idx": "webquery-test-349",
  "doc": "how to stop program running in python idle",
  "code": "def do_exit(self, arg):\n        \"\"\"Exit the shell session.\"\"\"\n\n        if self.current:\n            self.current.close()\n        self.resource_manager.close()\n        del self.resource_manager\n        return True",
  "label": 0,
  "code_tokens": "def do_exit ( self , arg ) : if self . current : self . current . close ( ) self . resource_manager . close ( ) del self . resource_manager return True",
  "docstring_tokens": "Exit the shell session ."
 },
 {
  "idx": "webquery-test-350",
  "doc": "how to stop program running in python idle",
  "code": "def stop_process(self, process, timeout=None):\n        \"\"\" Initiates a graceful stop of one process \"\"\"\n\n        process[\"terminate\"] = True\n        if timeout is not None:\n            process[\"terminate_at\"] = time.time() + timeout\n        process[\"subprocess\"].send_signal(signal.SIGINT)",
  "label": 1,
  "code_tokens": "def stop_process ( self , process , timeout = None ) : process [ \"terminate\" ] = True if timeout is not None : process [ \"terminate_at\" ] = time . time ( ) + timeout process [ \"subprocess\" ] . send_signal ( signal . SIGINT )",
  "docstring_tokens": "Initiates a graceful stop of one process"
 },
 {
  "idx": "webquery-test-351",
  "doc": "turn index to boolean python",
  "code": "def strToBool(val):\n    \"\"\"\n    Helper function to turn a string representation of \"true\" into\n    boolean True.\n    \"\"\"\n    if isinstance(val, str):\n        val = val.lower()\n\n    return val in ['true', 'on', 'yes', True]",
  "label": 0,
  "code_tokens": "def strToBool ( val ) : if isinstance ( val , str ) : val = val . lower ( ) return val in [ 'true' , 'on' , 'yes' , True ]",
  "docstring_tokens": "Helper function to turn a string representation of true into boolean True ."
 },
 {
  "idx": "webquery-test-352",
  "doc": "turn index to boolean python",
  "code": "def boolean(value):\n    \"\"\"\n    Configuration-friendly boolean type converter.\n\n    Supports both boolean-valued and string-valued inputs (e.g. from env vars).\n\n    \"\"\"\n    if isinstance(value, bool):\n        return value\n\n    if value == \"\":\n        return False\n\n    return strtobool(value)",
  "label": 0,
  "code_tokens": "def boolean ( value ) : if isinstance ( value , bool ) : return value if value == \"\" : return False return strtobool ( value )",
  "docstring_tokens": "Configuration - friendly boolean type converter ."
 },
 {
  "idx": "webquery-test-353",
  "doc": "python print float don't use scientific",
  "code": "def _format_bf(bf, precision=3, trim='0'):\n    \"\"\"Format BF10 to floating point or scientific notation.\n    \"\"\"\n    if bf >= 1e4 or bf <= 1e-4:\n        out = np.format_float_scientific(bf, precision=precision, trim=trim)\n    else:\n        out = np.format_float_positional(bf, precision=precision, trim=trim)\n    return out",
  "label": 0,
  "code_tokens": "def _format_bf ( bf , precision = 3 , trim = '0' ) : if bf >= 1e4 or bf <= 1e-4 : out = np . format_float_scientific ( bf , precision = precision , trim = trim ) else : out = np . format_float_positional ( bf , precision = precision , trim = trim ) return out",
  "docstring_tokens": "Format BF10 to floating point or scientific notation ."
 },
 {
  "idx": "webquery-test-354",
  "doc": "python print float don't use scientific",
  "code": "def _saferound(value, decimal_places):\n    \"\"\"\n    Rounds a float value off to the desired precision\n    \"\"\"\n    try:\n        f = float(value)\n    except ValueError:\n        return ''\n    format = '%%.%df' % decimal_places\n    return format % f",
  "label": 1,
  "code_tokens": "def _saferound ( value , decimal_places ) : try : f = float ( value ) except ValueError : return '' format = '%%.%df' % decimal_places return format % f",
  "docstring_tokens": "Rounds a float value off to the desired precision"
 },
 {
  "idx": "webquery-test-355",
  "doc": "write to csv as strings python",
  "code": "def as_csv(self):\n        \"\"\"Return a CSV representation as a string\"\"\"\n\n        from io import StringIO\n\n        s = StringIO()\n        w = csv.writer(s)\n        for row in self.rows:\n            w.writerow(row)\n\n        return s.getvalue()",
  "label": 1,
  "code_tokens": "def as_csv ( self ) : from io import StringIO s = StringIO ( ) w = csv . writer ( s ) for row in self . rows : w . writerow ( row ) return s . getvalue ( )",
  "docstring_tokens": "Return a CSV representation as a string"
 },
 {
  "idx": "webquery-test-356",
  "doc": "write to csv as strings python",
  "code": "def write_tsv_line_from_list(linelist, outfp):\n    \"\"\"Utility method to convert list to tsv line with carriage return\"\"\"\n    line = '\\t'.join(linelist)\n    outfp.write(line)\n    outfp.write('\\n')",
  "label": 0,
  "code_tokens": "def write_tsv_line_from_list ( linelist , outfp ) : line = '\\t' . join ( linelist ) outfp . write ( line ) outfp . write ( '\\n' )",
  "docstring_tokens": "Utility method to convert list to tsv line with carriage return"
 },
 {
  "idx": "webquery-test-357",
  "doc": "simple file input code python",
  "code": "def _stdin_(p):\n    \"\"\"Takes input from user. Works for Python 2 and 3.\"\"\"\n    _v = sys.version[0]\n    return input(p) if _v is '3' else raw_input(p)",
  "label": 0,
  "code_tokens": "def _stdin_ ( p ) : _v = sys . version [ 0 ] return input ( p ) if _v is '3' else raw_input ( p )",
  "docstring_tokens": "Takes input from user . Works for Python 2 and 3 ."
 },
 {
  "idx": "webquery-test-358",
  "doc": "simple file input code python",
  "code": "def get_input(input_func, input_str):\n    \"\"\"\n    Get input from the user given an input function and an input string\n    \"\"\"\n    val = input_func(\"Please enter your {0}: \".format(input_str))\n    while not val or not len(val.strip()):\n        val = input_func(\"You didn't enter a valid {0}, please try again: \".format(input_str))\n    return val",
  "label": 0,
  "code_tokens": "def get_input ( input_func , input_str ) : val = input_func ( \"Please enter your {0}: \" . format ( input_str ) ) while not val or not len ( val . strip ( ) ) : val = input_func ( \"You didn't enter a valid {0}, please try again: \" . format ( input_str ) ) return val",
  "docstring_tokens": "Get input from the user given an input function and an input string"
 },
 {
  "idx": "webquery-test-359",
  "doc": "how to open a file creation in python",
  "code": "def fopenat(base_fd, path):\n    \"\"\"\n    Does openat read-only, then does fdopen to get a file object\n    \"\"\"\n\n    return os.fdopen(openat(base_fd, path, os.O_RDONLY), 'rb')",
  "label": 0,
  "code_tokens": "def fopenat ( base_fd , path ) : return os . fdopen ( openat ( base_fd , path , os . O_RDONLY ) , 'rb' )",
  "docstring_tokens": "Does openat read - only then does fdopen to get a file object"
 },
 {
  "idx": "webquery-test-360",
  "doc": "how to open a file creation in python",
  "code": "def file_read(filename):\n    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\n    fobj = open(filename,'r');\n    source = fobj.read();\n    fobj.close()\n    return source",
  "label": 1,
  "code_tokens": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
  "docstring_tokens": "Read a file and close it . Returns the file source ."
 },
 {
  "idx": "webquery-test-361",
  "doc": "write a loop for different outputs python",
  "code": "def build_output(self, fout):\n        \"\"\"Squash self.out into string.\n\n        Join every line in self.out with a new line and write the\n        result to the output file.\n        \"\"\"\n        fout.write('\\n'.join([s for s in self.out]))",
  "label": 1,
  "code_tokens": "def build_output ( self , fout ) : fout . write ( '\\n' . join ( [ s for s in self . out ] ) )",
  "docstring_tokens": "Squash self . out into string ."
 },
 {
  "idx": "webquery-test-362",
  "doc": "write a loop for different outputs python",
  "code": "def end(self):\n        \"\"\"Generate the closing part\"\"\"\n        for depth in xrange(len(self.names) - 1, -1, -1):\n            self.out_f.write('{0}}}\\n'.format(self.prefix(depth)))",
  "label": 0,
  "code_tokens": "def end ( self ) : for depth in xrange ( len ( self . names ) - 1 , - 1 , - 1 ) : self . out_f . write ( '{0}}}\\n' . format ( self . prefix ( depth ) ) )",
  "docstring_tokens": "Generate the closing part"
 },
 {
  "idx": "webquery-test-363",
  "doc": "delete specifi item from a list in python",
  "code": "def dedup_list(l):\n    \"\"\"Given a list (l) will removing duplicates from the list,\n       preserving the original order of the list. Assumes that\n       the list entrie are hashable.\"\"\"\n    dedup = set()\n    return [ x for x in l if not (x in dedup or dedup.add(x))]",
  "label": 0,
  "code_tokens": "def dedup_list ( l ) : dedup = set ( ) return [ x for x in l if not ( x in dedup or dedup . add ( x ) ) ]",
  "docstring_tokens": "Given a list ( l ) will removing duplicates from the list preserving the original order of the list . Assumes that the list entrie are hashable ."
 },
 {
  "idx": "webquery-test-364",
  "doc": "delete specifi item from a list in python",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 0,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-365",
  "doc": "python how to make a random 9 digit number",
  "code": "def uniqueID(size=6, chars=string.ascii_uppercase + string.digits):\n    \"\"\"A quick and dirty way to get a unique string\"\"\"\n    return ''.join(random.choice(chars) for x in xrange(size))",
  "label": 0,
  "code_tokens": "def uniqueID ( size = 6 , chars = string . ascii_uppercase + string . digits ) : return '' . join ( random . choice ( chars ) for x in xrange ( size ) )",
  "docstring_tokens": "A quick and dirty way to get a unique string"
 },
 {
  "idx": "webquery-test-366",
  "doc": "python how to make a random 9 digit number",
  "code": "def random_id(length):\n    \"\"\"Generates a random ID of given length\"\"\"\n\n    def char():\n        \"\"\"Generate single random char\"\"\"\n\n        return random.choice(string.ascii_letters + string.digits)\n\n    return \"\".join(char() for _ in range(length))",
  "label": 0,
  "code_tokens": "def random_id ( length ) : def char ( ) : \"\"\"Generate single random char\"\"\" return random . choice ( string . ascii_letters + string . digits ) return \"\" . join ( char ( ) for _ in range ( length ) )",
  "docstring_tokens": "Generates a random ID of given length"
 },
 {
  "idx": "webquery-test-367",
  "doc": "if input is a number python",
  "code": "def is_number(obj):\n    \"\"\"\n    Helper function to determine numbers\n    across Python 2.x and 3.x\n    \"\"\"\n    try:\n        from numbers import Number\n    except ImportError:\n        from operator import isNumberType\n        return isNumberType(obj)\n    else:\n        return isinstance(obj, Number)",
  "label": 1,
  "code_tokens": "def is_number ( obj ) : try : from numbers import Number except ImportError : from operator import isNumberType return isNumberType ( obj ) else : return isinstance ( obj , Number )",
  "docstring_tokens": "Helper function to determine numbers across Python 2 . x and 3 . x"
 },
 {
  "idx": "webquery-test-368",
  "doc": "if input is a number python",
  "code": "def type_converter(text):\n    \"\"\" I convert strings into integers, floats, and strings! \"\"\"\n    if text.isdigit():\n        return int(text), int\n\n    try:\n        return float(text), float\n    except ValueError:\n        return text, STRING_TYPE",
  "label": 1,
  "code_tokens": "def type_converter ( text ) : if text . isdigit ( ) : return int ( text ) , int try : return float ( text ) , float except ValueError : return text , STRING_TYPE",
  "docstring_tokens": "I convert strings into integers floats and strings!"
 },
 {
  "idx": "webquery-test-369",
  "doc": "python write list of list to file in rows",
  "code": "def write_tsv_line_from_list(linelist, outfp):\n    \"\"\"Utility method to convert list to tsv line with carriage return\"\"\"\n    line = '\\t'.join(linelist)\n    outfp.write(line)\n    outfp.write('\\n')",
  "label": 0,
  "code_tokens": "def write_tsv_line_from_list ( linelist , outfp ) : line = '\\t' . join ( linelist ) outfp . write ( line ) outfp . write ( '\\n' )",
  "docstring_tokens": "Utility method to convert list to tsv line with carriage return"
 },
 {
  "idx": "webquery-test-370",
  "doc": "python write list of list to file in rows",
  "code": "def list_to_csv(my_list, csv_file):\n    \"\"\"\n    Save a matrix (list of lists) to a file as a CSV\n\n    .. code:: python\n\n        my_list = [[\"Name\", \"Location\"],\n                   [\"Chris\", \"South Pole\"],\n                   [\"Harry\", \"Depth of Winter\"],\n                   [\"Bob\", \"Skull\"]]\n\n        reusables.list_to_csv(my_list, \"example.csv\")\n\n    example.csv\n\n    .. code:: csv\n\n        \"Name\",\"Location\"\n        \"Chris\",\"South Pole\"\n        \"Harry\",\"Depth of Winter\"\n        \"Bob\",\"Skull\"\n\n    :param my_list: list of lists to save to CSV\n    :param csv_file: File to save data to\n    \"\"\"\n    if PY3:\n        csv_handler = open(csv_file, 'w', newline='')\n    else:\n        csv_handler = open(csv_file, 'wb')\n\n    try:\n        writer = csv.writer(csv_handler, delimiter=',', quoting=csv.QUOTE_ALL)\n        writer.writerows(my_list)\n    finally:\n        csv_handler.close()",
  "label": 0,
  "code_tokens": "def list_to_csv ( my_list , csv_file ) : if PY3 : csv_handler = open ( csv_file , 'w' , newline = '' ) else : csv_handler = open ( csv_file , 'wb' ) try : writer = csv . writer ( csv_handler , delimiter = ',' , quoting = csv . QUOTE_ALL ) writer . writerows ( my_list ) finally : csv_handler . close ( )",
  "docstring_tokens": "Save a matrix ( list of lists ) to a file as a CSV"
 },
 {
  "idx": "webquery-test-371",
  "doc": "python how to remove first item from list",
  "code": "def turn(self):\n        \"\"\"Turn the ring for a single position.\n        For example, [a, b, c, d] becomes [b, c, d, a].\"\"\"\n        first = self._data.pop(0)\n        self._data.append(first)",
  "label": 0,
  "code_tokens": "def turn ( self ) : first = self . _data . pop ( 0 ) self . _data . append ( first )",
  "docstring_tokens": "Turn the ring for a single position . For example [ a b c d ] becomes [ b c d a ] ."
 },
 {
  "idx": "webquery-test-372",
  "doc": "python how to remove first item from list",
  "code": "def remove(self, item):\n        \"\"\"Remove the first occurence of an item, the caseless way.\"\"\"\n        for entry in self:\n            if item.lower() == entry.lower():\n                list.remove(self, entry)\n                return\n        raise ValueError(': list.remove(x): x not in list')",
  "label": 0,
  "code_tokens": "def remove ( self , item ) : for entry in self : if item . lower ( ) == entry . lower ( ) : list . remove ( self , entry ) return raise ValueError ( ': list.remove(x): x not in list' )",
  "docstring_tokens": "Remove the first occurence of an item the caseless way ."
 },
 {
  "idx": "webquery-test-373",
  "doc": "gdb check python support",
  "code": "def get_complete_version(version=None):\n    \"\"\"Returns a tuple of the graphene version. If version argument is non-empty,\n    then checks for correctness of the tuple provided.\n    \"\"\"\n    if version is None:\n        from graphene import VERSION as version\n    else:\n        assert len(version) == 5\n        assert version[3] in (\"alpha\", \"beta\", \"rc\", \"final\")\n\n    return version",
  "label": 0,
  "code_tokens": "def get_complete_version ( version = None ) : if version is None : from graphene import VERSION as version else : assert len ( version ) == 5 assert version [ 3 ] in ( \"alpha\" , \"beta\" , \"rc\" , \"final\" ) return version",
  "docstring_tokens": "Returns a tuple of the graphene version . If version argument is non - empty then checks for correctness of the tuple provided ."
 },
 {
  "idx": "webquery-test-374",
  "doc": "gdb check python support",
  "code": "def gtype_to_python(gtype):\n        \"\"\"Map a gtype to the name of the Python type we use to represent it.\n\n        \"\"\"\n\n        fundamental = gobject_lib.g_type_fundamental(gtype)\n\n        if gtype in GValue._gtype_to_python:\n            return GValue._gtype_to_python[gtype]\n        if fundamental in GValue._gtype_to_python:\n            return GValue._gtype_to_python[fundamental]\n        return '<unknown type>'",
  "label": 0,
  "code_tokens": "def gtype_to_python ( gtype ) : fundamental = gobject_lib . g_type_fundamental ( gtype ) if gtype in GValue . _gtype_to_python : return GValue . _gtype_to_python [ gtype ] if fundamental in GValue . _gtype_to_python : return GValue . _gtype_to_python [ fundamental ] return '<unknown type>'",
  "docstring_tokens": "Map a gtype to the name of the Python type we use to represent it ."
 },
 {
  "idx": "webquery-test-375",
  "doc": "how to see if a list is a list in python",
  "code": "def is_iter_non_string(obj):\n    \"\"\"test if object is a list or tuple\"\"\"\n    if isinstance(obj, list) or isinstance(obj, tuple):\n        return True\n    return False",
  "label": 1,
  "code_tokens": "def is_iter_non_string ( obj ) : if isinstance ( obj , list ) or isinstance ( obj , tuple ) : return True return False",
  "docstring_tokens": "test if object is a list or tuple"
 },
 {
  "idx": "webquery-test-376",
  "doc": "how to see if a list is a list in python",
  "code": "def __isListOfTexts(self, docs):\n        \"\"\" Checks whether the input is a list of strings or Text-s; \n        \"\"\"\n        return isinstance(docs, list) and \\\n               all(isinstance(d, (basestring, Text)) for d in docs)",
  "label": 1,
  "code_tokens": "def __isListOfTexts ( self , docs ) : return isinstance ( docs , list ) and all ( isinstance ( d , ( basestring , Text ) ) for d in docs )",
  "docstring_tokens": "Checks whether the input is a list of strings or Text - s ;"
 },
 {
  "idx": "webquery-test-377",
  "doc": "how to change from list to tuple in python",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 1,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-378",
  "doc": "how to change from list to tuple in python",
  "code": "def compose_all(tups):\n  \"\"\"Compose all given tuples together.\"\"\"\n  from . import ast  # I weep for humanity\n  return functools.reduce(lambda x, y: x.compose(y), map(ast.make_tuple, tups), ast.make_tuple({}))",
  "label": 0,
  "code_tokens": "def compose_all ( tups ) : from . import ast # I weep for humanity return functools . reduce ( lambda x , y : x . compose ( y ) , map ( ast . make_tuple , tups ) , ast . make_tuple ( { } ) )",
  "docstring_tokens": "Compose all given tuples together ."
 },
 {
  "idx": "webquery-test-379",
  "doc": "python send print to logger",
  "code": "def debug(self, text):\n\t\t\"\"\" Ajout d'un message de log de type DEBUG \"\"\"\n\t\tself.logger.debug(\"{}{}\".format(self.message_prefix, text))",
  "label": 1,
  "code_tokens": "def debug ( self , text ) : self . logger . debug ( \"{}{}\" . format ( self . message_prefix , text ) )",
  "docstring_tokens": "Ajout d un message de log de type DEBUG"
 },
 {
  "idx": "webquery-test-380",
  "doc": "python send print to logger",
  "code": "def info(self, text):\n\t\t\"\"\" Ajout d'un message de log de type INFO \"\"\"\n\t\tself.logger.info(\"{}{}\".format(self.message_prefix, text))",
  "label": 1,
  "code_tokens": "def info ( self , text ) : self . logger . info ( \"{}{}\" . format ( self . message_prefix , text ) )",
  "docstring_tokens": "Ajout d un message de log de type INFO"
 },
 {
  "idx": "webquery-test-381",
  "doc": "default python executables directory",
  "code": "def _get_result_files_base(self, temp_dir):\n        \"\"\"Given the temp directory that is created for each run, return the path to the directory\n        where files created by the tool are stored.\"\"\"\n        if not self._use_namespaces:\n            return super(ContainerExecutor, self)._get_result_files_base(temp_dir)\n        else:\n            return os.path.join(temp_dir, \"temp\")",
  "label": 0,
  "code_tokens": "def _get_result_files_base ( self , temp_dir ) : if not self . _use_namespaces : return super ( ContainerExecutor , self ) . _get_result_files_base ( temp_dir ) else : return os . path . join ( temp_dir , \"temp\" )",
  "docstring_tokens": "Given the temp directory that is created for each run return the path to the directory where files created by the tool are stored ."
 },
 {
  "idx": "webquery-test-382",
  "doc": "default python executables directory",
  "code": "def get_pants_configdir():\n  \"\"\"Return the pants global config directory.\"\"\"\n  # Follow the unix XDB base spec: http://standards.freedesktop.org/basedir-spec/latest/index.html.\n  config_home = os.environ.get('XDG_CONFIG_HOME')\n  if not config_home:\n    config_home = '~/.config'\n  return os.path.expanduser(os.path.join(config_home, 'pants'))",
  "label": 0,
  "code_tokens": "def get_pants_configdir ( ) : # Follow the unix XDB base spec: http://standards.freedesktop.org/basedir-spec/latest/index.html. config_home = os . environ . get ( 'XDG_CONFIG_HOME' ) if not config_home : config_home = '~/.config' return os . path . expanduser ( os . path . join ( config_home , 'pants' ) )",
  "docstring_tokens": "Return the pants global config directory ."
 },
 {
  "idx": "webquery-test-383",
  "doc": "check if an elements exists in list python",
  "code": "def __contains__(self, item):\n        \"\"\"(dpid, key) in <ConfSwitchSet instance>\"\"\"\n        (dpid, key) = item\n        return dpid in self.confs and key in self.confs[dpid]",
  "label": 0,
  "code_tokens": "def __contains__ ( self , item ) : ( dpid , key ) = item return dpid in self . confs and key in self . confs [ dpid ]",
  "docstring_tokens": "( dpid key ) in <ConfSwitchSet instance >"
 },
 {
  "idx": "webquery-test-384",
  "doc": "check if an elements exists in list python",
  "code": "def any_contains_any(strings, candidates):\r\n    \"\"\"Whether any of the strings contains any of the candidates.\"\"\"\r\n    for string in strings:\r\n        for c in candidates:\r\n            if c in string:\r\n                return True",
  "label": 0,
  "code_tokens": "def any_contains_any ( strings , candidates ) : for string in strings : for c in candidates : if c in string : return True",
  "docstring_tokens": "Whether any of the strings contains any of the candidates ."
 },
 {
  "idx": "webquery-test-385",
  "doc": "how to not have spaces between variables python print",
  "code": "def _display(self, layout):\n        \"\"\"launch layouts display\"\"\"\n        print(file=self.out)\n        TextWriter().format(layout, self.out)",
  "label": 0,
  "code_tokens": "def _display ( self , layout ) : print ( file = self . out ) TextWriter ( ) . format ( layout , self . out )",
  "docstring_tokens": "launch layouts display"
 },
 {
  "idx": "webquery-test-386",
  "doc": "how to not have spaces between variables python print",
  "code": "def sing(a, b, c=False, name='yetone'):\n    \"\"\"sing a song\n    hehe\n\n    :param a: I'm a\n    :param b: I'm b\n    :param c: I'm c\n    :param name: I'm name\n    \"\"\"\n    print('test0.sing: <a: {}, b: {}, c: {}> by {}'.format(a, b, c, name))",
  "label": 0,
  "code_tokens": "def sing ( a , b , c = False , name = 'yetone' ) : print ( 'test0.sing: <a: {}, b: {}, c: {}> by {}' . format ( a , b , c , name ) )",
  "docstring_tokens": "sing a song hehe"
 },
 {
  "idx": "webquery-test-387",
  "doc": "how to mention newline in python",
  "code": "def csvpretty(csvfile: csvfile=sys.stdin):\n    \"\"\" Pretty print a CSV file. \"\"\"\n    shellish.tabulate(csv.reader(csvfile))",
  "label": 0,
  "code_tokens": "def csvpretty ( csvfile : csvfile = sys . stdin ) : shellish . tabulate ( csv . reader ( csvfile ) )",
  "docstring_tokens": "Pretty print a CSV file ."
 },
 {
  "idx": "webquery-test-388",
  "doc": "how to mention newline in python",
  "code": "def replaceNewlines(string, newlineChar):\n\t\"\"\"There's probably a way to do this with string functions but I was lazy.\n\t\tReplace all instances of \\r or \\n in a string with something else.\"\"\"\n\tif newlineChar in string:\n\t\tsegments = string.split(newlineChar)\n\t\tstring = \"\"\n\t\tfor segment in segments:\n\t\t\tstring += segment\n\treturn string",
  "label": 0,
  "code_tokens": "def replaceNewlines ( string , newlineChar ) : if newlineChar in string : segments = string . split ( newlineChar ) string = \"\" for segment in segments : string += segment return string",
  "docstring_tokens": "There s probably a way to do this with string functions but I was lazy . Replace all instances of \\ r or \\ n in a string with something else ."
 },
 {
  "idx": "webquery-test-389",
  "doc": "how to get the median in python",
  "code": "def getMedian(numericValues):\n    \"\"\"\n    Gets the median of a list of values\n    Returns a float/int\n    \"\"\"\n    theValues = sorted(numericValues)\n\n    if len(theValues) % 2 == 1:\n        return theValues[(len(theValues) + 1) / 2 - 1]\n    else:\n        lower = theValues[len(theValues) / 2 - 1]\n        upper = theValues[len(theValues) / 2]\n\n        return (float(lower + upper)) / 2",
  "label": 1,
  "code_tokens": "def getMedian ( numericValues ) : theValues = sorted ( numericValues ) if len ( theValues ) % 2 == 1 : return theValues [ ( len ( theValues ) + 1 ) / 2 - 1 ] else : lower = theValues [ len ( theValues ) / 2 - 1 ] upper = theValues [ len ( theValues ) / 2 ] return ( float ( lower + upper ) ) / 2",
  "docstring_tokens": "Gets the median of a list of values Returns a float / int"
 },
 {
  "idx": "webquery-test-390",
  "doc": "how to get the median in python",
  "code": "def median_high(data):\n    \"\"\"Return the high median of data.\n\n    When the number of data points is odd, the middle value is returned.\n    When it is even, the larger of the two middle values is returned.\n\n    \"\"\"\n    data = sorted(data)\n    n = len(data)\n    if n == 0:\n        raise StatisticsError(\"no median for empty data\")\n    return data[n // 2]",
  "label": 0,
  "code_tokens": "def median_high ( data ) : data = sorted ( data ) n = len ( data ) if n == 0 : raise StatisticsError ( \"no median for empty data\" ) return data [ n // 2 ]",
  "docstring_tokens": "Return the high median of data ."
 },
 {
  "idx": "webquery-test-391",
  "doc": "python elementtree line break after element",
  "code": "def add_newlines(tree):\n    \"\"\"\n    Add a newline character to the end of each <br> element.\n    \"\"\"\n    for br in tree.xpath(\"*//br\"):\n        br.tail = u\"\\n\" + br.tail if br.tail else u\"\\n\"",
  "label": 0,
  "code_tokens": "def add_newlines ( tree ) : for br in tree . xpath ( \"*//br\" ) : br . tail = u\"\\n\" + br . tail if br . tail else u\"\\n\"",
  "docstring_tokens": "Add a newline character to the end of each <br > element ."
 },
 {
  "idx": "webquery-test-392",
  "doc": "python elementtree line break after element",
  "code": "def walk_tree(root):\n    \"\"\"Pre-order depth-first\"\"\"\n    yield root\n\n    for child in root.children:\n        for el in walk_tree(child):\n            yield el",
  "label": 0,
  "code_tokens": "def walk_tree ( root ) : yield root for child in root . children : for el in walk_tree ( child ) : yield el",
  "docstring_tokens": "Pre - order depth - first"
 },
 {
  "idx": "webquery-test-393",
  "doc": "python extract one list from multidimension list",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-394",
  "doc": "python extract one list from multidimension list",
  "code": "def flatten(l, types=(list, float)):\n    \"\"\"\n    Flat nested list of lists into a single list.\n    \"\"\"\n    l = [item if isinstance(item, types) else [item] for item in l]\n    return [item for sublist in l for item in sublist]",
  "label": 1,
  "code_tokens": "def flatten ( l , types = ( list , float ) ) : l = [ item if isinstance ( item , types ) else [ item ] for item in l ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Flat nested list of lists into a single list ."
 },
 {
  "idx": "webquery-test-395",
  "doc": "python check if entry exists in dict",
  "code": "def __contains__(self, key):\n        \"\"\"\n        Invoked when determining whether a specific key is in the dictionary\n        using `key in d`.\n\n        The key is looked up case-insensitively.\n        \"\"\"\n        k = self._real_key(key)\n        return k in self._data",
  "label": 1,
  "code_tokens": "def __contains__ ( self , key ) : k = self . _real_key ( key ) return k in self . _data",
  "docstring_tokens": "Invoked when determining whether a specific key is in the dictionary using key in d ."
 },
 {
  "idx": "webquery-test-396",
  "doc": "python check if entry exists in dict",
  "code": "def get_case_insensitive_dict_key(d: Dict, k: str) -> Optional[str]:\n    \"\"\"\n    Within the dictionary ``d``, find a key that matches (in case-insensitive\n    fashion) the key ``k``, and return it (or ``None`` if there isn't one).\n    \"\"\"\n    for key in d.keys():\n        if k.lower() == key.lower():\n            return key\n    return None",
  "label": 1,
  "code_tokens": "def get_case_insensitive_dict_key ( d : Dict , k : str ) -> Optional [ str ] : for key in d . keys ( ) : if k . lower ( ) == key . lower ( ) : return key return None",
  "docstring_tokens": "Within the dictionary d find a key that matches ( in case - insensitive fashion ) the key k and return it ( or None if there isn t one ) ."
 },
 {
  "idx": "webquery-test-397",
  "doc": "extract color feature from image in python cv2",
  "code": "def url_to_image(url, flag=cv2.IMREAD_COLOR):\n    \"\"\" download the image, convert it to a NumPy array, and then read\n    it into OpenCV format \"\"\"\n    resp = urlopen(url)\n    image = np.asarray(bytearray(resp.read()), dtype=\"uint8\")\n    image = cv2.imdecode(image, flag)\n    return image",
  "label": 1,
  "code_tokens": "def url_to_image ( url , flag = cv2 . IMREAD_COLOR ) : resp = urlopen ( url ) image = np . asarray ( bytearray ( resp . read ( ) ) , dtype = \"uint8\" ) image = cv2 . imdecode ( image , flag ) return image",
  "docstring_tokens": "download the image convert it to a NumPy array and then read it into OpenCV format"
 },
 {
  "idx": "webquery-test-398",
  "doc": "extract color feature from image in python cv2",
  "code": "def imdecode(image_path):\n    \"\"\"Return BGR image read by opencv\"\"\"\n    import os\n    assert os.path.exists(image_path), image_path + ' not found'\n    im = cv2.imread(image_path)\n    return im",
  "label": 1,
  "code_tokens": "def imdecode ( image_path ) : import os assert os . path . exists ( image_path ) , image_path + ' not found' im = cv2 . imread ( image_path ) return im",
  "docstring_tokens": "Return BGR image read by opencv"
 },
 {
  "idx": "webquery-test-399",
  "doc": "how to put one quote in python print",
  "code": "def out(self, output, newline=True):\n        \"\"\"Outputs a string to the console (stdout).\"\"\"\n        click.echo(output, nl=newline)",
  "label": 0,
  "code_tokens": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )",
  "docstring_tokens": "Outputs a string to the console ( stdout ) ."
 },
 {
  "idx": "webquery-test-400",
  "doc": "how to put one quote in python print",
  "code": "def print_yaml(o):\n    \"\"\"Pretty print an object as YAML.\"\"\"\n    print(yaml.dump(o, default_flow_style=False, indent=4, encoding='utf-8'))",
  "label": 0,
  "code_tokens": "def print_yaml ( o ) : print ( yaml . dump ( o , default_flow_style = False , indent = 4 , encoding = 'utf-8' ) )",
  "docstring_tokens": "Pretty print an object as YAML ."
 },
 {
  "idx": "webquery-test-401",
  "doc": "connect python to an api",
  "code": "async def login(\n        username: str, password: str, brand: str,\n        websession: ClientSession = None) -> API:\n    \"\"\"Log in to the API.\"\"\"\n    api = API(brand, websession)\n    await api.authenticate(username, password)\n    return api",
  "label": 1,
  "code_tokens": "async def login ( username : str , password : str , brand : str , websession : ClientSession = None ) -> API : api = API ( brand , websession ) await api . authenticate ( username , password ) return api",
  "docstring_tokens": "Log in to the API ."
 },
 {
  "idx": "webquery-test-402",
  "doc": "connect python to an api",
  "code": "def post_sea_resource(url, body):\n    \"\"\"\n    Get the requested resource using the Seattle account\n    :returns: http response with content in json\n    \"\"\"\n    response = None\n    response = TrumbaSea_DAO().postURL(\n        url,\n        {\"Content-Type\": \"application/json\"},\n        body)\n    _log_json_resp(\"Seattle\", url, body, response)\n    return response",
  "label": 0,
  "code_tokens": "def post_sea_resource ( url , body ) : response = None response = TrumbaSea_DAO ( ) . postURL ( url , { \"Content-Type\" : \"application/json\" } , body ) _log_json_resp ( \"Seattle\" , url , body , response ) return response",
  "docstring_tokens": "Get the requested resource using the Seattle account : returns : http response with content in json"
 },
 {
  "idx": "webquery-test-403",
  "doc": "python get a specific column in matrix",
  "code": "def get_column(self, X, column):\n        \"\"\"Return a column of the given matrix.\n\n        Args:\n            X: `numpy.ndarray` or `pandas.DataFrame`.\n            column: `int` or `str`.\n\n        Returns:\n            np.ndarray: Selected column.\n        \"\"\"\n        if isinstance(X, pd.DataFrame):\n            return X[column].values\n\n        return X[:, column]",
  "label": 1,
  "code_tokens": "def get_column ( self , X , column ) : if isinstance ( X , pd . DataFrame ) : return X [ column ] . values return X [ : , column ]",
  "docstring_tokens": "Return a column of the given matrix ."
 },
 {
  "idx": "webquery-test-404",
  "doc": "python get a specific column in matrix",
  "code": "def _column(arr, indexes):\n    \"\"\" Returns a column with given indexes from a deep array\n\n    For example, if the array is a matrix and indexes is a single int, will\n    return arr[:,indexes]. If the array is an order 3 tensor and indexes is a\n    pair of ints, will return arr[:,indexes[0],indexes[1]], etc.\n\n    \"\"\"\n    if arr.ndim == 2 and types.is_int(indexes):\n        return arr[:, indexes]\n    elif arr.ndim == 3 and len(indexes) == 2:\n        return arr[:, indexes[0], indexes[1]]\n    else:\n        raise NotImplementedError('Only supporting arrays of dimension 2 and 3 as yet.')",
  "label": 1,
  "code_tokens": "def _column ( arr , indexes ) : if arr . ndim == 2 and types . is_int ( indexes ) : return arr [ : , indexes ] elif arr . ndim == 3 and len ( indexes ) == 2 : return arr [ : , indexes [ 0 ] , indexes [ 1 ] ] else : raise NotImplementedError ( 'Only supporting arrays of dimension 2 and 3 as yet.' )",
  "docstring_tokens": "Returns a column with given indexes from a deep array"
 },
 {
  "idx": "webquery-test-405",
  "doc": "python create a lot of empty lists",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 0,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-406",
  "doc": "python create a lot of empty lists",
  "code": "def dedupe_list(l):\n    \"\"\"Remove duplicates from a list preserving the order.\n\n    We might be tempted to use the list(set(l)) idiom, but it doesn't preserve\n    the order, which hinders testability and does not work for lists with\n    unhashable elements.\n    \"\"\"\n    result = []\n\n    for el in l:\n        if el not in result:\n            result.append(el)\n\n    return result",
  "label": 0,
  "code_tokens": "def dedupe_list ( l ) : result = [ ] for el in l : if el not in result : result . append ( el ) return result",
  "docstring_tokens": "Remove duplicates from a list preserving the order ."
 },
 {
  "idx": "webquery-test-407",
  "doc": "change to lowercase in list in python",
  "code": "def downcaseTokens(s,l,t):\n    \"\"\"Helper parse action to convert tokens to lower case.\"\"\"\n    return [ tt.lower() for tt in map(_ustr,t) ]",
  "label": 0,
  "code_tokens": "def downcaseTokens ( s , l , t ) : return [ tt . lower ( ) for tt in map ( _ustr , t ) ]",
  "docstring_tokens": "Helper parse action to convert tokens to lower case ."
 },
 {
  "idx": "webquery-test-408",
  "doc": "change to lowercase in list in python",
  "code": "def upcaseTokens(s,l,t):\n    \"\"\"Helper parse action to convert tokens to upper case.\"\"\"\n    return [ tt.upper() for tt in map(_ustr,t) ]",
  "label": 0,
  "code_tokens": "def upcaseTokens ( s , l , t ) : return [ tt . upper ( ) for tt in map ( _ustr , t ) ]",
  "docstring_tokens": "Helper parse action to convert tokens to upper case ."
 },
 {
  "idx": "webquery-test-409",
  "doc": "replace word in a file python",
  "code": "def replace_all(filepath, searchExp, replaceExp):\n    \"\"\"\n    Replace all the ocurrences (in a file) of a string with another value.\n    \"\"\"\n    for line in fileinput.input(filepath, inplace=1):\n        if searchExp in line:\n            line = line.replace(searchExp, replaceExp)\n        sys.stdout.write(line)",
  "label": 1,
  "code_tokens": "def replace_all ( filepath , searchExp , replaceExp ) : for line in fileinput . input ( filepath , inplace = 1 ) : if searchExp in line : line = line . replace ( searchExp , replaceExp ) sys . stdout . write ( line )",
  "docstring_tokens": "Replace all the ocurrences ( in a file ) of a string with another value ."
 },
 {
  "idx": "webquery-test-410",
  "doc": "replace word in a file python",
  "code": "def fix_header_comment(filename, timestamp):\n    \"\"\"Fixes the header-comment of the given file.\"\"\"\n    # Fix input file.\n    name = os.path.basename( filename )\n    for line in fileinput.input( filename, inplace=1, mode=\"rU\" ):\n        # If header-comment already contains anything for '$Id$', remove it.\n        line = re.sub(r'\\$Id:[^$]+\\$', r'$Id$', line.rstrip())\n        # Replace '$Id$' by a string containing the file's name (and a timestamp)!\n        line = re.sub(re.escape(r'$Id$'), r'$Id: ' + name + r' ' + timestamp.isoformat() + r' $', line.rstrip())\n        print(line)",
  "label": 0,
  "code_tokens": "def fix_header_comment ( filename , timestamp ) : # Fix input file. name = os . path . basename ( filename ) for line in fileinput . input ( filename , inplace = 1 , mode = \"rU\" ) : # If header-comment already contains anything for '$Id$', remove it. line = re . sub ( r'\\$Id:[^$]+\\$' , r'$Id$' , line . rstrip ( ) ) # Replace '$Id$' by a string containing the file's name (and a timestamp)! line = re . sub ( re . escape ( r'$Id$' ) , r'$Id: ' + name + r' ' + timestamp . isoformat ( ) + r' $' , line . rstrip ( ) ) print ( line )",
  "docstring_tokens": "Fixes the header - comment of the given file ."
 },
 {
  "idx": "webquery-test-411",
  "doc": "python dictionary key present or not",
  "code": "def _has(self, key, exact=0):\n\n        \"\"\"Returns false if key is not found or is ambiguous\"\"\"\n\n        if not exact:\n            try:\n                key = self.getfullkey(key)\n                return 1\n            except KeyError:\n                return 0\n        else:\n            return key in self.data",
  "label": 0,
  "code_tokens": "def _has ( self , key , exact = 0 ) : if not exact : try : key = self . getfullkey ( key ) return 1 except KeyError : return 0 else : return key in self . data",
  "docstring_tokens": "Returns false if key is not found or is ambiguous"
 },
 {
  "idx": "webquery-test-412",
  "doc": "python dictionary key present or not",
  "code": "def __contains__(self, key):\n        \"\"\" Tests if a key is contained in the store.\n\n            May test againsts self.defaults\n\n            :param str value: Value\n        \"\"\"\n        if self._haveKey(key) or key in self.defaults:\n            return True\n        else:\n            return False",
  "label": 0,
  "code_tokens": "def __contains__ ( self , key ) : if self . _haveKey ( key ) or key in self . defaults : return True else : return False",
  "docstring_tokens": "Tests if a key is contained in the store ."
 },
 {
  "idx": "webquery-test-413",
  "doc": "python count instances of one array element in another array",
  "code": "def dims_intersect(self):\n        \"\"\"Dimensions of the arrays in this list that are used in all arrays\n        \"\"\"\n        return set.intersection(*map(\n            set, (getattr(arr, 'dims_intersect', arr.dims) for arr in self)))",
  "label": 0,
  "code_tokens": "def dims_intersect ( self ) : return set . intersection ( * map ( set , ( getattr ( arr , 'dims_intersect' , arr . dims ) for arr in self ) ) )",
  "docstring_tokens": "Dimensions of the arrays in this list that are used in all arrays"
 },
 {
  "idx": "webquery-test-414",
  "doc": "python count instances of one array element in another array",
  "code": "def __and__(self, other):\n\t\t\"\"\"\n\t\tReturn a Cache containing the entries of self that are also in other.\n\t\t\"\"\"\n\t\treturn self.__class__([elem for elem in self if elem in other])",
  "label": 0,
  "code_tokens": "def __and__ ( self , other ) : return self . __class__ ( [ elem for elem in self if elem in other ] )",
  "docstring_tokens": "Return a Cache containing the entries of self that are also in other ."
 },
 {
  "idx": "webquery-test-415",
  "doc": "python script to check website for changes",
  "code": "def needs_check(self):\n        \"\"\"\n        Check if enough time has elapsed to perform a check().\n\n        If this time has elapsed, a state change check through\n        has_state_changed() should be performed and eventually a sync().\n\n        :rtype: boolean\n        \"\"\"\n        if self.lastcheck is None:\n            return True\n        return time.time() - self.lastcheck >= self.ipchangedetection_sleep",
  "label": 0,
  "code_tokens": "def needs_check ( self ) : if self . lastcheck is None : return True return time . time ( ) - self . lastcheck >= self . ipchangedetection_sleep",
  "docstring_tokens": "Check if enough time has elapsed to perform a check () ."
 },
 {
  "idx": "webquery-test-416",
  "doc": "python script to check website for changes",
  "code": "def check_new_version_available(this_version):\n    \"\"\"\n    Checks if a newer version of Zappa is available.\n\n    Returns True is updateable, else False.\n\n    \"\"\"\n    import requests\n\n    pypi_url = 'https://pypi.python.org/pypi/Zappa/json'\n    resp = requests.get(pypi_url, timeout=1.5)\n    top_version = resp.json()['info']['version']\n\n    return this_version != top_version",
  "label": 0,
  "code_tokens": "def check_new_version_available ( this_version ) : import requests pypi_url = 'https://pypi.python.org/pypi/Zappa/json' resp = requests . get ( pypi_url , timeout = 1.5 ) top_version = resp . json ( ) [ 'info' ] [ 'version' ] return this_version != top_version",
  "docstring_tokens": "Checks if a newer version of Zappa is available ."
 },
 {
  "idx": "webquery-test-417",
  "doc": "common elements in 2 array python",
  "code": "def compare(a, b):\n    \"\"\"\n     Compare items in 2 arrays. Returns sum(abs(a(i)-b(i)))\n    \"\"\"\n    s=0\n    for i in range(len(a)):\n        s=s+abs(a[i]-b[i])\n    return s",
  "label": 0,
  "code_tokens": "def compare ( a , b ) : s = 0 for i in range ( len ( a ) ) : s = s + abs ( a [ i ] - b [ i ] ) return s",
  "docstring_tokens": "Compare items in 2 arrays . Returns sum ( abs ( a ( i ) - b ( i )))"
 },
 {
  "idx": "webquery-test-418",
  "doc": "common elements in 2 array python",
  "code": "def full_like(array, value, dtype=None):\n    \"\"\" Create a shared memory array with the same shape and type as a given array, filled with `value`.\n    \"\"\"\n    shared = empty_like(array, dtype)\n    shared[:] = value\n    return shared",
  "label": 0,
  "code_tokens": "def full_like ( array , value , dtype = None ) : shared = empty_like ( array , dtype ) shared [ : ] = value return shared",
  "docstring_tokens": "Create a shared memory array with the same shape and type as a given array filled with value ."
 },
 {
  "idx": "webquery-test-419",
  "doc": "python stop server thread",
  "code": "def background_thread():\n    \"\"\"Example of how to send server generated events to clients.\"\"\"\n    count = 0\n    while True:\n        socketio.sleep(10)\n        count += 1\n        socketio.emit('my_response',\n                      {'data': 'Server generated event', 'count': count},\n                      namespace='/test')",
  "label": 0,
  "code_tokens": "def background_thread ( ) : count = 0 while True : socketio . sleep ( 10 ) count += 1 socketio . emit ( 'my_response' , { 'data' : 'Server generated event' , 'count' : count } , namespace = '/test' )",
  "docstring_tokens": "Example of how to send server generated events to clients ."
 },
 {
  "idx": "webquery-test-420",
  "doc": "python stop server thread",
  "code": "def server(port):\n    \"\"\"Start the Django dev server.\"\"\"\n    args = ['python', 'manage.py', 'runserver']\n    if port:\n        args.append(port)\n    run.main(args)",
  "label": 0,
  "code_tokens": "def server ( port ) : args = [ 'python' , 'manage.py' , 'runserver' ] if port : args . append ( port ) run . main ( args )",
  "docstring_tokens": "Start the Django dev server ."
 },
 {
  "idx": "webquery-test-421",
  "doc": "check if multiple variables are not none python",
  "code": "def _one_exists(input_files):\n    \"\"\"\n    at least one file must exist for multiqc to run properly\n    \"\"\"\n    for f in input_files:\n        if os.path.exists(f):\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def _one_exists ( input_files ) : for f in input_files : if os . path . exists ( f ) : return True return False",
  "docstring_tokens": "at least one file must exist for multiqc to run properly"
 },
 {
  "idx": "webquery-test-422",
  "doc": "check if multiple variables are not none python",
  "code": "def files_have_same_point_format_id(las_files):\n    \"\"\" Returns true if all the files have the same points format id\n    \"\"\"\n    point_format_found = {las.header.point_format_id for las in las_files}\n    return len(point_format_found) == 1",
  "label": 0,
  "code_tokens": "def files_have_same_point_format_id ( las_files ) : point_format_found = { las . header . point_format_id for las in las_files } return len ( point_format_found ) == 1",
  "docstring_tokens": "Returns true if all the files have the same points format id"
 },
 {
  "idx": "webquery-test-423",
  "doc": "cast to int from string python",
  "code": "def get_number(s, cast=int):\n    \"\"\"\n    Try to get a number out of a string, and cast it.\n    \"\"\"\n    import string\n    d = \"\".join(x for x in str(s) if x in string.digits)\n    return cast(d)",
  "label": 1,
  "code_tokens": "def get_number ( s , cast = int ) : import string d = \"\" . join ( x for x in str ( s ) if x in string . digits ) return cast ( d )",
  "docstring_tokens": "Try to get a number out of a string and cast it ."
 },
 {
  "idx": "webquery-test-424",
  "doc": "cast to int from string python",
  "code": "def _from_bytes(bytes, byteorder=\"big\", signed=False):\n    \"\"\"This is the same functionality as ``int.from_bytes`` in python 3\"\"\"\n    return int.from_bytes(bytes, byteorder=byteorder, signed=signed)",
  "label": 0,
  "code_tokens": "def _from_bytes ( bytes , byteorder = \"big\" , signed = False ) : return int . from_bytes ( bytes , byteorder = byteorder , signed = signed )",
  "docstring_tokens": "This is the same functionality as int . from_bytes in python 3"
 },
 {
  "idx": "webquery-test-425",
  "doc": "python zlib compress string",
  "code": "def zlib_compress(data):\n    \"\"\"\n    Compress things in a py2/3 safe fashion\n    >>> json_str = '{\"test\": 1}'\n    >>> blob = zlib_compress(json_str)\n    \"\"\"\n    if PY3K:\n        if isinstance(data, str):\n            return zlib.compress(bytes(data, 'utf-8'))\n        return zlib.compress(data)\n    return zlib.compress(data)",
  "label": 1,
  "code_tokens": "def zlib_compress ( data ) : if PY3K : if isinstance ( data , str ) : return zlib . compress ( bytes ( data , 'utf-8' ) ) return zlib . compress ( data ) return zlib . compress ( data )",
  "docstring_tokens": "Compress things in a py2 / 3 safe fashion >>> json_str = { test : 1 } >>> blob = zlib_compress ( json_str )"
 },
 {
  "idx": "webquery-test-426",
  "doc": "python zlib compress string",
  "code": "def _compress_content(self, content):\n        \"\"\"Gzip a given string.\"\"\"\n        zbuf = StringIO()\n        zfile = GzipFile(mode='wb', compresslevel=6, fileobj=zbuf)\n        zfile.write(content.read())\n        zfile.close()\n        content.file = zbuf\n        return content",
  "label": 0,
  "code_tokens": "def _compress_content ( self , content ) : zbuf = StringIO ( ) zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf ) zfile . write ( content . read ( ) ) zfile . close ( ) content . file = zbuf return content",
  "docstring_tokens": "Gzip a given string ."
 },
 {
  "idx": "webquery-test-427",
  "doc": "for loop printing a dictionary python",
  "code": "def printdict(adict):\n    \"\"\"printdict\"\"\"\n    dlist = list(adict.keys())\n    dlist.sort()\n    for i in range(0, len(dlist)):\n        print(dlist[i], adict[dlist[i]])",
  "label": 1,
  "code_tokens": "def printdict ( adict ) : dlist = list ( adict . keys ( ) ) dlist . sort ( ) for i in range ( 0 , len ( dlist ) ) : print ( dlist [ i ] , adict [ dlist [ i ] ] )",
  "docstring_tokens": "printdict"
 },
 {
  "idx": "webquery-test-428",
  "doc": "for loop printing a dictionary python",
  "code": "def stringify_dict_contents(dct):\n    \"\"\"Turn dict keys and values into native strings.\"\"\"\n    return {\n        str_if_nested_or_str(k): str_if_nested_or_str(v)\n        for k, v in dct.items()\n    }",
  "label": 0,
  "code_tokens": "def stringify_dict_contents ( dct ) : return { str_if_nested_or_str ( k ) : str_if_nested_or_str ( v ) for k , v in dct . items ( ) }",
  "docstring_tokens": "Turn dict keys and values into native strings ."
 },
 {
  "idx": "webquery-test-429",
  "doc": "using a list to capture a split in python",
  "code": "def split_elements(value):\n    \"\"\"Split a string with comma or space-separated elements into a list.\"\"\"\n    items = [v.strip() for v in value.split(',')]\n    if len(items) == 1:\n        items = value.split()\n    return items",
  "label": 1,
  "code_tokens": "def split_elements ( value ) : items = [ v . strip ( ) for v in value . split ( ',' ) ] if len ( items ) == 1 : items = value . split ( ) return items",
  "docstring_tokens": "Split a string with comma or space - separated elements into a list ."
 },
 {
  "idx": "webquery-test-430",
  "doc": "using a list to capture a split in python",
  "code": "def trimmed_split(s, seps=(\";\", \",\")):\n    \"\"\"Given a string s, split is by one of one of the seps.\"\"\"\n    for sep in seps:\n        if sep not in s:\n            continue\n        data = [item.strip() for item in s.strip().split(sep)]\n        return data\n    return [s]",
  "label": 1,
  "code_tokens": "def trimmed_split ( s , seps = ( \";\" , \",\" ) ) : for sep in seps : if sep not in s : continue data = [ item . strip ( ) for item in s . strip ( ) . split ( sep ) ] return data return [ s ]",
  "docstring_tokens": "Given a string s split is by one of one of the seps ."
 },
 {
  "idx": "webquery-test-431",
  "doc": "how to check if a link is valid python",
  "code": "def looks_like_url(url):\n    \"\"\" Simplified check to see if the text appears to be a URL.\n\n    Similar to `urlparse` but much more basic.\n\n    Returns:\n      True if the url str appears to be valid.\n      False otherwise.\n\n    >>> url = looks_like_url(\"totalgood.org\")\n    >>> bool(url)\n    True\n    \"\"\"\n    if not isinstance(url, basestring):\n        return False\n    if not isinstance(url, basestring) or len(url) >= 1024 or not cre_url.match(url):\n        return False\n    return True",
  "label": 1,
  "code_tokens": "def looks_like_url ( url ) : if not isinstance ( url , basestring ) : return False if not isinstance ( url , basestring ) or len ( url ) >= 1024 or not cre_url . match ( url ) : return False return True",
  "docstring_tokens": "Simplified check to see if the text appears to be a URL ."
 },
 {
  "idx": "webquery-test-432",
  "doc": "how to check if a link is valid python",
  "code": "def applies_to(self, url_data):\n        \"\"\"Check validity, scheme, extern and url_connection.\"\"\"\n        return url_data.valid and url_data.scheme == 'https' and \\\n          not url_data.extern[0] and url_data.url_connection is not None",
  "label": 1,
  "code_tokens": "def applies_to ( self , url_data ) : return url_data . valid and url_data . scheme == 'https' and not url_data . extern [ 0 ] and url_data . url_connection is not None",
  "docstring_tokens": "Check validity scheme extern and url_connection ."
 },
 {
  "idx": "webquery-test-433",
  "doc": "python typecast single precision",
  "code": "def round_to_int(number, precision):\n    \"\"\"Round a number to a precision\"\"\"\n    precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded",
  "label": 1,
  "code_tokens": "def round_to_int ( number , precision ) : precision = int ( precision ) rounded = ( int ( number ) + precision / 2 ) // precision * precision return rounded",
  "docstring_tokens": "Round a number to a precision"
 },
 {
  "idx": "webquery-test-434",
  "doc": "python typecast single precision",
  "code": "def round_to_float(number, precision):\n    \"\"\"Round a float to a precision\"\"\"\n    rounded = Decimal(str(floor((number + precision / 2) // precision))\n                      ) * Decimal(str(precision))\n    return float(rounded)",
  "label": 1,
  "code_tokens": "def round_to_float ( number , precision ) : rounded = Decimal ( str ( floor ( ( number + precision / 2 ) // precision ) ) ) * Decimal ( str ( precision ) ) return float ( rounded )",
  "docstring_tokens": "Round a float to a precision"
 },
 {
  "idx": "webquery-test-435",
  "doc": "python integer as a 4 byte hex",
  "code": "def tob32(val):\n    \"\"\"Return provided 32 bit value as a string of four bytes.\"\"\"\n    ret = bytearray(4)\n    ret[0] = (val>>24)&M8\n    ret[1] = (val>>16)&M8\n    ret[2] = (val>>8)&M8\n    ret[3] = val&M8\n    return ret",
  "label": 0,
  "code_tokens": "def tob32 ( val ) : ret = bytearray ( 4 ) ret [ 0 ] = ( val >> 24 ) & M8 ret [ 1 ] = ( val >> 16 ) & M8 ret [ 2 ] = ( val >> 8 ) & M8 ret [ 3 ] = val & M8 return ret",
  "docstring_tokens": "Return provided 32 bit value as a string of four bytes ."
 },
 {
  "idx": "webquery-test-436",
  "doc": "python integer as a 4 byte hex",
  "code": "def byte2bit_string(data):\n    \"\"\"\n    >>> byte2bit_string(\"H\")\n    '00010010'\n\n    >>> byte2bit_string(0x55)\n    '10101010'\n    \"\"\"\n    if isinstance(data, basestring):\n        assert len(data) == 1\n        data = ord(data)\n\n    bits = '{0:08b}'.format(data)\n    bits = bits[::-1]\n    return bits",
  "label": 0,
  "code_tokens": "def byte2bit_string ( data ) : if isinstance ( data , basestring ) : assert len ( data ) == 1 data = ord ( data ) bits = '{0:08b}' . format ( data ) bits = bits [ : : - 1 ] return bits",
  "docstring_tokens": ">>> byte2bit_string ( H ) 00010010"
 },
 {
  "idx": "webquery-test-437",
  "doc": "python range with fixed increments",
  "code": "def frange(start, stop, step, precision):\n    \"\"\"A generator that will generate a range of floats.\"\"\"\n    value = start\n    while round(value, precision) < stop:\n        yield round(value, precision)\n        value += step",
  "label": 1,
  "code_tokens": "def frange ( start , stop , step , precision ) : value = start while round ( value , precision ) < stop : yield round ( value , precision ) value += step",
  "docstring_tokens": "A generator that will generate a range of floats ."
 },
 {
  "idx": "webquery-test-438",
  "doc": "python range with fixed increments",
  "code": "def Counter64(a, b, delta):\n    \"\"\"64bit counter aggregator with wrapping\n    \"\"\"\n    if b < a:\n        c = 18446744073709551615 - a\n        return (c + b) / float(delta)\n\n    return (b - a) / float(delta)",
  "label": 0,
  "code_tokens": "def Counter64 ( a , b , delta ) : if b < a : c = 18446744073709551615 - a return ( c + b ) / float ( delta ) return ( b - a ) / float ( delta )",
  "docstring_tokens": "64bit counter aggregator with wrapping"
 },
 {
  "idx": "webquery-test-439",
  "doc": "python how to make string isdigit print out the digits",
  "code": "def ishex(obj):\n    \"\"\"\n    Test if the argument is a string representing a valid hexadecimal digit.\n\n    :param obj: Object\n    :type  obj: any\n\n    :rtype: boolean\n    \"\"\"\n    return isinstance(obj, str) and (len(obj) == 1) and (obj in string.hexdigits)",
  "label": 0,
  "code_tokens": "def ishex ( obj ) : return isinstance ( obj , str ) and ( len ( obj ) == 1 ) and ( obj in string . hexdigits )",
  "docstring_tokens": "Test if the argument is a string representing a valid hexadecimal digit ."
 },
 {
  "idx": "webquery-test-440",
  "doc": "python how to make string isdigit print out the digits",
  "code": "def is_dec(ip):\n    \"\"\"Return true if the IP address is in decimal notation.\"\"\"\n    try:\n        dec = int(str(ip))\n    except ValueError:\n        return False\n    if dec > 4294967295 or dec < 0:\n        return False\n    return True",
  "label": 0,
  "code_tokens": "def is_dec ( ip ) : try : dec = int ( str ( ip ) ) except ValueError : return False if dec > 4294967295 or dec < 0 : return False return True",
  "docstring_tokens": "Return true if the IP address is in decimal notation ."
 },
 {
  "idx": "webquery-test-441",
  "doc": "how to select top exam scores in python",
  "code": "def highest(self):\n        \"\"\"Return the items with the higest score.\n\n        If this ScoreSet is empty, returns None.\n        \"\"\"\n        scores = self.scores()\n        if not scores:\n            return None\n        maxscore = max(map(score, scores))\n        return filter(lambda x: score(x) == maxscore, scores)",
  "label": 1,
  "code_tokens": "def highest ( self ) : scores = self . scores ( ) if not scores : return None maxscore = max ( map ( score , scores ) ) return filter ( lambda x : score ( x ) == maxscore , scores )",
  "docstring_tokens": "Return the items with the higest score ."
 },
 {
  "idx": "webquery-test-442",
  "doc": "how to select top exam scores in python",
  "code": "def print_report(self):\n        \"\"\"\n        Print Compare report.\n\n        :return: None\n        \"\"\"\n        report = compare_report_print(\n            self.sorted, self.scores, self.best_name)\n        print(report)",
  "label": 0,
  "code_tokens": "def print_report ( self ) : report = compare_report_print ( self . sorted , self . scores , self . best_name ) print ( report )",
  "docstring_tokens": "Print Compare report ."
 },
 {
  "idx": "webquery-test-443",
  "doc": "python create path folders",
  "code": "def abspath(*path):\n    \"\"\"A method to determine absolute path for a given relative path to the\n    directory where this setup.py script is located\"\"\"\n    setup_dir = os.path.dirname(os.path.abspath(__file__))\n    return os.path.join(setup_dir, *path)",
  "label": 0,
  "code_tokens": "def abspath ( * path ) : setup_dir = os . path . dirname ( os . path . abspath ( __file__ ) ) return os . path . join ( setup_dir , * path )",
  "docstring_tokens": "A method to determine absolute path for a given relative path to the directory where this setup . py script is located"
 },
 {
  "idx": "webquery-test-444",
  "doc": "python create path folders",
  "code": "def get_module_path(modname):\r\n    \"\"\"Return module *modname* base path\"\"\"\r\n    return osp.abspath(osp.dirname(sys.modules[modname].__file__))",
  "label": 0,
  "code_tokens": "def get_module_path ( modname ) : return osp . abspath ( osp . dirname ( sys . modules [ modname ] . __file__ ) )",
  "docstring_tokens": "Return module * modname * base path"
 },
 {
  "idx": "webquery-test-445",
  "doc": "python how to return the file to dict",
  "code": "def make_lex_dict(self):\n        \"\"\"\n        Convert lexicon file to a dictionary\n        \"\"\"\n        lex_dict = {}\n        for line in self.lexicon_full_filepath.split('\\n'):\n            (word, measure) = line.strip().split('\\t')[0:2]\n            lex_dict[word] = float(measure)\n        return lex_dict",
  "label": 1,
  "code_tokens": "def make_lex_dict ( self ) : lex_dict = { } for line in self . lexicon_full_filepath . split ( '\\n' ) : ( word , measure ) = line . strip ( ) . split ( '\\t' ) [ 0 : 2 ] lex_dict [ word ] = float ( measure ) return lex_dict",
  "docstring_tokens": "Convert lexicon file to a dictionary"
 },
 {
  "idx": "webquery-test-446",
  "doc": "python how to return the file to dict",
  "code": "def load_b26_file(file_name):\n    \"\"\"\n    loads a .b26 file into a dictionary\n\n    Args:\n        file_name:\n\n    Returns: dictionary with keys instrument, scripts, probes\n\n    \"\"\"\n    # file_name = \"Z:\\Lab\\Cantilever\\Measurements\\\\tmp_\\\\a\"\n\n    assert os.path.exists(file_name)\n\n    with open(file_name, 'r') as infile:\n        data = yaml.safe_load(infile)\n    return data",
  "label": 1,
  "code_tokens": "def load_b26_file ( file_name ) : # file_name = \"Z:\\Lab\\Cantilever\\Measurements\\\\tmp_\\\\a\" assert os . path . exists ( file_name ) with open ( file_name , 'r' ) as infile : data = yaml . safe_load ( infile ) return data",
  "docstring_tokens": "loads a . b26 file into a dictionary"
 },
 {
  "idx": "webquery-test-447",
  "doc": "python string match variable",
  "code": "def _vars_match(self):\n        \"\"\"Regular expression to match playbook variable.\"\"\"\n        return re.compile(\n            r'#([A-Za-z]+)'  # match literal (#App) at beginning of String\n            r':([\\d]+)'  # app id (:7979)\n            r':([A-Za-z0-9_\\.\\-\\[\\]]+)'  # variable name (:variable_name)\n            r'!(StringArray|BinaryArray|KeyValueArray'  # variable type (array)\n            r'|TCEntityArray|TCEnhancedEntityArray'  # variable type (array)\n            r'|String|Binary|KeyValue|TCEntity|TCEnhancedEntity'  # variable type\n            r'|(?:(?!String)(?!Binary)(?!KeyValue)'  # non matching for custom\n            r'(?!TCEntity)(?!TCEnhancedEntity)'  # non matching for custom\n            r'[A-Za-z0-9_-]+))'  # variable type (custom)\n        )",
  "label": 1,
  "code_tokens": "def _vars_match ( self ) : return re . compile ( r'#([A-Za-z]+)' # match literal (#App) at beginning of String r':([\\d]+)' # app id (:7979) r':([A-Za-z0-9_\\.\\-\\[\\]]+)' # variable name (:variable_name) r'!(StringArray|BinaryArray|KeyValueArray' # variable type (array) r'|TCEntityArray|TCEnhancedEntityArray' # variable type (array) r'|String|Binary|KeyValue|TCEntity|TCEnhancedEntity' # variable type r'|(?:(?!String)(?!Binary)(?!KeyValue)' # non matching for custom r'(?!TCEntity)(?!TCEnhancedEntity)' # non matching for custom r'[A-Za-z0-9_-]+))' # variable type (custom) )",
  "docstring_tokens": "Regular expression to match playbook variable ."
 },
 {
  "idx": "webquery-test-448",
  "doc": "python string match variable",
  "code": "def get_value_matched_by_regex(field_name, regex_matches, string):\n    \"\"\"Ensure value stored in regex group exists.\"\"\"\n    try:\n        value = regex_matches.group(field_name)\n        if value is not None:\n            return value\n    except IndexError:\n        pass\n\n    raise MissingFieldError(string, field_name)",
  "label": 0,
  "code_tokens": "def get_value_matched_by_regex ( field_name , regex_matches , string ) : try : value = regex_matches . group ( field_name ) if value is not None : return value except IndexError : pass raise MissingFieldError ( string , field_name )",
  "docstring_tokens": "Ensure value stored in regex group exists ."
 },
 {
  "idx": "webquery-test-449",
  "doc": "parse array of json objects python",
  "code": "def _read_json_file(self, json_file):\n        \"\"\" Helper function to read JSON file as OrderedDict \"\"\"\n\n        self.log.debug(\"Reading '%s' JSON file...\" % json_file)\n\n        with open(json_file, 'r') as f:\n            return json.load(f, object_pairs_hook=OrderedDict)",
  "label": 1,
  "code_tokens": "def _read_json_file ( self , json_file ) : self . log . debug ( \"Reading '%s' JSON file...\" % json_file ) with open ( json_file , 'r' ) as f : return json . load ( f , object_pairs_hook = OrderedDict )",
  "docstring_tokens": "Helper function to read JSON file as OrderedDict"
 },
 {
  "idx": "webquery-test-450",
  "doc": "parse array of json objects python",
  "code": "def get_jsonparsed_data(url):\n    \"\"\"Receive the content of ``url``, parse it as JSON and return the\n       object.\n    \"\"\"\n    response = urlopen(url)\n    data = response.read().decode('utf-8')\n    return json.loads(data)",
  "label": 1,
  "code_tokens": "def get_jsonparsed_data ( url ) : response = urlopen ( url ) data = response . read ( ) . decode ( 'utf-8' ) return json . loads ( data )",
  "docstring_tokens": "Receive the content of url parse it as JSON and return the object ."
 },
 {
  "idx": "webquery-test-451",
  "doc": "python create dictionary of 0s from list",
  "code": "def list2dict(lst):\n    \"\"\"Takes a list of (key,value) pairs and turns it into a dict.\"\"\"\n\n    dic = {}\n    for k,v in lst: dic[k] = v\n    return dic",
  "label": 1,
  "code_tokens": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic",
  "docstring_tokens": "Takes a list of ( key value ) pairs and turns it into a dict ."
 },
 {
  "idx": "webquery-test-452",
  "doc": "python create dictionary of 0s from list",
  "code": "def remove_falsy_values(counter: Mapping[Any, int]) -> Mapping[Any, int]:\n    \"\"\"Remove all values that are zero.\"\"\"\n    return {\n        label: count\n        for label, count in counter.items()\n        if count\n    }",
  "label": 0,
  "code_tokens": "def remove_falsy_values ( counter : Mapping [ Any , int ] ) -> Mapping [ Any , int ] : return { label : count for label , count in counter . items ( ) if count }",
  "docstring_tokens": "Remove all values that are zero ."
 },
 {
  "idx": "webquery-test-453",
  "doc": "python code to read data from next row and paste to previous cell",
  "code": "def wr_row_mergeall(self, worksheet, txtstr, fmt, row_idx):\n        \"\"\"Merge all columns and place text string in widened cell.\"\"\"\n        hdridxval = len(self.hdrs) - 1\n        worksheet.merge_range(row_idx, 0, row_idx, hdridxval, txtstr, fmt)\n        return row_idx + 1",
  "label": 0,
  "code_tokens": "def wr_row_mergeall ( self , worksheet , txtstr , fmt , row_idx ) : hdridxval = len ( self . hdrs ) - 1 worksheet . merge_range ( row_idx , 0 , row_idx , hdridxval , txtstr , fmt ) return row_idx + 1",
  "docstring_tokens": "Merge all columns and place text string in widened cell ."
 },
 {
  "idx": "webquery-test-454",
  "doc": "python code to read data from next row and paste to previous cell",
  "code": "def next_row(self):\n        \"\"\"Move to next row from currently selected row.\"\"\"\n        row = self.currentIndex().row()\n        rows = self.source_model.rowCount()\n        if row + 1 == rows:\n            row = -1\n        self.selectRow(row + 1)",
  "label": 1,
  "code_tokens": "def next_row ( self ) : row = self . currentIndex ( ) . row ( ) rows = self . source_model . rowCount ( ) if row + 1 == rows : row = - 1 self . selectRow ( row + 1 )",
  "docstring_tokens": "Move to next row from currently selected row ."
 },
 {
  "idx": "webquery-test-455",
  "doc": "send a variable to a file in python",
  "code": "def write_text(filename: str, text: str) -> None:\n    \"\"\"\n    Writes text to a file.\n    \"\"\"\n    with open(filename, 'w') as f:  # type: TextIO\n        print(text, file=f)",
  "label": 1,
  "code_tokens": "def write_text ( filename : str , text : str ) -> None : with open ( filename , 'w' ) as f : # type: TextIO print ( text , file = f )",
  "docstring_tokens": "Writes text to a file ."
 },
 {
  "idx": "webquery-test-456",
  "doc": "send a variable to a file in python",
  "code": "def write(file_name, data):\n    \"\"\"Encode and write a Hip file.\"\"\"\n    with open(file_name, 'w') as f:\n        f.write(encode(data))",
  "label": 1,
  "code_tokens": "def write ( file_name , data ) : with open ( file_name , 'w' ) as f : f . write ( encode ( data ) )",
  "docstring_tokens": "Encode and write a Hip file ."
 },
 {
  "idx": "webquery-test-457",
  "doc": "python string of ascii of printable characters",
  "code": "def strip_non_ascii(s):\n    \"\"\"\n    Returns the string without non-ASCII characters.\n\n    Parameters\n    ----------\n    string : string\n        A string that may contain non-ASCII characters.\n\n    Returns\n    -------\n    clean_string : string\n        A string that does not contain non-ASCII characters.\n\n    \"\"\"\n    stripped = (c for c in s if 0 < ord(c) < 127)\n    clean_string = u''.join(stripped)\n    return clean_string",
  "label": 0,
  "code_tokens": "def strip_non_ascii ( s ) : stripped = ( c for c in s if 0 < ord ( c ) < 127 ) clean_string = u'' . join ( stripped ) return clean_string",
  "docstring_tokens": "Returns the string without non - ASCII characters ."
 },
 {
  "idx": "webquery-test-458",
  "doc": "python string of ascii of printable characters",
  "code": "def strip_accents(s, encoding= 'utf-8'):\n    \"\"\"Strip characters with diacritics and return a flat ascii representation\"\"\"\n    if sys.version < '3':\n        if isinstance(s,unicode):\n           return unicodedata.normalize('NFKD', s).encode('ASCII', 'ignore')\n        else:\n           return unicodedata.normalize('NFKD', unicode(s,encoding)).encode('ASCII', 'ignore')\n    else:\n        if isinstance(s,bytes): s = str(s,encoding)\n        return str(unicodedata.normalize('NFKD', s).encode('ASCII', 'ignore'),'ascii')",
  "label": 1,
  "code_tokens": "def strip_accents ( s , encoding = 'utf-8' ) : if sys . version < '3' : if isinstance ( s , unicode ) : return unicodedata . normalize ( 'NFKD' , s ) . encode ( 'ASCII' , 'ignore' ) else : return unicodedata . normalize ( 'NFKD' , unicode ( s , encoding ) ) . encode ( 'ASCII' , 'ignore' ) else : if isinstance ( s , bytes ) : s = str ( s , encoding ) return str ( unicodedata . normalize ( 'NFKD' , s ) . encode ( 'ASCII' , 'ignore' ) , 'ascii' )",
  "docstring_tokens": "Strip characters with diacritics and return a flat ascii representation"
 },
 {
  "idx": "webquery-test-459",
  "doc": "python replace a symbol by space",
  "code": "def split(s):\n  \"\"\"Uses dynamic programming to infer the location of spaces in a string without spaces.\"\"\"\n  l = [_split(x) for x in _SPLIT_RE.split(s)]\n  return [item for sublist in l for item in sublist]",
  "label": 0,
  "code_tokens": "def split ( s ) : l = [ _split ( x ) for x in _SPLIT_RE . split ( s ) ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Uses dynamic programming to infer the location of spaces in a string without spaces ."
 },
 {
  "idx": "webquery-test-460",
  "doc": "python replace a symbol by space",
  "code": "def is_identifier(string):\n    \"\"\"Check if string could be a valid python identifier\n\n    :param string: string to be tested\n    :returns: True if string can be a python identifier, False otherwise\n    :rtype: bool\n    \"\"\"\n    matched = PYTHON_IDENTIFIER_RE.match(string)\n    return bool(matched) and not keyword.iskeyword(string)",
  "label": 0,
  "code_tokens": "def is_identifier ( string ) : matched = PYTHON_IDENTIFIER_RE . match ( string ) return bool ( matched ) and not keyword . iskeyword ( string )",
  "docstring_tokens": "Check if string could be a valid python identifier"
 },
 {
  "idx": "webquery-test-461",
  "doc": "python get items in a list",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-462",
  "doc": "python get items in a list",
  "code": "def serialize(self, value, **kwargs):\n        \"\"\"Serialize every item of the list.\"\"\"\n        return [self.item_type.serialize(val, **kwargs) for val in value]",
  "label": 0,
  "code_tokens": "def serialize ( self , value , * * kwargs ) : return [ self . item_type . serialize ( val , * * kwargs ) for val in value ]",
  "docstring_tokens": "Serialize every item of the list ."
 },
 {
  "idx": "webquery-test-463",
  "doc": "integer to binary string python",
  "code": "def string_to_int( s ):\n  \"\"\"Convert a string of bytes into an integer, as per X9.62.\"\"\"\n  result = 0\n  for c in s:\n    if not isinstance(c, int): c = ord( c )\n    result = 256 * result + c\n  return result",
  "label": 0,
  "code_tokens": "def string_to_int ( s ) : result = 0 for c in s : if not isinstance ( c , int ) : c = ord ( c ) result = 256 * result + c return result",
  "docstring_tokens": "Convert a string of bytes into an integer as per X9 . 62 ."
 },
 {
  "idx": "webquery-test-464",
  "doc": "integer to binary string python",
  "code": "def intToBin(i):\n    \"\"\" Integer to two bytes \"\"\"\n    # divide in two parts (bytes)\n    i1 = i % 256\n    i2 = int(i / 256)\n    # make string (little endian)\n    return i.to_bytes(2, byteorder='little')",
  "label": 0,
  "code_tokens": "def intToBin ( i ) : # divide in two parts (bytes) i1 = i % 256 i2 = int ( i / 256 ) # make string (little endian) return i . to_bytes ( 2 , byteorder = 'little' )",
  "docstring_tokens": "Integer to two bytes"
 },
 {
  "idx": "webquery-test-465",
  "doc": "flatten a 2d matrix to 1d matrix python",
  "code": "def im2mat(I):\n    \"\"\"Converts and image to matrix (one pixel per line)\"\"\"\n    return I.reshape((I.shape[0] * I.shape[1], I.shape[2]))",
  "label": 0,
  "code_tokens": "def im2mat ( I ) : return I . reshape ( ( I . shape [ 0 ] * I . shape [ 1 ] , I . shape [ 2 ] ) )",
  "docstring_tokens": "Converts and image to matrix ( one pixel per line )"
 },
 {
  "idx": "webquery-test-466",
  "doc": "flatten a 2d matrix to 1d matrix python",
  "code": "def transpose(table):\n    \"\"\"\n    transpose matrix\n    \"\"\"\n    t = []\n    for i in range(0, len(table[0])):\n        t.append([row[i] for row in table])\n    return t",
  "label": 0,
  "code_tokens": "def transpose ( table ) : t = [ ] for i in range ( 0 , len ( table [ 0 ] ) ) : t . append ( [ row [ i ] for row in table ] ) return t",
  "docstring_tokens": "transpose matrix"
 },
 {
  "idx": "webquery-test-467",
  "doc": "python flask image is empty",
  "code": "def is_empty(self):\n        \"\"\"Checks for an empty image.\n        \"\"\"\n        if(((self.channels == []) and (not self.shape == (0, 0))) or\n           ((not self.channels == []) and (self.shape == (0, 0)))):\n            raise RuntimeError(\"Channels-shape mismatch.\")\n        return self.channels == [] and self.shape == (0, 0)",
  "label": 1,
  "code_tokens": "def is_empty ( self ) : if ( ( ( self . channels == [ ] ) and ( not self . shape == ( 0 , 0 ) ) ) or ( ( not self . channels == [ ] ) and ( self . shape == ( 0 , 0 ) ) ) ) : raise RuntimeError ( \"Channels-shape mismatch.\" ) return self . channels == [ ] and self . shape == ( 0 , 0 )",
  "docstring_tokens": "Checks for an empty image ."
 },
 {
  "idx": "webquery-test-468",
  "doc": "python flask image is empty",
  "code": "def set_empty_text(self):\n        \"\"\"Display the empty text\n        \"\"\"\n        self.buffer.insert_with_tags_by_name(\n            self.buffer.get_start_iter(),\n            self.empty_text, 'empty-text')",
  "label": 0,
  "code_tokens": "def set_empty_text ( self ) : self . buffer . insert_with_tags_by_name ( self . buffer . get_start_iter ( ) , self . empty_text , 'empty-text' )",
  "docstring_tokens": "Display the empty text"
 },
 {
  "idx": "webquery-test-469",
  "doc": "python get windows bounding box",
  "code": "def calculate_bounding_box(data):\n    \"\"\"\n    Returns a 2 x m array indicating the min and max along each\n    dimension.\n    \"\"\"\n    mins = data.min(0)\n    maxes = data.max(0)\n    return mins, maxes",
  "label": 1,
  "code_tokens": "def calculate_bounding_box ( data ) : mins = data . min ( 0 ) maxes = data . max ( 0 ) return mins , maxes",
  "docstring_tokens": "Returns a 2 x m array indicating the min and max along each dimension ."
 },
 {
  "idx": "webquery-test-470",
  "doc": "python get windows bounding box",
  "code": "def calculate_bbox_area(bbox, rows, cols):\n    \"\"\"Calculate the area of a bounding box in pixels.\"\"\"\n    bbox = denormalize_bbox(bbox, rows, cols)\n    x_min, y_min, x_max, y_max = bbox[:4]\n    area = (x_max - x_min) * (y_max - y_min)\n    return area",
  "label": 1,
  "code_tokens": "def calculate_bbox_area ( bbox , rows , cols ) : bbox = denormalize_bbox ( bbox , rows , cols ) x_min , y_min , x_max , y_max = bbox [ : 4 ] area = ( x_max - x_min ) * ( y_max - y_min ) return area",
  "docstring_tokens": "Calculate the area of a bounding box in pixels ."
 },
 {
  "idx": "webquery-test-471",
  "doc": "merge two dictionary with the same key python",
  "code": "def dict_merge(set1, set2):\n    \"\"\"Joins two dictionaries.\"\"\"\n    return dict(list(set1.items()) + list(set2.items()))",
  "label": 1,
  "code_tokens": "def dict_merge ( set1 , set2 ) : return dict ( list ( set1 . items ( ) ) + list ( set2 . items ( ) ) )",
  "docstring_tokens": "Joins two dictionaries ."
 },
 {
  "idx": "webquery-test-472",
  "doc": "merge two dictionary with the same key python",
  "code": "def extend(a: dict, b: dict) -> dict:\n    \"\"\"Merge two dicts and return a new dict. Much like subclassing works.\"\"\"\n    res = a.copy()\n    res.update(b)\n    return res",
  "label": 1,
  "code_tokens": "def extend ( a : dict , b : dict ) -> dict : res = a . copy ( ) res . update ( b ) return res",
  "docstring_tokens": "Merge two dicts and return a new dict . Much like subclassing works ."
 },
 {
  "idx": "webquery-test-473",
  "doc": "show contents of a file in python",
  "code": "def get_file_string(filepath):\n    \"\"\"Get string from file.\"\"\"\n    with open(os.path.abspath(filepath)) as f:\n        return f.read()",
  "label": 1,
  "code_tokens": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )",
  "docstring_tokens": "Get string from file ."
 },
 {
  "idx": "webquery-test-474",
  "doc": "show contents of a file in python",
  "code": "def str_from_file(path):\n    \"\"\"\n    Return file contents as string.\n\n    \"\"\"\n    with open(path) as f:\n        s = f.read().strip()\n    return s",
  "label": 1,
  "code_tokens": "def str_from_file ( path ) : with open ( path ) as f : s = f . read ( ) . strip ( ) return s",
  "docstring_tokens": "Return file contents as string ."
 },
 {
  "idx": "webquery-test-475",
  "doc": "file exists but not opening python",
  "code": "def file_read(filename):\n    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\n    fobj = open(filename,'r');\n    source = fobj.read();\n    fobj.close()\n    return source",
  "label": 0,
  "code_tokens": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
  "docstring_tokens": "Read a file and close it . Returns the file source ."
 },
 {
  "idx": "webquery-test-476",
  "doc": "file exists but not opening python",
  "code": "def get_data_table(filename):\n  \"\"\"Returns a DataTable instance built from either the filename, or STDIN if filename is None.\"\"\"\n  with get_file_object(filename, \"r\") as rf:\n    return DataTable(list(csv.reader(rf)))",
  "label": 0,
  "code_tokens": "def get_data_table ( filename ) : with get_file_object ( filename , \"r\" ) as rf : return DataTable ( list ( csv . reader ( rf ) ) )",
  "docstring_tokens": "Returns a DataTable instance built from either the filename or STDIN if filename is None ."
 },
 {
  "idx": "webquery-test-477",
  "doc": "time delta of one month python",
  "code": "def last_midnight():\n    \"\"\"\n    return a datetime of last mid-night\n    \"\"\"\n    now = datetime.now()\n    return datetime(now.year, now.month, now.day)",
  "label": 0,
  "code_tokens": "def last_midnight ( ) : now = datetime . now ( ) return datetime ( now . year , now . month , now . day )",
  "docstring_tokens": "return a datetime of last mid - night"
 },
 {
  "idx": "webquery-test-478",
  "doc": "time delta of one month python",
  "code": "def test3():\n    \"\"\"Test the multiprocess\n    \"\"\"\n    import time\n    \n    p = MVisionProcess()\n    p.start()\n    time.sleep(5)\n    p.stop()",
  "label": 0,
  "code_tokens": "def test3 ( ) : import time p = MVisionProcess ( ) p . start ( ) time . sleep ( 5 ) p . stop ( )",
  "docstring_tokens": "Test the multiprocess"
 },
 {
  "idx": "webquery-test-479",
  "doc": "configparser python escape %",
  "code": "def _escape(self, s):\n        \"\"\"Escape bad characters for regular expressions.\n\n        Similar to `re.escape` but allows '%' to pass through.\n\n        \"\"\"\n        for ch, r_ch in self.ESCAPE_SETS:\n            s = s.replace(ch, r_ch)\n        return s",
  "label": 0,
  "code_tokens": "def _escape ( self , s ) : for ch , r_ch in self . ESCAPE_SETS : s = s . replace ( ch , r_ch ) return s",
  "docstring_tokens": "Escape bad characters for regular expressions ."
 },
 {
  "idx": "webquery-test-480",
  "doc": "configparser python escape %",
  "code": "def quote(self, s):\n        \"\"\"Return a shell-escaped version of the string s.\"\"\"\n\n        if six.PY2:\n            from pipes import quote\n        else:\n            from shlex import quote\n\n        return quote(s)",
  "label": 0,
  "code_tokens": "def quote ( self , s ) : if six . PY2 : from pipes import quote else : from shlex import quote return quote ( s )",
  "docstring_tokens": "Return a shell - escaped version of the string s ."
 },
 {
  "idx": "webquery-test-481",
  "doc": "python create list from lists",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-482",
  "doc": "python create list from lists",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 0,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-483",
  "doc": "python multiprocessing pool join time out",
  "code": "def Join(self):\n    \"\"\"Waits until all outstanding tasks are completed.\"\"\"\n\n    for _ in range(self.JOIN_TIMEOUT_DECISECONDS):\n      if self._queue.empty() and not self.busy_threads:\n        return\n      time.sleep(0.1)\n\n    raise ValueError(\"Timeout during Join() for threadpool %s.\" % self.name)",
  "label": 1,
  "code_tokens": "def Join ( self ) : for _ in range ( self . JOIN_TIMEOUT_DECISECONDS ) : if self . _queue . empty ( ) and not self . busy_threads : return time . sleep ( 0.1 ) raise ValueError ( \"Timeout during Join() for threadpool %s.\" % self . name )",
  "docstring_tokens": "Waits until all outstanding tasks are completed ."
 },
 {
  "idx": "webquery-test-484",
  "doc": "python multiprocessing pool join time out",
  "code": "def terminate_pool(self):\n        \"\"\"Terminate and close the multiprocessing pool if necessary.\"\"\"\n\n        if self.pool is not None:\n            self.pool.terminate()\n            self.pool.join()\n            del(self.pool)\n            self.pool = None",
  "label": 0,
  "code_tokens": "def terminate_pool ( self ) : if self . pool is not None : self . pool . terminate ( ) self . pool . join ( ) del ( self . pool ) self . pool = None",
  "docstring_tokens": "Terminate and close the multiprocessing pool if necessary ."
 },
 {
  "idx": "webquery-test-485",
  "doc": "python how to add a vaiable to a url",
  "code": "def url_fix_common_typos (url):\n    \"\"\"Fix common typos in given URL like forgotten colon.\"\"\"\n    if url.startswith(\"http//\"):\n        url = \"http://\" + url[6:]\n    elif url.startswith(\"https//\"):\n        url = \"https://\" + url[7:]\n    return url",
  "label": 0,
  "code_tokens": "def url_fix_common_typos ( url ) : if url . startswith ( \"http//\" ) : url = \"http://\" + url [ 6 : ] elif url . startswith ( \"https//\" ) : url = \"https://\" + url [ 7 : ] return url",
  "docstring_tokens": "Fix common typos in given URL like forgotten colon ."
 },
 {
  "idx": "webquery-test-486",
  "doc": "python how to add a vaiable to a url",
  "code": "def _build_url(self, shorten=True):\n        \"\"\"Build the url for a cable ratings page\"\"\"\n        self.url = URL_FORMAT.format(*self._get_url_params(shorten=shorten))",
  "label": 0,
  "code_tokens": "def _build_url ( self , shorten = True ) : self . url = URL_FORMAT . format ( * self . _get_url_params ( shorten = shorten ) )",
  "docstring_tokens": "Build the url for a cable ratings page"
 },
 {
  "idx": "webquery-test-487",
  "doc": "element wise product in python",
  "code": "def dotproduct(X, Y):\n    \"\"\"Return the sum of the element-wise product of vectors x and y.\n    >>> dotproduct([1, 2, 3], [1000, 100, 10])\n    1230\n    \"\"\"\n    return sum([x * y for x, y in zip(X, Y)])",
  "label": 1,
  "code_tokens": "def dotproduct ( X , Y ) : return sum ( [ x * y for x , y in zip ( X , Y ) ] )",
  "docstring_tokens": "Return the sum of the element - wise product of vectors x and y . >>> dotproduct ( [ 1 2 3 ] [ 1000 100 10 ] ) 1230"
 },
 {
  "idx": "webquery-test-488",
  "doc": "element wise product in python",
  "code": "def dot_product(self, other):\n        \"\"\" Return the dot product of the given vectors. \"\"\"\n        return self.x * other.x + self.y * other.y",
  "label": 0,
  "code_tokens": "def dot_product ( self , other ) : return self . x * other . x + self . y * other . y",
  "docstring_tokens": "Return the dot product of the given vectors ."
 },
 {
  "idx": "webquery-test-489",
  "doc": "in python how to sort a string without using inbuilt sort",
  "code": "def natural_sort(list_to_sort: Iterable[str]) -> List[str]:\n    \"\"\"\n    Sorts a list of strings case insensitively as well as numerically.\n\n    For example: ['a1', 'A2', 'a3', 'A11', 'a22']\n\n    To sort a list in place, don't call this method, which makes a copy. Instead, do this:\n\n    my_list.sort(key=natural_keys)\n\n    :param list_to_sort: the list being sorted\n    :return: the list sorted naturally\n    \"\"\"\n    return sorted(list_to_sort, key=natural_keys)",
  "label": 0,
  "code_tokens": "def natural_sort ( list_to_sort : Iterable [ str ] ) -> List [ str ] : return sorted ( list_to_sort , key = natural_keys )",
  "docstring_tokens": "Sorts a list of strings case insensitively as well as numerically ."
 },
 {
  "idx": "webquery-test-490",
  "doc": "in python how to sort a string without using inbuilt sort",
  "code": "def transcript_sort_key(transcript):\n    \"\"\"\n    Key function used to sort transcripts. Taking the negative of\n    protein sequence length and nucleotide sequence length so that\n    the transcripts with longest sequences come first in the list. This couldn't\n    be accomplished with `reverse=True` since we're also sorting by\n    transcript name (which places TP53-001 before TP53-002).\n    \"\"\"\n    return (\n        -len(transcript.protein_sequence),\n        -len(transcript.sequence),\n        transcript.name\n    )",
  "label": 0,
  "code_tokens": "def transcript_sort_key ( transcript ) : return ( - len ( transcript . protein_sequence ) , - len ( transcript . sequence ) , transcript . name )",
  "docstring_tokens": "Key function used to sort transcripts . Taking the negative of protein sequence length and nucleotide sequence length so that the transcripts with longest sequences come first in the list . This couldn t be accomplished with reverse = True since we re also sorting by transcript name ( which places TP53 - 001 before TP53 - 002 ) ."
 },
 {
  "idx": "webquery-test-491",
  "doc": "how to decode a list utf inpython",
  "code": "def _try_decode_list(content):\n        \"\"\"Decode content of a list.\n\n        :param list|tuple content:\n        :return:\n        \"\"\"\n        result = list()\n        for value in content:\n            result.append(try_utf8_decode(value))\n        return result",
  "label": 1,
  "code_tokens": "def _try_decode_list ( content ) : result = list ( ) for value in content : result . append ( try_utf8_decode ( value ) ) return result",
  "docstring_tokens": "Decode content of a list ."
 },
 {
  "idx": "webquery-test-492",
  "doc": "how to decode a list utf inpython",
  "code": "async def load_unicode(reader):\n    \"\"\"\n    Loads UTF8 string\n    :param reader:\n    :return:\n    \"\"\"\n    ivalue = await load_uvarint(reader)\n    fvalue = bytearray(ivalue)\n    await reader.areadinto(fvalue)\n    return str(fvalue, 'utf8')",
  "label": 0,
  "code_tokens": "async def load_unicode ( reader ) : ivalue = await load_uvarint ( reader ) fvalue = bytearray ( ivalue ) await reader . areadinto ( fvalue ) return str ( fvalue , 'utf8' )",
  "docstring_tokens": "Loads UTF8 string : param reader : : return :"
 },
 {
  "idx": "webquery-test-493",
  "doc": "command in python to get to server",
  "code": "def __send_request(self, url, params=None):\n        \"\"\"Send request\"\"\"\n\n        r = self.fetch(url, payload=params)\n        return r.text",
  "label": 1,
  "code_tokens": "def __send_request ( self , url , params = None ) : r = self . fetch ( url , payload = params ) return r . text",
  "docstring_tokens": "Send request"
 },
 {
  "idx": "webquery-test-494",
  "doc": "command in python to get to server",
  "code": "def web(host, port):\n    \"\"\"Start web application\"\"\"\n    from .webserver.web import get_app\n    get_app().run(host=host, port=port)",
  "label": 1,
  "code_tokens": "def web ( host , port ) : from . webserver . web import get_app get_app ( ) . run ( host = host , port = port )",
  "docstring_tokens": "Start web application"
 },
 {
  "idx": "webquery-test-495",
  "doc": "distance formula in python speed time",
  "code": "def skip_connection_distance(a, b):\n    \"\"\"The distance between two skip-connections.\"\"\"\n    if a[2] != b[2]:\n        return 1.0\n    len_a = abs(a[1] - a[0])\n    len_b = abs(b[1] - b[0])\n    return (abs(a[0] - b[0]) + abs(len_a - len_b)) / (max(a[0], b[0]) + max(len_a, len_b))",
  "label": 1,
  "code_tokens": "def skip_connection_distance ( a , b ) : if a [ 2 ] != b [ 2 ] : return 1.0 len_a = abs ( a [ 1 ] - a [ 0 ] ) len_b = abs ( b [ 1 ] - b [ 0 ] ) return ( abs ( a [ 0 ] - b [ 0 ] ) + abs ( len_a - len_b ) ) / ( max ( a [ 0 ] , b [ 0 ] ) + max ( len_a , len_b ) )",
  "docstring_tokens": "The distance between two skip - connections ."
 },
 {
  "idx": "webquery-test-496",
  "doc": "distance formula in python speed time",
  "code": "def vector_distance(a, b):\n    \"\"\"The Euclidean distance between two vectors.\"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    return np.linalg.norm(a - b)",
  "label": 1,
  "code_tokens": "def vector_distance ( a , b ) : a = np . array ( a ) b = np . array ( b ) return np . linalg . norm ( a - b )",
  "docstring_tokens": "The Euclidean distance between two vectors ."
 },
 {
  "idx": "webquery-test-497",
  "doc": "python get item in list with most",
  "code": "def _most_common(iterable):\n    \"\"\"Returns the most common element in `iterable`.\"\"\"\n    data = Counter(iterable)\n    return max(data, key=data.__getitem__)",
  "label": 1,
  "code_tokens": "def _most_common ( iterable ) : data = Counter ( iterable ) return max ( data , key = data . __getitem__ )",
  "docstring_tokens": "Returns the most common element in iterable ."
 },
 {
  "idx": "webquery-test-498",
  "doc": "python get item in list with most",
  "code": "def unique_element(ll):\n    \"\"\" returns unique elements from a list preserving the original order \"\"\"\n    seen = {}\n    result = []\n    for item in ll:\n        if item in seen:\n            continue\n        seen[item] = 1\n        result.append(item)\n    return result",
  "label": 0,
  "code_tokens": "def unique_element ( ll ) : seen = { } result = [ ] for item in ll : if item in seen : continue seen [ item ] = 1 result . append ( item ) return result",
  "docstring_tokens": "returns unique elements from a list preserving the original order"
 },
 {
  "idx": "webquery-test-499",
  "doc": "how to pick the top 3 values in a table python",
  "code": "def qth_pw(self, q):\n        \"\"\"\n        returns the qth most probable element in the dawg.\n        \"\"\"\n        return heapq.nlargest(q + 2, self._T.iteritems(),\n                              key=operator.itemgetter(1))[-1]",
  "label": 0,
  "code_tokens": "def qth_pw ( self , q ) : return heapq . nlargest ( q + 2 , self . _T . iteritems ( ) , key = operator . itemgetter ( 1 ) ) [ - 1 ]",
  "docstring_tokens": "returns the qth most probable element in the dawg ."
 },
 {
  "idx": "webquery-test-500",
  "doc": "how to pick the top 3 values in a table python",
  "code": "def nameTuple(s: Influence) -> Tuple[str, str]:\n    \"\"\" Returns a 2-tuple consisting of the top groundings of the subj and obj\n    of an Influence statement. \"\"\"\n    return top_grounding(s.subj), top_grounding(s.obj)",
  "label": 0,
  "code_tokens": "def nameTuple ( s : Influence ) -> Tuple [ str , str ] : return top_grounding ( s . subj ) , top_grounding ( s . obj )",
  "docstring_tokens": "Returns a 2 - tuple consisting of the top groundings of the subj and obj of an Influence statement ."
 },
 {
  "idx": "webquery-test-501",
  "doc": "select items by indexes in list python",
  "code": "def equal(list1, list2):\n    \"\"\" takes flags returns indexes of True values \"\"\"\n    return [item1 == item2 for item1, item2 in broadcast_zip(list1, list2)]",
  "label": 0,
  "code_tokens": "def equal ( list1 , list2 ) : return [ item1 == item2 for item1 , item2 in broadcast_zip ( list1 , list2 ) ]",
  "docstring_tokens": "takes flags returns indexes of True values"
 },
 {
  "idx": "webquery-test-502",
  "doc": "select items by indexes in list python",
  "code": "def get_feature_order(dataset, features):\n    \"\"\" Returns a list with the order that features requested appear in\n    dataset \"\"\"\n    all_features = dataset.get_feature_names()\n\n    i = [all_features.index(f) for f in features]\n\n    return i",
  "label": 0,
  "code_tokens": "def get_feature_order ( dataset , features ) : all_features = dataset . get_feature_names ( ) i = [ all_features . index ( f ) for f in features ] return i",
  "docstring_tokens": "Returns a list with the order that features requested appear in dataset"
 },
 {
  "idx": "webquery-test-503",
  "doc": "draw a circle in python pygame",
  "code": "def draw_circle(self, color, world_loc, world_radius, thickness=0):\n    \"\"\"Draw a circle using world coordinates and radius.\"\"\"\n    if world_radius > 0:\n      center = self.world_to_surf.fwd_pt(world_loc).round()\n      radius = max(1, int(self.world_to_surf.fwd_dist(world_radius)))\n      pygame.draw.circle(self.surf, color, center, radius,\n                         thickness if thickness < radius else 0)",
  "label": 1,
  "code_tokens": "def draw_circle ( self , color , world_loc , world_radius , thickness = 0 ) : if world_radius > 0 : center = self . world_to_surf . fwd_pt ( world_loc ) . round ( ) radius = max ( 1 , int ( self . world_to_surf . fwd_dist ( world_radius ) ) ) pygame . draw . circle ( self . surf , color , center , radius , thickness if thickness < radius else 0 )",
  "docstring_tokens": "Draw a circle using world coordinates and radius ."
 },
 {
  "idx": "webquery-test-504",
  "doc": "draw a circle in python pygame",
  "code": "def arc_negative(self, x, y, radius, start_angle, end_angle):\n        \"\"\"draw arc going clockwise from start_angle to end_angle\"\"\"\n        self._add_instruction(\"arc_negative\", x, y, radius, start_angle, end_angle)",
  "label": 0,
  "code_tokens": "def arc_negative ( self , x , y , radius , start_angle , end_angle ) : self . _add_instruction ( \"arc_negative\" , x , y , radius , start_angle , end_angle )",
  "docstring_tokens": "draw arc going clockwise from start_angle to end_angle"
 },
 {
  "idx": "webquery-test-505",
  "doc": "replace values in python string",
  "code": "def myreplace(astr, thefind, thereplace):\n    \"\"\"in string astr replace all occurences of thefind with thereplace\"\"\"\n    alist = astr.split(thefind)\n    new_s = alist.split(thereplace)\n    return new_s",
  "label": 0,
  "code_tokens": "def myreplace ( astr , thefind , thereplace ) : alist = astr . split ( thefind ) new_s = alist . split ( thereplace ) return new_s",
  "docstring_tokens": "in string astr replace all occurences of thefind with thereplace"
 },
 {
  "idx": "webquery-test-506",
  "doc": "replace values in python string",
  "code": "def replace(s, replace):\n    \"\"\"Replace multiple values in a string\"\"\"\n    for r in replace:\n        s = s.replace(*r)\n    return s",
  "label": 1,
  "code_tokens": "def replace ( s , replace ) : for r in replace : s = s . replace ( * r ) return s",
  "docstring_tokens": "Replace multiple values in a string"
 },
 {
  "idx": "webquery-test-507",
  "doc": "python return string with first letter of each word in lower case",
  "code": "def to_pascal_case(s):\n    \"\"\"Transform underscore separated string to pascal case\n\n    \"\"\"\n    return re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), s.capitalize())",
  "label": 0,
  "code_tokens": "def to_pascal_case ( s ) : return re . sub ( r'(?!^)_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , s . capitalize ( ) )",
  "docstring_tokens": "Transform underscore separated string to pascal case"
 },
 {
  "idx": "webquery-test-508",
  "doc": "python return string with first letter of each word in lower case",
  "code": "def to_capitalized_camel_case(snake_case_string):\n    \"\"\"\n    Convert a string from snake case to camel case with the first letter capitalized. For example, \"some_var\"\n    would become \"SomeVar\".\n\n    :param snake_case_string: Snake-cased string to convert to camel case.\n    :returns: Camel-cased version of snake_case_string.\n    \"\"\"\n    parts = snake_case_string.split('_')\n    return ''.join([i.title() for i in parts])",
  "label": 0,
  "code_tokens": "def to_capitalized_camel_case ( snake_case_string ) : parts = snake_case_string . split ( '_' ) return '' . join ( [ i . title ( ) for i in parts ] )",
  "docstring_tokens": "Convert a string from snake case to camel case with the first letter capitalized . For example some_var would become SomeVar ."
 },
 {
  "idx": "webquery-test-509",
  "doc": "make sure two dictionaries are same python",
  "code": "def dict_merge(set1, set2):\n    \"\"\"Joins two dictionaries.\"\"\"\n    return dict(list(set1.items()) + list(set2.items()))",
  "label": 0,
  "code_tokens": "def dict_merge ( set1 , set2 ) : return dict ( list ( set1 . items ( ) ) + list ( set2 . items ( ) ) )",
  "docstring_tokens": "Joins two dictionaries ."
 },
 {
  "idx": "webquery-test-510",
  "doc": "make sure two dictionaries are same python",
  "code": "def intersect(d1, d2):\n    \"\"\"Intersect dictionaries d1 and d2 by key *and* value.\"\"\"\n    return dict((k, d1[k]) for k in d1 if k in d2 and d1[k] == d2[k])",
  "label": 0,
  "code_tokens": "def intersect ( d1 , d2 ) : return dict ( ( k , d1 [ k ] ) for k in d1 if k in d2 and d1 [ k ] == d2 [ k ] )",
  "docstring_tokens": "Intersect dictionaries d1 and d2 by key * and * value ."
 },
 {
  "idx": "webquery-test-511",
  "doc": "delete rows with null in python",
  "code": "def safe_delete(filename):\n  \"\"\"Delete a file safely. If it's not present, no-op.\"\"\"\n  try:\n    os.unlink(filename)\n  except OSError as e:\n    if e.errno != errno.ENOENT:\n      raise",
  "label": 0,
  "code_tokens": "def safe_delete ( filename ) : try : os . unlink ( filename ) except OSError as e : if e . errno != errno . ENOENT : raise",
  "docstring_tokens": "Delete a file safely . If it s not present no - op ."
 },
 {
  "idx": "webquery-test-512",
  "doc": "delete rows with null in python",
  "code": "def remove_if_exists(filename):\n    \"\"\" Remove file.\n\n    This is like :func:`os.remove` (or :func:`os.unlink`), except that no\n    error is raised if the file does not exist.\n\n    \"\"\"\n    try:\n        os.unlink(filename)\n    except OSError as ex:\n        if ex.errno != errno.ENOENT:\n            raise",
  "label": 0,
  "code_tokens": "def remove_if_exists ( filename ) : try : os . unlink ( filename ) except OSError as ex : if ex . errno != errno . ENOENT : raise",
  "docstring_tokens": "Remove file ."
 },
 {
  "idx": "webquery-test-513",
  "doc": "how to print with printf python",
  "code": "def good(txt):\n    \"\"\"Print, emphasized 'good', the given 'txt' message\"\"\"\n\n    print(\"%s# %s%s%s\" % (PR_GOOD_CC, get_time_stamp(), txt, PR_NC))\n    sys.stdout.flush()",
  "label": 0,
  "code_tokens": "def good ( txt ) : print ( \"%s# %s%s%s\" % ( PR_GOOD_CC , get_time_stamp ( ) , txt , PR_NC ) ) sys . stdout . flush ( )",
  "docstring_tokens": "Print emphasized good the given txt message"
 },
 {
  "idx": "webquery-test-514",
  "doc": "how to print with printf python",
  "code": "def out(self, output, newline=True):\n        \"\"\"Outputs a string to the console (stdout).\"\"\"\n        click.echo(output, nl=newline)",
  "label": 0,
  "code_tokens": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )",
  "docstring_tokens": "Outputs a string to the console ( stdout ) ."
 },
 {
  "idx": "webquery-test-515",
  "doc": "how to set the axis in the scatter python",
  "code": "def set_scalebar_for_all(self, row_column_list=None,\n                             location='lower right'):\n        \"\"\"Show marker area scale for subplots.\n\n        :param row_column_list: a list containing (row, column) tuples to\n            specify the subplots, or None to indicate *all* subplots.\n        :param location: the location of the label inside the plot.  May\n            be one of 'center', 'upper right', 'lower right', 'upper\n            left', 'lower left'.\n\n        \"\"\"\n        if row_column_list is None:\n            for subplot in self.subplots:\n                subplot.set_scalebar(location)\n        else:\n            for row, column in row_column_list:\n                subplot = self.get_subplot_at(row, column)\n                subplot.set_scalebar(location)",
  "label": 0,
  "code_tokens": "def set_scalebar_for_all ( self , row_column_list = None , location = 'lower right' ) : if row_column_list is None : for subplot in self . subplots : subplot . set_scalebar ( location ) else : for row , column in row_column_list : subplot = self . get_subplot_at ( row , column ) subplot . set_scalebar ( location )",
  "docstring_tokens": "Show marker area scale for subplots ."
 },
 {
  "idx": "webquery-test-516",
  "doc": "how to set the axis in the scatter python",
  "code": "def ytickvals(self, values, index=1):\n        \"\"\"Set the tick values.\n\n        Parameters\n        ----------\n        values : array-like\n\n        Returns\n        -------\n        Chart\n\n        \"\"\"\n        self.layout['yaxis' + str(index)]['tickvals'] = values\n        return self",
  "label": 0,
  "code_tokens": "def ytickvals ( self , values , index = 1 ) : self . layout [ 'yaxis' + str ( index ) ] [ 'tickvals' ] = values return self",
  "docstring_tokens": "Set the tick values ."
 },
 {
  "idx": "webquery-test-517",
  "doc": "read 2 bytes data in python",
  "code": "def read_bytes(fo, writer_schema=None, reader_schema=None):\n    \"\"\"Bytes are encoded as a long followed by that many bytes of data.\"\"\"\n    size = read_long(fo)\n    return fo.read(size)",
  "label": 0,
  "code_tokens": "def read_bytes ( fo , writer_schema = None , reader_schema = None ) : size = read_long ( fo ) return fo . read ( size )",
  "docstring_tokens": "Bytes are encoded as a long followed by that many bytes of data ."
 },
 {
  "idx": "webquery-test-518",
  "doc": "read 2 bytes data in python",
  "code": "def be_array_from_bytes(fmt, data):\n    \"\"\"\n    Reads an array from bytestring with big-endian data.\n    \"\"\"\n    arr = array.array(str(fmt), data)\n    return fix_byteorder(arr)",
  "label": 0,
  "code_tokens": "def be_array_from_bytes ( fmt , data ) : arr = array . array ( str ( fmt ) , data ) return fix_byteorder ( arr )",
  "docstring_tokens": "Reads an array from bytestring with big - endian data ."
 },
 {
  "idx": "webquery-test-519",
  "doc": "change png pil image to white background stackoverflow python",
  "code": "def hflip(img):\n    \"\"\"Horizontally flip the given PIL Image.\n\n    Args:\n        img (PIL Image): Image to be flipped.\n\n    Returns:\n        PIL Image:  Horizontall flipped image.\n    \"\"\"\n    if not _is_pil_image(img):\n        raise TypeError('img should be PIL Image. Got {}'.format(type(img)))\n\n    return img.transpose(Image.FLIP_LEFT_RIGHT)",
  "label": 0,
  "code_tokens": "def hflip ( img ) : if not _is_pil_image ( img ) : raise TypeError ( 'img should be PIL Image. Got {}' . format ( type ( img ) ) ) return img . transpose ( Image . FLIP_LEFT_RIGHT )",
  "docstring_tokens": "Horizontally flip the given PIL Image ."
 },
 {
  "idx": "webquery-test-520",
  "doc": "change png pil image to white background stackoverflow python",
  "code": "def add_bg(img, padding, color=COL_WHITE):\n    \"\"\"\n    Adds a padding to the given image as background of specified color\n\n    :param img: Input image.\n    :param padding: constant padding around the image.\n    :param color: background color that needs to filled for the newly padded region.\n    :return: New image with background.\n    \"\"\"\n    img = gray3(img)\n    h, w, d = img.shape\n    new_img = np.ones((h + 2*padding, w + 2*padding, d)) * color[:d]\n    new_img = new_img.astype(np.uint8)\n    set_img_box(new_img, (padding, padding, w, h), img)\n    return new_img",
  "label": 1,
  "code_tokens": "def add_bg ( img , padding , color = COL_WHITE ) : img = gray3 ( img ) h , w , d = img . shape new_img = np . ones ( ( h + 2 * padding , w + 2 * padding , d ) ) * color [ : d ] new_img = new_img . astype ( np . uint8 ) set_img_box ( new_img , ( padding , padding , w , h ) , img ) return new_img",
  "docstring_tokens": "Adds a padding to the given image as background of specified color"
 },
 {
  "idx": "webquery-test-521",
  "doc": "current time in python django",
  "code": "def get_basket_items(request):\r\n    \"\"\"\r\n    Get all items in the basket\r\n    \"\"\"\r\n    bid = basket_id(request)\r\n    return BasketItem.objects.filter(basket_id=bid), bid",
  "label": 0,
  "code_tokens": "def get_basket_items ( request ) : bid = basket_id ( request ) return BasketItem . objects . filter ( basket_id = bid ) , bid",
  "docstring_tokens": "Get all items in the basket"
 },
 {
  "idx": "webquery-test-522",
  "doc": "current time in python django",
  "code": "def getDjangoObjects(context):\n    \"\"\"\n    Returns a reference to the C{django_objects} on the context. If it doesn't\n    exist then it is created.\n\n    @rtype: Instance of L{DjangoReferenceCollection}\n    @since: 0.5\n    \"\"\"\n    c = context.extra\n    k = 'django_objects'\n\n    try:\n        return c[k]\n    except KeyError:\n        c[k] = DjangoReferenceCollection()\n\n    return c[k]",
  "label": 0,
  "code_tokens": "def getDjangoObjects ( context ) : c = context . extra k = 'django_objects' try : return c [ k ] except KeyError : c [ k ] = DjangoReferenceCollection ( ) return c [ k ]",
  "docstring_tokens": "Returns a reference to the C { django_objects } on the context . If it doesn t exist then it is created ."
 },
 {
  "idx": "webquery-test-523",
  "doc": "python3 how to delete repeat from list",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 1,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-524",
  "doc": "python3 how to delete repeat from list",
  "code": "def remove_list_duplicates(lista, unique=False):\n    \"\"\"\n    Remove duplicated elements in a list.\n    Args:\n        lista: List with elements to clean duplicates.\n    \"\"\"\n    result = []\n    allready = []\n\n    for elem in lista:\n        if elem not in result:\n            result.append(elem)\n        else:\n            allready.append(elem)\n\n    if unique:\n        for elem in allready:\n            result = list(filter((elem).__ne__, result))\n\n    return result",
  "label": 1,
  "code_tokens": "def remove_list_duplicates ( lista , unique = False ) : result = [ ] allready = [ ] for elem in lista : if elem not in result : result . append ( elem ) else : allready . append ( elem ) if unique : for elem in allready : result = list ( filter ( ( elem ) . __ne__ , result ) ) return result",
  "docstring_tokens": "Remove duplicated elements in a list . Args : lista : List with elements to clean duplicates ."
 },
 {
  "idx": "webquery-test-525",
  "doc": "python excel add values to column",
  "code": "def addValue(self, _, value):\n    \"\"\"Adds a value from the given source.\"\"\"\n    self.total += self._dataFormat.getValue(value)",
  "label": 0,
  "code_tokens": "def addValue ( self , _ , value ) : self . total += self . _dataFormat . getValue ( value )",
  "docstring_tokens": "Adds a value from the given source ."
 },
 {
  "idx": "webquery-test-526",
  "doc": "python excel add values to column",
  "code": "def unique(self, values):\n        \"\"\"Place each entry in a table, while asserting that each entry occurs once\"\"\"\n        _, count = self.count()\n        if not np.array_equiv(count, 1):\n            raise ValueError(\"Not every entry in the table is assigned a unique value\")\n        return self.sum(values)",
  "label": 0,
  "code_tokens": "def unique ( self , values ) : _ , count = self . count ( ) if not np . array_equiv ( count , 1 ) : raise ValueError ( \"Not every entry in the table is assigned a unique value\" ) return self . sum ( values )",
  "docstring_tokens": "Place each entry in a table while asserting that each entry occurs once"
 },
 {
  "idx": "webquery-test-527",
  "doc": "python split with any of multiple delimitrs",
  "code": "def make_regex(separator):\n    \"\"\"Utility function to create regexp for matching escaped separators\n    in strings.\n\n    \"\"\"\n    return re.compile(r'(?:' + re.escape(separator) + r')?((?:[^' +\n                      re.escape(separator) + r'\\\\]|\\\\.)+)')",
  "label": 0,
  "code_tokens": "def make_regex ( separator ) : return re . compile ( r'(?:' + re . escape ( separator ) + r')?((?:[^' + re . escape ( separator ) + r'\\\\]|\\\\.)+)' )",
  "docstring_tokens": "Utility function to create regexp for matching escaped separators in strings ."
 },
 {
  "idx": "webquery-test-528",
  "doc": "python split with any of multiple delimitrs",
  "code": "def split_on(s, sep=\" \"):\n    \"\"\"Split s by sep, unless it's inside a quote.\"\"\"\n    pattern = '''((?:[^%s\"']|\"[^\"]*\"|'[^']*')+)''' % sep\n\n    return [_strip_speechmarks(t) for t in re.split(pattern, s)[1::2]]",
  "label": 0,
  "code_tokens": "def split_on ( s , sep = \" \" ) : pattern = '''((?:[^%s\"']|\"[^\"]*\"|'[^']*')+)''' % sep return [ _strip_speechmarks ( t ) for t in re . split ( pattern , s ) [ 1 : : 2 ] ]",
  "docstring_tokens": "Split s by sep unless it s inside a quote ."
 },
 {
  "idx": "webquery-test-529",
  "doc": "how to revert a timestamp back to a string in python",
  "code": "def timestamp_to_datetime(cls, dt, dt_format=DATETIME_FORMAT):\n        \"\"\"Convert unix timestamp to human readable date/time string\"\"\"\n        return cls.convert_datetime(cls.get_datetime(dt), dt_format=dt_format)",
  "label": 1,
  "code_tokens": "def timestamp_to_datetime ( cls , dt , dt_format = DATETIME_FORMAT ) : return cls . convert_datetime ( cls . get_datetime ( dt ) , dt_format = dt_format )",
  "docstring_tokens": "Convert unix timestamp to human readable date / time string"
 },
 {
  "idx": "webquery-test-530",
  "doc": "how to revert a timestamp back to a string in python",
  "code": "def ms_to_datetime(ms):\n    \"\"\"\n    Converts a millisecond accuracy timestamp to a datetime\n    \"\"\"\n    dt = datetime.datetime.utcfromtimestamp(ms / 1000)\n    return dt.replace(microsecond=(ms % 1000) * 1000).replace(tzinfo=pytz.utc)",
  "label": 1,
  "code_tokens": "def ms_to_datetime ( ms ) : dt = datetime . datetime . utcfromtimestamp ( ms / 1000 ) return dt . replace ( microsecond = ( ms % 1000 ) * 1000 ) . replace ( tzinfo = pytz . utc )",
  "docstring_tokens": "Converts a millisecond accuracy timestamp to a datetime"
 },
 {
  "idx": "webquery-test-531",
  "doc": "python run command and close it",
  "code": "def close( self ):\n        \"\"\"\n        Close the db and release memory\n        \"\"\"\n        if self.db is not None:\n            self.db.commit()\n            self.db.close()\n            self.db = None\n\n        return",
  "label": 0,
  "code_tokens": "def close ( self ) : if self . db is not None : self . db . commit ( ) self . db . close ( ) self . db = None return",
  "docstring_tokens": "Close the db and release memory"
 },
 {
  "idx": "webquery-test-532",
  "doc": "python run command and close it",
  "code": "def kill_mprocess(process):\n    \"\"\"kill process\n    Args:\n        process - Popen object for process\n    \"\"\"\n    if process and proc_alive(process):\n        process.terminate()\n        process.communicate()\n    return not proc_alive(process)",
  "label": 0,
  "code_tokens": "def kill_mprocess ( process ) : if process and proc_alive ( process ) : process . terminate ( ) process . communicate ( ) return not proc_alive ( process )",
  "docstring_tokens": "kill process Args : process - Popen object for process"
 },
 {
  "idx": "webquery-test-533",
  "doc": "python add dictionary key to a list",
  "code": "def list2dict(lst):\n    \"\"\"Takes a list of (key,value) pairs and turns it into a dict.\"\"\"\n\n    dic = {}\n    for k,v in lst: dic[k] = v\n    return dic",
  "label": 0,
  "code_tokens": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic",
  "docstring_tokens": "Takes a list of ( key value ) pairs and turns it into a dict ."
 },
 {
  "idx": "webquery-test-534",
  "doc": "python add dictionary key to a list",
  "code": "def list_of_lists_to_dict(l):\n    \"\"\" Convert list of key,value lists to dict\n\n    [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]\n    {'id': [1, 2, 3], 'foo': [4]}\n    \"\"\"\n    d = {}\n    for key, val in l:\n        d.setdefault(key, []).append(val)\n    return d",
  "label": 0,
  "code_tokens": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d",
  "docstring_tokens": "Convert list of key value lists to dict"
 },
 {
  "idx": "webquery-test-535",
  "doc": "how to keep calling a function forever in python",
  "code": "def main(idle):\n    \"\"\"Any normal python logic which runs a loop. Can take arguments.\"\"\"\n    while True:\n\n        LOG.debug(\"Sleeping for {0} seconds.\".format(idle))\n        time.sleep(idle)",
  "label": 0,
  "code_tokens": "def main ( idle ) : while True : LOG . debug ( \"Sleeping for {0} seconds.\" . format ( idle ) ) time . sleep ( idle )",
  "docstring_tokens": "Any normal python logic which runs a loop . Can take arguments ."
 },
 {
  "idx": "webquery-test-536",
  "doc": "how to keep calling a function forever in python",
  "code": "def seconds(num):\n    \"\"\"\n    Pause for this many seconds\n    \"\"\"\n    now = pytime.time()\n    end = now + num\n    until(end)",
  "label": 0,
  "code_tokens": "def seconds ( num ) : now = pytime . time ( ) end = now + num until ( end )",
  "docstring_tokens": "Pause for this many seconds"
 },
 {
  "idx": "webquery-test-537",
  "doc": "check type in list python",
  "code": "def isin(value, values):\n    \"\"\" Check that value is in values \"\"\"\n    for i, v in enumerate(value):\n        if v not in np.array(values)[:, i]:\n            return False\n    return True",
  "label": 0,
  "code_tokens": "def isin ( value , values ) : for i , v in enumerate ( value ) : if v not in np . array ( values ) [ : , i ] : return False return True",
  "docstring_tokens": "Check that value is in values"
 },
 {
  "idx": "webquery-test-538",
  "doc": "check type in list python",
  "code": "def isin(elems, line):\n    \"\"\"Check if an element from a list is in a string.\n\n    :type elems: list\n    :type line: str\n\n    \"\"\"\n    found = False\n    for e in elems:\n        if e in line.lower():\n            found = True\n            break\n    return found",
  "label": 0,
  "code_tokens": "def isin ( elems , line ) : found = False for e in elems : if e in line . lower ( ) : found = True break return found",
  "docstring_tokens": "Check if an element from a list is in a string ."
 },
 {
  "idx": "webquery-test-539",
  "doc": "how to transform a list into a dictionary python",
  "code": "def list2dict(lst):\n    \"\"\"Takes a list of (key,value) pairs and turns it into a dict.\"\"\"\n\n    dic = {}\n    for k,v in lst: dic[k] = v\n    return dic",
  "label": 1,
  "code_tokens": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic",
  "docstring_tokens": "Takes a list of ( key value ) pairs and turns it into a dict ."
 },
 {
  "idx": "webquery-test-540",
  "doc": "how to transform a list into a dictionary python",
  "code": "def list_of_lists_to_dict(l):\n    \"\"\" Convert list of key,value lists to dict\n\n    [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]\n    {'id': [1, 2, 3], 'foo': [4]}\n    \"\"\"\n    d = {}\n    for key, val in l:\n        d.setdefault(key, []).append(val)\n    return d",
  "label": 1,
  "code_tokens": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d",
  "docstring_tokens": "Convert list of key value lists to dict"
 },
 {
  "idx": "webquery-test-541",
  "doc": "python3 requests response text",
  "code": "async def json_or_text(response):\n    \"\"\"Turns response into a properly formatted json or text object\"\"\"\n    text = await response.text()\n    if response.headers['Content-Type'] == 'application/json; charset=utf-8':\n        return json.loads(text)\n    return text",
  "label": 1,
  "code_tokens": "async def json_or_text ( response ) : text = await response . text ( ) if response . headers [ 'Content-Type' ] == 'application/json; charset=utf-8' : return json . loads ( text ) return text",
  "docstring_tokens": "Turns response into a properly formatted json or text object"
 },
 {
  "idx": "webquery-test-542",
  "doc": "python3 requests response text",
  "code": "def url_read_text(url, verbose=True):\n    r\"\"\"\n    Directly reads text data from url\n    \"\"\"\n    data = url_read(url, verbose)\n    text = data.decode('utf8')\n    return text",
  "label": 0,
  "code_tokens": "def url_read_text ( url , verbose = True ) : data = url_read ( url , verbose ) text = data . decode ( 'utf8' ) return text",
  "docstring_tokens": "r Directly reads text data from url"
 },
 {
  "idx": "webquery-test-543",
  "doc": "subplots python show labelling",
  "code": "def finish_plot():\n    \"\"\"Helper for plotting.\"\"\"\n    plt.legend()\n    plt.grid(color='0.7')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()",
  "label": 1,
  "code_tokens": "def finish_plot ( ) : plt . legend ( ) plt . grid ( color = '0.7' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ( )",
  "docstring_tokens": "Helper for plotting ."
 },
 {
  "idx": "webquery-test-544",
  "doc": "subplots python show labelling",
  "code": "def show(self, title=''):\n        \"\"\"\n        Display Bloch sphere and corresponding data sets.\n        \"\"\"\n        self.render(title=title)\n        if self.fig:\n            plt.show(self.fig)",
  "label": 0,
  "code_tokens": "def show ( self , title = '' ) : self . render ( title = title ) if self . fig : plt . show ( self . fig )",
  "docstring_tokens": "Display Bloch sphere and corresponding data sets ."
 },
 {
  "idx": "webquery-test-545",
  "doc": "calclulate hash of a zip file python",
  "code": "def generate_hash(filepath):\n    \"\"\"Public function that reads a local file and generates a SHA256 hash digest for it\"\"\"\n    fr = FileReader(filepath)\n    data = fr.read_bin()\n    return _calculate_sha256(data)",
  "label": 1,
  "code_tokens": "def generate_hash ( filepath ) : fr = FileReader ( filepath ) data = fr . read_bin ( ) return _calculate_sha256 ( data )",
  "docstring_tokens": "Public function that reads a local file and generates a SHA256 hash digest for it"
 },
 {
  "idx": "webquery-test-546",
  "doc": "calclulate hash of a zip file python",
  "code": "def acc_hash(filepath: str, hasher):\n    \"\"\"Accumulate content of file at `filepath` in `hasher`.\"\"\"\n    with open(filepath, 'rb') as f:\n        while True:\n            chunk = f.read(_BUF_SIZE)\n            if not chunk:\n                break\n            hasher.update(chunk)",
  "label": 1,
  "code_tokens": "def acc_hash ( filepath : str , hasher ) : with open ( filepath , 'rb' ) as f : while True : chunk = f . read ( _BUF_SIZE ) if not chunk : break hasher . update ( chunk )",
  "docstring_tokens": "Accumulate content of file at filepath in hasher ."
 },
 {
  "idx": "webquery-test-547",
  "doc": "turn string to list in python",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-548",
  "doc": "turn string to list in python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-549",
  "doc": "how to check if none is passed in python",
  "code": "def get_text_or_url(args):\n    \"\"\"Determine if we need text or url output\"\"\"\n    redirect_mode = args.bang or args.search or args.lucky\n    if redirect_mode or args.url:\n        return 'url'\n    else:\n        return 'text'",
  "label": 0,
  "code_tokens": "def get_text_or_url ( args ) : redirect_mode = args . bang or args . search or args . lucky if redirect_mode or args . url : return 'url' else : return 'text'",
  "docstring_tokens": "Determine if we need text or url output"
 },
 {
  "idx": "webquery-test-550",
  "doc": "how to check if none is passed in python",
  "code": "def none_of(value, *args):\n    \"\"\" None of the items in value should match \"\"\"\n\n    if len(args):\n        value = (value,) + args\n\n    return ExpectationNone(value)",
  "label": 0,
  "code_tokens": "def none_of ( value , * args ) : if len ( args ) : value = ( value , ) + args return ExpectationNone ( value )",
  "docstring_tokens": "None of the items in value should match"
 },
 {
  "idx": "webquery-test-551",
  "doc": "using ordereddict in python on empty dictionary",
  "code": "def stringify_dict_contents(dct):\n    \"\"\"Turn dict keys and values into native strings.\"\"\"\n    return {\n        str_if_nested_or_str(k): str_if_nested_or_str(v)\n        for k, v in dct.items()\n    }",
  "label": 0,
  "code_tokens": "def stringify_dict_contents ( dct ) : return { str_if_nested_or_str ( k ) : str_if_nested_or_str ( v ) for k , v in dct . items ( ) }",
  "docstring_tokens": "Turn dict keys and values into native strings ."
 },
 {
  "idx": "webquery-test-552",
  "doc": "using ordereddict in python on empty dictionary",
  "code": "def str_dict(some_dict):\n    \"\"\"Convert dict of ascii str/unicode to dict of str, if necessary\"\"\"\n    return {str(k): str(v) for k, v in some_dict.items()}",
  "label": 0,
  "code_tokens": "def str_dict ( some_dict ) : return { str ( k ) : str ( v ) for k , v in some_dict . items ( ) }",
  "docstring_tokens": "Convert dict of ascii str / unicode to dict of str if necessary"
 },
 {
  "idx": "webquery-test-553",
  "doc": "how to test if somethings type string in python",
  "code": "def isString(s):\n    \"\"\"Convenience method that works with all 2.x versions of Python\n    to determine whether or not something is stringlike.\"\"\"\n    try:\n        return isinstance(s, unicode) or isinstance(s, basestring)\n    except NameError:\n        return isinstance(s, str)",
  "label": 1,
  "code_tokens": "def isString ( s ) : try : return isinstance ( s , unicode ) or isinstance ( s , basestring ) except NameError : return isinstance ( s , str )",
  "docstring_tokens": "Convenience method that works with all 2 . x versions of Python to determine whether or not something is stringlike ."
 },
 {
  "idx": "webquery-test-554",
  "doc": "how to test if somethings type string in python",
  "code": "def is_string(obj):\n    \"\"\"Is this a string.\n\n    :param object obj:\n    :rtype: bool\n    \"\"\"\n    if PYTHON3:\n        str_type = (bytes, str)\n    else:\n        str_type = (bytes, str, unicode)\n    return isinstance(obj, str_type)",
  "label": 1,
  "code_tokens": "def is_string ( obj ) : if PYTHON3 : str_type = ( bytes , str ) else : str_type = ( bytes , str , unicode ) return isinstance ( obj , str_type )",
  "docstring_tokens": "Is this a string ."
 },
 {
  "idx": "webquery-test-555",
  "doc": "python is the list is not empty",
  "code": "def _check_elements_equal(lst):\n    \"\"\"\n    Returns true if all of the elements in the list are equal.\n    \"\"\"\n    assert isinstance(lst, list), \"Input value must be a list.\"\n    return not lst or lst.count(lst[0]) == len(lst)",
  "label": 0,
  "code_tokens": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )",
  "docstring_tokens": "Returns true if all of the elements in the list are equal ."
 },
 {
  "idx": "webquery-test-556",
  "doc": "python is the list is not empty",
  "code": "def obj_in_list_always(target_list, obj):\n    \"\"\"\n    >>> l = [1,1,1]\n    >>> obj_in_list_always(l, 1)\n    True\n    >>> l.append(2)\n    >>> obj_in_list_always(l, 1)\n    False\n    \"\"\"\n    for item in set(target_list):\n        if item is not obj:\n            return False\n    return True",
  "label": 0,
  "code_tokens": "def obj_in_list_always ( target_list , obj ) : for item in set ( target_list ) : if item is not obj : return False return True",
  "docstring_tokens": ">>> l = [ 1 1 1 ] >>> obj_in_list_always ( l 1 ) True >>> l . append ( 2 ) >>> obj_in_list_always ( l 1 ) False"
 },
 {
  "idx": "webquery-test-557",
  "doc": "read write in the same file python",
  "code": "def file_read(filename):\n    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\n    fobj = open(filename,'r');\n    source = fobj.read();\n    fobj.close()\n    return source",
  "label": 0,
  "code_tokens": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
  "docstring_tokens": "Read a file and close it . Returns the file source ."
 },
 {
  "idx": "webquery-test-558",
  "doc": "read write in the same file python",
  "code": "def data(fname):\n    \"\"\"Return the contents of a data file of ours.\"\"\"\n    data_file = open(data_filename(fname))\n    try:\n        return data_file.read()\n    finally:\n        data_file.close()",
  "label": 0,
  "code_tokens": "def data ( fname ) : data_file = open ( data_filename ( fname ) ) try : return data_file . read ( ) finally : data_file . close ( )",
  "docstring_tokens": "Return the contents of a data file of ours ."
 },
 {
  "idx": "webquery-test-559",
  "doc": "python monkeyptach database conenctiona nd results exmaples",
  "code": "def quote_names(db, names):\n    \"\"\"psycopg2 doesn't know how to quote identifier names, so we ask the server\"\"\"\n    c = db.cursor()\n    c.execute(\"SELECT pg_catalog.quote_ident(n) FROM pg_catalog.unnest(%s::text[]) n\", [list(names)])\n    return [name for (name,) in c]",
  "label": 0,
  "code_tokens": "def quote_names ( db , names ) : c = db . cursor ( ) c . execute ( \"SELECT pg_catalog.quote_ident(n) FROM pg_catalog.unnest(%s::text[]) n\" , [ list ( names ) ] ) return [ name for ( name , ) in c ]",
  "docstring_tokens": "psycopg2 doesn t know how to quote identifier names so we ask the server"
 },
 {
  "idx": "webquery-test-560",
  "doc": "python monkeyptach database conenctiona nd results exmaples",
  "code": "def __init__(self, db):\n        \"\"\"\n        Connect to the Salesforce API.\n        \"\"\"\n        self.db = db\n        self.query = None\n        self.session = db.sf_session\n        self.rowcount = None\n        self.first_row = None\n        self.lastrowid = None  # not moved to driver because INSERT is implemented here\n        self.cursor = self.db.connection.cursor()",
  "label": 0,
  "code_tokens": "def __init__ ( self , db ) : self . db = db self . query = None self . session = db . sf_session self . rowcount = None self . first_row = None self . lastrowid = None # not moved to driver because INSERT is implemented here self . cursor = self . db . connection . cursor ( )",
  "docstring_tokens": "Connect to the Salesforce API ."
 },
 {
  "idx": "webquery-test-561",
  "doc": "python check whether a day is friday",
  "code": "def is_third_friday(day=None):\n    \"\"\" check if day is month's 3rd friday \"\"\"\n    day = day if day is not None else datetime.datetime.now()\n    defacto_friday = (day.weekday() == 4) or (\n        day.weekday() == 3 and day.hour() >= 17)\n    return defacto_friday and 14 < day.day < 22",
  "label": 0,
  "code_tokens": "def is_third_friday ( day = None ) : day = day if day is not None else datetime . datetime . now ( ) defacto_friday = ( day . weekday ( ) == 4 ) or ( day . weekday ( ) == 3 and day . hour ( ) >= 17 ) return defacto_friday and 14 < day . day < 22",
  "docstring_tokens": "check if day is month s 3rd friday"
 },
 {
  "idx": "webquery-test-562",
  "doc": "python check whether a day is friday",
  "code": "def isworkday(self, date):\r\n        \"\"\"\r\n        Check if a given date is a work date, ignoring holidays.\r\n\r\n        Args:\r\n            date (date, datetime or str): Date to be checked.\r\n\r\n        Returns:\r\n            bool: True if the date is a work date, False otherwise.\r\n        \"\"\"\r\n        date = parsefun(date)\r\n        return self.weekdaymap[date.weekday()].isworkday",
  "label": 0,
  "code_tokens": "def isworkday ( self , date ) : date = parsefun ( date ) return self . weekdaymap [ date . weekday ( ) ] . isworkday",
  "docstring_tokens": "Check if a given date is a work date ignoring holidays . Args : date ( date datetime or str ) : Date to be checked . Returns : bool : True if the date is a work date False otherwise ."
 },
 {
  "idx": "webquery-test-563",
  "doc": "python how to prase the response json",
  "code": "def response_to_json_dict(response, **kwargs):\n    \"\"\"\n    Standard place to convert responses to JSON.\n\n    :param response: requests response object\n    :param **kwargs: arguments accepted by json.loads\n\n    :returns: dict of JSON response\n    \"\"\"\n    if response.encoding is None:\n        response.encoding = 'utf-8'\n    return json.loads(response.text, **kwargs)",
  "label": 1,
  "code_tokens": "def response_to_json_dict ( response , * * kwargs ) : if response . encoding is None : response . encoding = 'utf-8' return json . loads ( response . text , * * kwargs )",
  "docstring_tokens": "Standard place to convert responses to JSON ."
 },
 {
  "idx": "webquery-test-564",
  "doc": "python how to prase the response json",
  "code": "def prt_js(js, sort_keys=True, indent=4):\n    \"\"\"Print Json in pretty format.\n    There's a standard module pprint, can pretty print python dict and list.\n    But it doesn't support sorted key. That why we need this func.\n\n    Usage::\n\n        >>> from weatherlab.lib.dataIO.js import prt_js\n        >>> prt_js({\"a\": 1, \"b\": 2})\n        {\n            \"a\": 1,\n            \"b\": 2\n        }\n\n    **\u4e2d\u6587\u6587\u6863**\n\n    \u4ee5\u4eba\u7c7b\u53ef\u8bfb\u7684\u65b9\u5f0f\u6253\u5370\u53efJson\u5316\u7684Python\u5bf9\u8c61\u3002\n    \"\"\"\n    print(js2str(js, sort_keys, indent))",
  "label": 0,
  "code_tokens": "def prt_js ( js , sort_keys = True , indent = 4 ) : print ( js2str ( js , sort_keys , indent ) )",
  "docstring_tokens": "Print Json in pretty format . There s a standard module pprint can pretty print python dict and list . But it doesn t support sorted key . That why we need this func ."
 },
 {
  "idx": "webquery-test-565",
  "doc": "python cycle through elements in list",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-566",
  "doc": "python cycle through elements in list",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-567",
  "doc": "how to remove ! in a string python",
  "code": "def strip_codes(s: Any) -> str:\n    \"\"\" Strip all color codes from a string.\n        Returns empty string for \"falsey\" inputs.\n    \"\"\"\n    return codepat.sub('', str(s) if (s or (s == 0)) else '')",
  "label": 0,
  "code_tokens": "def strip_codes ( s : Any ) -> str : return codepat . sub ( '' , str ( s ) if ( s or ( s == 0 ) ) else '' )",
  "docstring_tokens": "Strip all color codes from a string . Returns empty string for falsey inputs ."
 },
 {
  "idx": "webquery-test-568",
  "doc": "how to remove ! in a string python",
  "code": "def strip_accents(text):\n    \"\"\"\n    Strip agents from a string.\n    \"\"\"\n\n    normalized_str = unicodedata.normalize('NFD', text)\n\n    return ''.join([\n        c for c in normalized_str if unicodedata.category(c) != 'Mn'])",
  "label": 0,
  "code_tokens": "def strip_accents ( text ) : normalized_str = unicodedata . normalize ( 'NFD' , text ) return '' . join ( [ c for c in normalized_str if unicodedata . category ( c ) != 'Mn' ] )",
  "docstring_tokens": "Strip agents from a string ."
 },
 {
  "idx": "webquery-test-569",
  "doc": "python loop until and do nothing",
  "code": "def stop(self) -> None:\n        \"\"\"Stops the analysis as soon as possible.\"\"\"\n        if self._stop and not self._posted_kork:\n            self._stop()\n            self._stop = None",
  "label": 0,
  "code_tokens": "def stop ( self ) -> None : if self . _stop and not self . _posted_kork : self . _stop ( ) self . _stop = None",
  "docstring_tokens": "Stops the analysis as soon as possible ."
 },
 {
  "idx": "webquery-test-570",
  "doc": "python loop until and do nothing",
  "code": "def wait_until_exit(self):\n        \"\"\" Wait until thread exit\n\n            Used for testing purpose only\n        \"\"\"\n\n        if self._timeout is None:\n            raise Exception(\"Thread will never exit. Use stop or specify timeout when starting it!\")\n\n        self._thread.join()\n        self.stop()",
  "label": 0,
  "code_tokens": "def wait_until_exit ( self ) : if self . _timeout is None : raise Exception ( \"Thread will never exit. Use stop or specify timeout when starting it!\" ) self . _thread . join ( ) self . stop ( )",
  "docstring_tokens": "Wait until thread exit"
 },
 {
  "idx": "webquery-test-571",
  "doc": "python epub to text",
  "code": "def html_to_text(content):\n    \"\"\" Converts html content to plain text \"\"\"\n    text = None\n    h2t = html2text.HTML2Text()\n    h2t.ignore_links = False\n    text = h2t.handle(content)\n    return text",
  "label": 0,
  "code_tokens": "def html_to_text ( content ) : text = None h2t = html2text . HTML2Text ( ) h2t . ignore_links = False text = h2t . handle ( content ) return text",
  "docstring_tokens": "Converts html content to plain text"
 },
 {
  "idx": "webquery-test-572",
  "doc": "python epub to text",
  "code": "def is_published(self):\n        \"\"\"stub\"\"\"\n        if 'published' not in self.my_osid_object._my_map:\n            return False\n        return bool(self.my_osid_object._my_map['published'])",
  "label": 0,
  "code_tokens": "def is_published ( self ) : if 'published' not in self . my_osid_object . _my_map : return False return bool ( self . my_osid_object . _my_map [ 'published' ] )",
  "docstring_tokens": "stub"
 },
 {
  "idx": "webquery-test-573",
  "doc": "python scrape table from website multiple tables",
  "code": "def find_table_links(self):\n        \"\"\"\n        When given a url, this function will find all the available table names\n        for that EPA dataset.\n        \"\"\"\n        html = urlopen(self.model_url).read()\n        doc = lh.fromstring(html)\n        href_list = [area.attrib['href'] for area in doc.cssselect('map area')]\n        tables = self._inception_table_links(href_list)\n        return tables",
  "label": 1,
  "code_tokens": "def find_table_links ( self ) : html = urlopen ( self . model_url ) . read ( ) doc = lh . fromstring ( html ) href_list = [ area . attrib [ 'href' ] for area in doc . cssselect ( 'map area' ) ] tables = self . _inception_table_links ( href_list ) return tables",
  "docstring_tokens": "When given a url this function will find all the available table names for that EPA dataset ."
 },
 {
  "idx": "webquery-test-574",
  "doc": "python scrape table from website multiple tables",
  "code": "def html(header_rows):\n    \"\"\"\n    Convert a list of tuples describing a table into a HTML string\n    \"\"\"\n    name = 'table%d' % next(tablecounter)\n    return HtmlTable([map(str, row) for row in header_rows], name).render()",
  "label": 0,
  "code_tokens": "def html ( header_rows ) : name = 'table%d' % next ( tablecounter ) return HtmlTable ( [ map ( str , row ) for row in header_rows ] , name ) . render ( )",
  "docstring_tokens": "Convert a list of tuples describing a table into a HTML string"
 },
 {
  "idx": "webquery-test-575",
  "doc": "calculating the accuracy of a variable inside for loops python",
  "code": "def token_accuracy(labels, outputs):\n  \"\"\"Compute tokenwise (elementwise) accuracy.\n\n  Args:\n    labels: ground-truth labels, shape=(batch, seq_length)\n    outputs: predicted tokens, shape=(batch, seq_length)\n  Returns:\n    Two ops, one for getting the current average accuracy and another for\n    updating the running average estimate.\n  \"\"\"\n  weights = tf.to_float(tf.not_equal(labels, 0))\n  return tf.metrics.accuracy(labels, outputs, weights=weights)",
  "label": 1,
  "code_tokens": "def token_accuracy ( labels , outputs ) : weights = tf . to_float ( tf . not_equal ( labels , 0 ) ) return tf . metrics . accuracy ( labels , outputs , weights = weights )",
  "docstring_tokens": "Compute tokenwise ( elementwise ) accuracy ."
 },
 {
  "idx": "webquery-test-576",
  "doc": "calculating the accuracy of a variable inside for loops python",
  "code": "def local_accuracy(X_train, y_train, X_test, y_test, attr_test, model_generator, metric, trained_model):\n    \"\"\" The how well do the features plus a constant base rate sum up to the model output.\n    \"\"\"\n\n    X_train, X_test = to_array(X_train, X_test)\n\n    # how many features to mask\n    assert X_train.shape[1] == X_test.shape[1]\n\n    # keep nkeep top features and re-train the model for each test explanation\n    yp_test = trained_model.predict(X_test)\n\n    return metric(yp_test, strip_list(attr_test).sum(1))",
  "label": 0,
  "code_tokens": "def local_accuracy ( X_train , y_train , X_test , y_test , attr_test , model_generator , metric , trained_model ) : X_train , X_test = to_array ( X_train , X_test ) # how many features to mask assert X_train . shape [ 1 ] == X_test . shape [ 1 ] # keep nkeep top features and re-train the model for each test explanation yp_test = trained_model . predict ( X_test ) return metric ( yp_test , strip_list ( attr_test ) . sum ( 1 ) )",
  "docstring_tokens": "The how well do the features plus a constant base rate sum up to the model output ."
 },
 {
  "idx": "webquery-test-577",
  "doc": "python how to tell if an int is base 2",
  "code": "def _find_base_type(data_type):\n    \"\"\"Find the Nani's base type for a given data type.\n\n    This is useful when Nani's data types were subclassed and the original type\n    is required.\n    \"\"\"\n    bases = type(data_type).__mro__\n    for base in bases:\n        if base in _ALL:\n            return base\n\n    return None",
  "label": 0,
  "code_tokens": "def _find_base_type ( data_type ) : bases = type ( data_type ) . __mro__ for base in bases : if base in _ALL : return base return None",
  "docstring_tokens": "Find the Nani s base type for a given data type ."
 },
 {
  "idx": "webquery-test-578",
  "doc": "python how to tell if an int is base 2",
  "code": "def _is_bit(obj):\n    \"\"\"Determine if obj is a bit\"\"\"\n    # If there is a bit type this could be replaced by isinstance.\n    if isinstance(obj, tuple) and len(obj) == 2:\n        if isinstance(obj[0], Register) and isinstance(obj[1], int) and obj[1] < len(obj[0]):\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def _is_bit ( obj ) : # If there is a bit type this could be replaced by isinstance. if isinstance ( obj , tuple ) and len ( obj ) == 2 : if isinstance ( obj [ 0 ] , Register ) and isinstance ( obj [ 1 ] , int ) and obj [ 1 ] < len ( obj [ 0 ] ) : return True return False",
  "docstring_tokens": "Determine if obj is a bit"
 },
 {
  "idx": "webquery-test-579",
  "doc": "index f a list in python starts with 0 or 1",
  "code": "def find_index(array, x):\n    \"\"\"\n    Locate the leftmost value exactly equal to x.\n\n    :type array: list\n    :param array: an iterable object that support inex\n\n    :param x: a comparable value\n\n    **\u4e2d\u6587\u6587\u6863**\n\n    \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u7b49\u4e8ex\u7684\u5143\u7d20\u7684\u7d22\u5f15\u3002\n    \"\"\"\n    i = bisect.bisect_left(array, x)\n    if i != len(array) and array[i] == x:\n        return i\n    raise ValueError",
  "label": 1,
  "code_tokens": "def find_index ( array , x ) : i = bisect . bisect_left ( array , x ) if i != len ( array ) and array [ i ] == x : return i raise ValueError",
  "docstring_tokens": "Locate the leftmost value exactly equal to x ."
 },
 {
  "idx": "webquery-test-580",
  "doc": "index f a list in python starts with 0 or 1",
  "code": "def isin(value, values):\n    \"\"\" Check that value is in values \"\"\"\n    for i, v in enumerate(value):\n        if v not in np.array(values)[:, i]:\n            return False\n    return True",
  "label": 0,
  "code_tokens": "def isin ( value , values ) : for i , v in enumerate ( value ) : if v not in np . array ( values ) [ : , i ] : return False return True",
  "docstring_tokens": "Check that value is in values"
 },
 {
  "idx": "webquery-test-581",
  "doc": "clear a variable in python",
  "code": "def apply_mana_drain(self):\n        \"\"\"Clear current mana values.\"\"\"\n        self.r = self.g = self.b = self.y = 0",
  "label": 0,
  "code_tokens": "def apply_mana_drain ( self ) : self . r = self . g = self . b = self . y = 0",
  "docstring_tokens": "Clear current mana values ."
 },
 {
  "idx": "webquery-test-582",
  "doc": "clear a variable in python",
  "code": "def forget_coords(self):\n        \"\"\"Forget all loaded coordinates.\"\"\"\n        self.w.ntotal.set_text('0')\n        self.coords_dict.clear()\n        self.redo()",
  "label": 1,
  "code_tokens": "def forget_coords ( self ) : self . w . ntotal . set_text ( '0' ) self . coords_dict . clear ( ) self . redo ( )",
  "docstring_tokens": "Forget all loaded coordinates ."
 },
 {
  "idx": "webquery-test-583",
  "doc": "python using a list as an iterator",
  "code": "def __iter__(self):\n    \"\"\"Return all elements from the list.\"\"\"\n    for index in range(0, self._size):\n      try:\n        yield self._list[(self._index + index) % self._size]\n      except IndexError:\n        pass",
  "label": 1,
  "code_tokens": "def __iter__ ( self ) : for index in range ( 0 , self . _size ) : try : yield self . _list [ ( self . _index + index ) % self . _size ] except IndexError : pass",
  "docstring_tokens": "Return all elements from the list ."
 },
 {
  "idx": "webquery-test-584",
  "doc": "python using a list as an iterator",
  "code": "def _generate_instances(self):\n        \"\"\"\n        ListNode item generator. Will be used internally by __iter__ and __getitem__\n\n        Yields:\n            ListNode items (instances)\n        \"\"\"\n        for node in self.node_stack:\n            yield node\n        while self._data:\n            yield self._make_instance(self._data.pop(0))",
  "label": 0,
  "code_tokens": "def _generate_instances ( self ) : for node in self . node_stack : yield node while self . _data : yield self . _make_instance ( self . _data . pop ( 0 ) )",
  "docstring_tokens": "ListNode item generator . Will be used internally by __iter__ and __getitem__"
 },
 {
  "idx": "webquery-test-585",
  "doc": "how to pass a path to a file in python",
  "code": "def get_file_string(filepath):\n    \"\"\"Get string from file.\"\"\"\n    with open(os.path.abspath(filepath)) as f:\n        return f.read()",
  "label": 0,
  "code_tokens": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )",
  "docstring_tokens": "Get string from file ."
 },
 {
  "idx": "webquery-test-586",
  "doc": "how to pass a path to a file in python",
  "code": "def read(*p):\n    \"\"\"Build a file path from paths and return the contents.\"\"\"\n    with open(os.path.join(*p), 'r') as fi:\n        return fi.read()",
  "label": 0,
  "code_tokens": "def read ( * p ) : with open ( os . path . join ( * p ) , 'r' ) as fi : return fi . read ( )",
  "docstring_tokens": "Build a file path from paths and return the contents ."
 },
 {
  "idx": "webquery-test-587",
  "doc": "python build tree by subelment",
  "code": "def WalkChildren(elem):\n\t\"\"\"\n\tWalk the XML tree of children below elem, returning each in order.\n\t\"\"\"\n\tfor child in elem.childNodes:\n\t\tyield child\n\t\tfor elem in WalkChildren(child):\n\t\t\tyield elem",
  "label": 1,
  "code_tokens": "def WalkChildren ( elem ) : for child in elem . childNodes : yield child for elem in WalkChildren ( child ) : yield elem",
  "docstring_tokens": "Walk the XML tree of children below elem returning each in order ."
 },
 {
  "idx": "webquery-test-588",
  "doc": "python build tree by subelment",
  "code": "def parse_station_table(root):\n    \"\"\"Parse station list XML file.\"\"\"\n    stations = [parse_xml_station(elem) for elem in root.findall('station')]\n    return {st.id: st for st in stations}",
  "label": 0,
  "code_tokens": "def parse_station_table ( root ) : stations = [ parse_xml_station ( elem ) for elem in root . findall ( 'station' ) ] return { st . id : st for st in stations }",
  "docstring_tokens": "Parse station list XML file ."
 },
 {
  "idx": "webquery-test-589",
  "doc": "python 3 str to utf8",
  "code": "def safe_unicode(string):\n    \"\"\"If Python 2, replace non-ascii characters and return encoded string.\"\"\"\n    if not PY3:\n        uni = string.replace(u'\\u2019', \"'\")\n        return uni.encode('utf-8')\n        \n    return string",
  "label": 0,
  "code_tokens": "def safe_unicode ( string ) : if not PY3 : uni = string . replace ( u'\\u2019' , \"'\" ) return uni . encode ( 'utf-8' ) return string",
  "docstring_tokens": "If Python 2 replace non - ascii characters and return encoded string ."
 },
 {
  "idx": "webquery-test-590",
  "doc": "python 3 str to utf8",
  "code": "def utf8(value):\n    \"\"\"Converts a string argument to a byte string.\n\n    If the argument is already a byte string or None, it is returned unchanged.\n    Otherwise it must be a unicode string and is encoded as utf8.\n    \"\"\"\n    if isinstance(value, _UTF8_TYPES):\n        return value\n    assert isinstance(value, unicode)\n    return value.encode(\"utf-8\")",
  "label": 1,
  "code_tokens": "def utf8 ( value ) : if isinstance ( value , _UTF8_TYPES ) : return value assert isinstance ( value , unicode ) return value . encode ( \"utf-8\" )",
  "docstring_tokens": "Converts a string argument to a byte string ."
 },
 {
  "idx": "webquery-test-591",
  "doc": "python apply custom convolutional filters",
  "code": "def DynamicConvFilter(inputs, filters, out_channel,\n                      kernel_shape,\n                      stride=1,\n                      padding='SAME'):\n    \"\"\" see \"Dynamic Filter Networks\" (NIPS 2016)\n        by Bert De Brabandere*, Xu Jia*, Tinne Tuytelaars and Luc Van Gool\n\n    Remarks:\n        This is the convolution version of a dynamic filter.\n\n    Args:\n        inputs : unfiltered input [b, h, w, 1] only grayscale images.\n        filters : learned filters of [b, k, k, 1] (dynamically generated by the network).\n        out_channel (int): number of output channel.\n        kernel_shape: (h, w) tuple or a int.\n        stride: (h, w) tuple or a int.\n        padding (str): 'valid' or 'same'. Case insensitive.\n\n    Returns\n        tf.Tensor named ``output``.\n    \"\"\"\n\n    # tf.unstack only works with known batch_size :-(\n    batch_size, h, w, in_channel = inputs.get_shape().as_list()\n    stride = shape4d(stride)\n\n    inputs = tf.unstack(inputs)\n    filters = tf.reshape(filters, [batch_size] + shape2d(kernel_shape) + [in_channel, out_channel])\n    filters = tf.unstack(filters)\n\n    # this is ok as TF uses the cuda stream context\n    rsl = [tf.nn.conv2d(tf.reshape(d, [1, h, w, in_channel]),\n                        tf.reshape(k, [kernel_shape, kernel_shape, in_channel, out_channel]),\n                        stride, padding=\"SAME\") for d, k in zip(inputs, filters)]\n    rsl = tf.concat(rsl, axis=0, name='output')\n    return rsl",
  "label": 0,
  "code_tokens": "def DynamicConvFilter ( inputs , filters , out_channel , kernel_shape , stride = 1 , padding = 'SAME' ) : # tf.unstack only works with known batch_size :-( batch_size , h , w , in_channel = inputs . get_shape ( ) . as_list ( ) stride = shape4d ( stride ) inputs = tf . unstack ( inputs ) filters = tf . reshape ( filters , [ batch_size ] + shape2d ( kernel_shape ) + [ in_channel , out_channel ] ) filters = tf . unstack ( filters ) # this is ok as TF uses the cuda stream context rsl = [ tf . nn . conv2d ( tf . reshape ( d , [ 1 , h , w , in_channel ] ) , tf . reshape ( k , [ kernel_shape , kernel_shape , in_channel , out_channel ] ) , stride , padding = \"SAME\" ) for d , k in zip ( inputs , filters ) ] rsl = tf . concat ( rsl , axis = 0 , name = 'output' ) return rsl",
  "docstring_tokens": "see Dynamic Filter Networks ( NIPS 2016 ) by Bert De Brabandere * Xu Jia * Tinne Tuytelaars and Luc Van Gool"
 },
 {
  "idx": "webquery-test-592",
  "doc": "python apply custom convolutional filters",
  "code": "def lowpass(data,filterSize=None):\n    \"\"\"\n    minimal complexity low-pass filtering.\n    Filter size is how \"wide\" the filter will be.\n    Sigma will be 1/10 of this filter width.\n    If filter size isn't given, it will be 1/10 of the data size.\n    \"\"\"\n    if filterSize is None:\n        filterSize=len(data)/10\n    kernel=kernel_gaussian(size=filterSize)\n    data=convolve(data,kernel) # do the convolution with padded edges\n    return data",
  "label": 1,
  "code_tokens": "def lowpass ( data , filterSize = None ) : if filterSize is None : filterSize = len ( data ) / 10 kernel = kernel_gaussian ( size = filterSize ) data = convolve ( data , kernel ) # do the convolution with padded edges return data",
  "docstring_tokens": "minimal complexity low - pass filtering . Filter size is how wide the filter will be . Sigma will be 1 / 10 of this filter width . If filter size isn t given it will be 1 / 10 of the data size ."
 },
 {
  "idx": "webquery-test-593",
  "doc": "how to make consecutive numbers python",
  "code": "def _numbers_units(N):\n    \"\"\"\n    >>> _numbers_units(45)\n    '123456789012345678901234567890123456789012345'\n    \"\"\"\n    lst = range(1, N + 1)\n    return \"\".join(list(map(lambda i: str(i % 10), lst)))",
  "label": 1,
  "code_tokens": "def _numbers_units ( N ) : lst = range ( 1 , N + 1 ) return \"\" . join ( list ( map ( lambda i : str ( i % 10 ) , lst ) ) )",
  "docstring_tokens": ">>> _numbers_units ( 45 ) 123456789012345678901234567890123456789012345"
 },
 {
  "idx": "webquery-test-594",
  "doc": "how to make consecutive numbers python",
  "code": "def digit(m: Union[int, pd.Series], n: int) -> Union[int, pd.Series]:\n        \"\"\"Returns the nth digit of each number in m.\"\"\"\n        return (m // (10 ** n)) % 10",
  "label": 0,
  "code_tokens": "def digit ( m : Union [ int , pd . Series ] , n : int ) -> Union [ int , pd . Series ] : return ( m // ( 10 ** n ) ) % 10",
  "docstring_tokens": "Returns the nth digit of each number in m ."
 },
 {
  "idx": "webquery-test-595",
  "doc": "python send method as a variable",
  "code": "def _apply_list(self, methods):\n    \"\"\"Return a single callable that applies a list of methods to a value.\n\n    If a method returns None, the last value is kept; if it returns\n    some other value, that replaces the last value.  Exceptions are\n    not caught.\n    \"\"\"\n    def call(value):\n      for method in methods:\n        newvalue = method(self, value)\n        if newvalue is not None:\n          value = newvalue\n      return value\n    return call",
  "label": 1,
  "code_tokens": "def _apply_list ( self , methods ) : def call ( value ) : for method in methods : newvalue = method ( self , value ) if newvalue is not None : value = newvalue return value return call",
  "docstring_tokens": "Return a single callable that applies a list of methods to a value ."
 },
 {
  "idx": "webquery-test-596",
  "doc": "python send method as a variable",
  "code": "def executeMethod(self, methodName, args):\n    \"\"\"Executes a method named ``methodName`` with the specified arguments.\n\n    This method is called when the user executes a command as defined in\n    the node spec. It provides a perfectly reasonble implementation\n    of the command mechanism. As a sub-class developer you just need to\n    implement a method for each command in the node spec. Note that due to\n    the command mechanism only unnamed argument are supported.\n\n    :param methodName: (string) the name of the method that correspond to a\n           command in the spec.\n    :param args: (list) of arguments that will be passed to the method\n    \"\"\"\n    if not hasattr(self, methodName):\n      raise Exception('Missing command method: ' + methodName)\n\n    m = getattr(self, methodName)\n    if not hasattr(m, '__call__'):\n      raise Exception('Command: ' + methodName + ' must be callable')\n\n    return m(*args)",
  "label": 1,
  "code_tokens": "def executeMethod ( self , methodName , args ) : if not hasattr ( self , methodName ) : raise Exception ( 'Missing command method: ' + methodName ) m = getattr ( self , methodName ) if not hasattr ( m , '__call__' ) : raise Exception ( 'Command: ' + methodName + ' must be callable' ) return m ( * args )",
  "docstring_tokens": "Executes a method named methodName with the specified arguments ."
 },
 {
  "idx": "webquery-test-597",
  "doc": "extract value from a list of tuples python",
  "code": "def compose_all(tups):\n  \"\"\"Compose all given tuples together.\"\"\"\n  from . import ast  # I weep for humanity\n  return functools.reduce(lambda x, y: x.compose(y), map(ast.make_tuple, tups), ast.make_tuple({}))",
  "label": 0,
  "code_tokens": "def compose_all ( tups ) : from . import ast # I weep for humanity return functools . reduce ( lambda x , y : x . compose ( y ) , map ( ast . make_tuple , tups ) , ast . make_tuple ( { } ) )",
  "docstring_tokens": "Compose all given tuples together ."
 },
 {
  "idx": "webquery-test-598",
  "doc": "extract value from a list of tuples python",
  "code": "def readTuple(self, line, n=3):\n        \"\"\" Reads a tuple of numbers. e.g. vertices, normals or teture coords.\n        \"\"\"\n        numbers = [num for num in line.split(' ') if num]\n        return [float(num) for num in numbers[1:n + 1]]",
  "label": 1,
  "code_tokens": "def readTuple ( self , line , n = 3 ) : numbers = [ num for num in line . split ( ' ' ) if num ] return [ float ( num ) for num in numbers [ 1 : n + 1 ] ]",
  "docstring_tokens": "Reads a tuple of numbers . e . g . vertices normals or teture coords ."
 },
 {
  "idx": "webquery-test-599",
  "doc": "multiple returns function python print with spaces",
  "code": "def indented_show(text, howmany=1):\n        \"\"\"Print a formatted indented text.\n        \"\"\"\n        print(StrTemplate.pad_indent(text=text, howmany=howmany))",
  "label": 0,
  "code_tokens": "def indented_show ( text , howmany = 1 ) : print ( StrTemplate . pad_indent ( text = text , howmany = howmany ) )",
  "docstring_tokens": "Print a formatted indented text ."
 },
 {
  "idx": "webquery-test-600",
  "doc": "multiple returns function python print with spaces",
  "code": "def print_with_header(header, message, color, indent=0):\n    \"\"\"\n    Use one of the functions below for printing, not this one.\n    \"\"\"\n    print()\n    padding = ' ' * indent\n    print(padding + color + BOLD + header + ENDC + color + message + ENDC)",
  "label": 0,
  "code_tokens": "def print_with_header ( header , message , color , indent = 0 ) : print ( ) padding = ' ' * indent print ( padding + color + BOLD + header + ENDC + color + message + ENDC )",
  "docstring_tokens": "Use one of the functions below for printing not this one ."
 },
 {
  "idx": "webquery-test-601",
  "doc": "python creating an array of fixed size",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-602",
  "doc": "python creating an array of fixed size",
  "code": "def chunks(items, size):\n    \"\"\" Split list into chunks of the given size.\n    Original order is preserved.\n\n    Example:\n        > chunks([1,2,3,4,5,6,7,8], 3)\n        [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [items[i:i+size] for i in range(0, len(items), size)]",
  "label": 0,
  "code_tokens": "def chunks ( items , size ) : return [ items [ i : i + size ] for i in range ( 0 , len ( items ) , size ) ]",
  "docstring_tokens": "Split list into chunks of the given size . Original order is preserved ."
 },
 {
  "idx": "webquery-test-603",
  "doc": "python remove last 3 elements from list",
  "code": "def indicate_last(items):\n    \"\"\"\n    iterate through list and indicate which item is the last, intended to\n    assist tree displays of hierarchical content.\n\n    :return: yielding (<bool>, <item>) where bool is True only on last entry\n    :rtype: generator\n    \"\"\"\n    last_index = len(items) - 1\n    for (i, item) in enumerate(items):\n        yield (i == last_index, item)",
  "label": 0,
  "code_tokens": "def indicate_last ( items ) : last_index = len ( items ) - 1 for ( i , item ) in enumerate ( items ) : yield ( i == last_index , item )",
  "docstring_tokens": "iterate through list and indicate which item is the last intended to assist tree displays of hierarchical content ."
 },
 {
  "idx": "webquery-test-604",
  "doc": "python remove last 3 elements from list",
  "code": "def get_last(self, table=None):\n        \"\"\"Just the last entry.\"\"\"\n        if table is None: table = self.main_table\n        query = 'SELECT * FROM \"%s\" ORDER BY ROWID DESC LIMIT 1;' % table\n        return self.own_cursor.execute(query).fetchone()",
  "label": 0,
  "code_tokens": "def get_last ( self , table = None ) : if table is None : table = self . main_table query = 'SELECT * FROM \"%s\" ORDER BY ROWID DESC LIMIT 1;' % table return self . own_cursor . execute ( query ) . fetchone ( )",
  "docstring_tokens": "Just the last entry ."
 },
 {
  "idx": "webquery-test-605",
  "doc": "call python constructor from different file",
  "code": "def __init__(self, baken_file=None):\n        \"\"\"Initialise a new `Bakens` object.\"\"\"\n        super(Bakens, self).__init__()\n        if baken_file:\n            self.import_locations(baken_file)",
  "label": 0,
  "code_tokens": "def __init__ ( self , baken_file = None ) : super ( Bakens , self ) . __init__ ( ) if baken_file : self . import_locations ( baken_file )",
  "docstring_tokens": "Initialise a new Bakens object ."
 },
 {
  "idx": "webquery-test-606",
  "doc": "call python constructor from different file",
  "code": "def __init__(self, args, loop):\n        \"\"\"Initialize a new instance of GlobalCommands.\"\"\"\n        self.args = args\n        self.loop = loop",
  "label": 0,
  "code_tokens": "def __init__ ( self , args , loop ) : self . args = args self . loop = loop",
  "docstring_tokens": "Initialize a new instance of GlobalCommands ."
 },
 {
  "idx": "webquery-test-607",
  "doc": "python string split nonwhitespace",
  "code": "def strip_spaces(s):\n    \"\"\" Strip excess spaces from a string \"\"\"\n    return u\" \".join([c for c in s.split(u' ') if c])",
  "label": 0,
  "code_tokens": "def strip_spaces ( s ) : return u\" \" . join ( [ c for c in s . split ( u' ' ) if c ] )",
  "docstring_tokens": "Strip excess spaces from a string"
 },
 {
  "idx": "webquery-test-608",
  "doc": "python string split nonwhitespace",
  "code": "def split_on(s, sep=\" \"):\n    \"\"\"Split s by sep, unless it's inside a quote.\"\"\"\n    pattern = '''((?:[^%s\"']|\"[^\"]*\"|'[^']*')+)''' % sep\n\n    return [_strip_speechmarks(t) for t in re.split(pattern, s)[1::2]]",
  "label": 1,
  "code_tokens": "def split_on ( s , sep = \" \" ) : pattern = '''((?:[^%s\"']|\"[^\"]*\"|'[^']*')+)''' % sep return [ _strip_speechmarks ( t ) for t in re . split ( pattern , s ) [ 1 : : 2 ] ]",
  "docstring_tokens": "Split s by sep unless it s inside a quote ."
 },
 {
  "idx": "webquery-test-609",
  "doc": "python file replace suffix",
  "code": "def add_suffix(fullname, suffix):\n    \"\"\" Add suffix to a full file name\"\"\"\n    name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext",
  "label": 0,
  "code_tokens": "def add_suffix ( fullname , suffix ) : name , ext = os . path . splitext ( fullname ) return name + '_' + suffix + ext",
  "docstring_tokens": "Add suffix to a full file name"
 },
 {
  "idx": "webquery-test-610",
  "doc": "python file replace suffix",
  "code": "def add_suffix(filename, suffix):\n        \"\"\"\n        ADD suffix TO THE filename (NOT INCLUDING THE FILE EXTENSION)\n        \"\"\"\n        path = filename.split(\"/\")\n        parts = path[-1].split(\".\")\n        i = max(len(parts) - 2, 0)\n        parts[i] = parts[i] + suffix\n        path[-1] = \".\".join(parts)\n        return \"/\".join(path)",
  "label": 0,
  "code_tokens": "def add_suffix ( filename , suffix ) : path = filename . split ( \"/\" ) parts = path [ - 1 ] . split ( \".\" ) i = max ( len ( parts ) - 2 , 0 ) parts [ i ] = parts [ i ] + suffix path [ - 1 ] = \".\" . join ( parts ) return \"/\" . join ( path )",
  "docstring_tokens": "ADD suffix TO THE filename ( NOT INCLUDING THE FILE EXTENSION )"
 },
 {
  "idx": "webquery-test-611",
  "doc": "how to print a loop in one line in python",
  "code": "def main():\n    \"\"\"Ideally we shouldn't lose the first second of events\"\"\"\n    time.sleep(1)\n    with Input() as input_generator:\n        for e in input_generator:\n            print(repr(e))",
  "label": 0,
  "code_tokens": "def main ( ) : time . sleep ( 1 ) with Input ( ) as input_generator : for e in input_generator : print ( repr ( e ) )",
  "docstring_tokens": "Ideally we shouldn t lose the first second of events"
 },
 {
  "idx": "webquery-test-612",
  "doc": "how to print a loop in one line in python",
  "code": "def __call__(self, _):\n        \"\"\"Print the current iteration.\"\"\"\n        if self.iter % self.step == 0:\n            print(self.fmt.format(self.iter), **self.kwargs)\n\n        self.iter += 1",
  "label": 0,
  "code_tokens": "def __call__ ( self , _ ) : if self . iter % self . step == 0 : print ( self . fmt . format ( self . iter ) , * * self . kwargs ) self . iter += 1",
  "docstring_tokens": "Print the current iteration ."
 },
 {
  "idx": "webquery-test-613",
  "doc": "python load data into array",
  "code": "def convert_array(array):\n    \"\"\"\n    Converts an ARRAY string stored in the database back into a Numpy array.\n\n    Parameters\n    ----------\n    array: ARRAY\n        The array object to be converted back into a Numpy array.\n\n    Returns\n    -------\n    array\n            The converted Numpy array.\n\n    \"\"\"\n    out = io.BytesIO(array)\n    out.seek(0)\n    return np.load(out)",
  "label": 1,
  "code_tokens": "def convert_array ( array ) : out = io . BytesIO ( array ) out . seek ( 0 ) return np . load ( out )",
  "docstring_tokens": "Converts an ARRAY string stored in the database back into a Numpy array ."
 },
 {
  "idx": "webquery-test-614",
  "doc": "python load data into array",
  "code": "def C_dict2array(C):\n    \"\"\"Convert an OrderedDict containing C values to a 1D array.\"\"\"\n    return np.hstack([np.asarray(C[k]).ravel() for k in C_keys])",
  "label": 1,
  "code_tokens": "def C_dict2array ( C ) : return np . hstack ( [ np . asarray ( C [ k ] ) . ravel ( ) for k in C_keys ] )",
  "docstring_tokens": "Convert an OrderedDict containing C values to a 1D array ."
 },
 {
  "idx": "webquery-test-615",
  "doc": "how to change negetive values to zero for a particular column in python",
  "code": "def clean_with_zeros(self,x):\n        \"\"\" set nan and inf rows from x to zero\"\"\"\n        x[~np.any(np.isnan(x) | np.isinf(x),axis=1)] = 0\n        return x",
  "label": 0,
  "code_tokens": "def clean_with_zeros ( self , x ) : x [ ~ np . any ( np . isnan ( x ) | np . isinf ( x ) , axis = 1 ) ] = 0 return x",
  "docstring_tokens": "set nan and inf rows from x to zero"
 },
 {
  "idx": "webquery-test-616",
  "doc": "how to change negetive values to zero for a particular column in python",
  "code": "def _replace_nan(a, val):\n    \"\"\"\n    replace nan in a by val, and returns the replaced array and the nan\n    position\n    \"\"\"\n    mask = isnull(a)\n    return where_method(val, mask, a), mask",
  "label": 0,
  "code_tokens": "def _replace_nan ( a , val ) : mask = isnull ( a ) return where_method ( val , mask , a ) , mask",
  "docstring_tokens": "replace nan in a by val and returns the replaced array and the nan position"
 },
 {
  "idx": "webquery-test-617",
  "doc": "bring out array from dictionary python",
  "code": "def C_dict2array(C):\n    \"\"\"Convert an OrderedDict containing C values to a 1D array.\"\"\"\n    return np.hstack([np.asarray(C[k]).ravel() for k in C_keys])",
  "label": 1,
  "code_tokens": "def C_dict2array ( C ) : return np . hstack ( [ np . asarray ( C [ k ] ) . ravel ( ) for k in C_keys ] )",
  "docstring_tokens": "Convert an OrderedDict containing C values to a 1D array ."
 },
 {
  "idx": "webquery-test-618",
  "doc": "bring out array from dictionary python",
  "code": "def convert_array(array):\n    \"\"\"\n    Converts an ARRAY string stored in the database back into a Numpy array.\n\n    Parameters\n    ----------\n    array: ARRAY\n        The array object to be converted back into a Numpy array.\n\n    Returns\n    -------\n    array\n            The converted Numpy array.\n\n    \"\"\"\n    out = io.BytesIO(array)\n    out.seek(0)\n    return np.load(out)",
  "label": 0,
  "code_tokens": "def convert_array ( array ) : out = io . BytesIO ( array ) out . seek ( 0 ) return np . load ( out )",
  "docstring_tokens": "Converts an ARRAY string stored in the database back into a Numpy array ."
 },
 {
  "idx": "webquery-test-619",
  "doc": "how to make 2d arraylist python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-620",
  "doc": "how to make 2d arraylist python",
  "code": "def torecarray(*args, **kwargs):\n    \"\"\"\n    Convenient shorthand for ``toarray(*args, **kwargs).view(np.recarray)``.\n\n    \"\"\"\n\n    import numpy as np\n    return toarray(*args, **kwargs).view(np.recarray)",
  "label": 0,
  "code_tokens": "def torecarray ( * args , * * kwargs ) : import numpy as np return toarray ( * args , * * kwargs ) . view ( np . recarray )",
  "docstring_tokens": "Convenient shorthand for toarray ( * args ** kwargs ) . view ( np . recarray ) ."
 },
 {
  "idx": "webquery-test-621",
  "doc": "turn pair of rows into one row python",
  "code": "def pivot(self):\n        \"\"\"\n        transposes rows and columns\n        \"\"\"\n        self.op_data = [list(i) for i in zip(*self.ip_data)]",
  "label": 0,
  "code_tokens": "def pivot ( self ) : self . op_data = [ list ( i ) for i in zip ( * self . ip_data ) ]",
  "docstring_tokens": "transposes rows and columns"
 },
 {
  "idx": "webquery-test-622",
  "doc": "turn pair of rows into one row python",
  "code": "def partition(list_, columns=2):\n    \"\"\"\n    Break a list into ``columns`` number of columns.\n    \"\"\"\n\n    iter_ = iter(list_)\n    columns = int(columns)\n    rows = []\n\n    while True:\n        row = []\n        for column_number in range(1, columns + 1):\n            try:\n                value = six.next(iter_)\n            except StopIteration:\n                pass\n            else:\n                row.append(value)\n\n        if not row:\n            return rows\n        rows.append(row)",
  "label": 0,
  "code_tokens": "def partition ( list_ , columns = 2 ) : iter_ = iter ( list_ ) columns = int ( columns ) rows = [ ] while True : row = [ ] for column_number in range ( 1 , columns + 1 ) : try : value = six . next ( iter_ ) except StopIteration : pass else : row . append ( value ) if not row : return rows rows . append ( row )",
  "docstring_tokens": "Break a list into columns number of columns ."
 },
 {
  "idx": "webquery-test-623",
  "doc": "how to retreive json data from dynamic url using python",
  "code": "def get_jsonparsed_data(url):\n    \"\"\"Receive the content of ``url``, parse it as JSON and return the\n       object.\n    \"\"\"\n    response = urlopen(url)\n    data = response.read().decode('utf-8')\n    return json.loads(data)",
  "label": 1,
  "code_tokens": "def get_jsonparsed_data ( url ) : response = urlopen ( url ) data = response . read ( ) . decode ( 'utf-8' ) return json . loads ( data )",
  "docstring_tokens": "Receive the content of url parse it as JSON and return the object ."
 },
 {
  "idx": "webquery-test-624",
  "doc": "how to retreive json data from dynamic url using python",
  "code": "def load_data(url):\n\t\"\"\"\n\t\"\"\"\n\n\t# http request\n\tr = requests.get(url)\n\n\t# decode to json\n\tdata = r.json()\n\n\treturn data",
  "label": 1,
  "code_tokens": "def load_data ( url ) : # http request r = requests . get ( url ) # decode to json data = r . json ( ) return data",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-625",
  "doc": "python remove punctuation and stop words from string",
  "code": "def unpunctuate(s, *, char_blacklist=string.punctuation):\n    \"\"\" Remove punctuation from string s. \"\"\"\n    # remove punctuation\n    s = \"\".join(c for c in s if c not in char_blacklist)\n    # remove consecutive spaces\n    return \" \".join(filter(None, s.split(\" \")))",
  "label": 0,
  "code_tokens": "def unpunctuate ( s , * , char_blacklist = string . punctuation ) : # remove punctuation s = \"\" . join ( c for c in s if c not in char_blacklist ) # remove consecutive spaces return \" \" . join ( filter ( None , s . split ( \" \" ) ) )",
  "docstring_tokens": "Remove punctuation from string s ."
 },
 {
  "idx": "webquery-test-626",
  "doc": "python remove punctuation and stop words from string",
  "code": "def clean(self, text):\n        \"\"\"Remove all unwanted characters from text.\"\"\"\n        return ''.join([c for c in text if c in self.alphabet])",
  "label": 0,
  "code_tokens": "def clean ( self , text ) : return '' . join ( [ c for c in text if c in self . alphabet ] )",
  "docstring_tokens": "Remove all unwanted characters from text ."
 },
 {
  "idx": "webquery-test-627",
  "doc": "python list to store your data",
  "code": "def sflow_sample_rate(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        sflow = ET.SubElement(config, \"sflow\", xmlns=\"urn:brocade.com:mgmt:brocade-sflow\")\n        sample_rate = ET.SubElement(sflow, \"sample-rate\")\n        sample_rate.text = kwargs.pop('sample_rate')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 0,
  "code_tokens": "def sflow_sample_rate ( self , * * kwargs ) : config = ET . Element ( \"config\" ) sflow = ET . SubElement ( config , \"sflow\" , xmlns = \"urn:brocade.com:mgmt:brocade-sflow\" ) sample_rate = ET . SubElement ( sflow , \"sample-rate\" ) sample_rate . text = kwargs . pop ( 'sample_rate' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-628",
  "doc": "python list to store your data",
  "code": "def set_http_application_url_input_config_http_app_url_op_type(self, **kwargs):\n        \"\"\"Auto Generated Code\n        \"\"\"\n        config = ET.Element(\"config\")\n        set_http_application_url = ET.Element(\"set_http_application_url\")\n        config = set_http_application_url\n        input = ET.SubElement(set_http_application_url, \"input\")\n        config_http_app_url = ET.SubElement(input, \"config-http-app-url\")\n        op_type = ET.SubElement(config_http_app_url, \"op-type\")\n        op_type.text = kwargs.pop('op_type')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)",
  "label": 0,
  "code_tokens": "def set_http_application_url_input_config_http_app_url_op_type ( self , * * kwargs ) : config = ET . Element ( \"config\" ) set_http_application_url = ET . Element ( \"set_http_application_url\" ) config = set_http_application_url input = ET . SubElement ( set_http_application_url , \"input\" ) config_http_app_url = ET . SubElement ( input , \"config-http-app-url\" ) op_type = ET . SubElement ( config_http_app_url , \"op-type\" ) op_type . text = kwargs . pop ( 'op_type' ) callback = kwargs . pop ( 'callback' , self . _callback ) return callback ( config )",
  "docstring_tokens": "Auto Generated Code"
 },
 {
  "idx": "webquery-test-629",
  "doc": "is 0 not an integer in python",
  "code": "def isInt(num):\n    \"\"\"Returns true if `num` is (sort of) an integer.\n    >>> isInt(3) == isInt(3.0) == 1\n    True\n    >>> isInt(3.2)\n    False\n    >>> import numpy\n    >>> isInt(numpy.array(1))\n    True\n    >>> isInt(numpy.array([1]))\n    False\n    \"\"\"\n    try:\n        len(num) # FIXME fails for Numeric but Numeric is obsolete\n    except:\n        try:\n            return (num - math.floor(num) == 0) == True\n        except: return False\n    else: return False",
  "label": 0,
  "code_tokens": "def isInt ( num ) : try : len ( num ) # FIXME fails for Numeric but Numeric is obsolete except : try : return ( num - math . floor ( num ) == 0 ) == True except : return False else : return False",
  "docstring_tokens": "Returns true if num is ( sort of ) an integer . >>> isInt ( 3 ) == isInt ( 3 . 0 ) == 1 True >>> isInt ( 3 . 2 ) False >>> import numpy >>> isInt ( numpy . array ( 1 )) True >>> isInt ( numpy . array ( [ 1 ] )) False"
 },
 {
  "idx": "webquery-test-630",
  "doc": "is 0 not an integer in python",
  "code": "def to_int(self):\n        \"\"\"Convert vector to an integer, if possible.\n\n        This is only useful for arrays filled with zero/one entries.\n        \"\"\"\n        num = self.to_uint()\n        if num and self._items[-1].unbox():\n            return num - (1 << self.size)\n        else:\n            return num",
  "label": 0,
  "code_tokens": "def to_int ( self ) : num = self . to_uint ( ) if num and self . _items [ - 1 ] . unbox ( ) : return num - ( 1 << self . size ) else : return num",
  "docstring_tokens": "Convert vector to an integer if possible ."
 },
 {
  "idx": "webquery-test-631",
  "doc": "change a list to an int in python",
  "code": "def str2int(num, radix=10, alphabet=BASE85):\n    \"\"\"helper function for quick base conversions from strings to integers\"\"\"\n    return NumConv(radix, alphabet).str2int(num)",
  "label": 1,
  "code_tokens": "def str2int ( num , radix = 10 , alphabet = BASE85 ) : return NumConv ( radix , alphabet ) . str2int ( num )",
  "docstring_tokens": "helper function for quick base conversions from strings to integers"
 },
 {
  "idx": "webquery-test-632",
  "doc": "change a list to an int in python",
  "code": "def valuesToInts(values):\n    \"\"\"\n    Iterable of values to ints (nonvalid = None)\n    \"\"\"\n    res = []\n    append = res.append\n    for d in values:\n        if isinstance(d, int):\n            append(d)\n        else:\n            append(valToInt(d))\n    return res",
  "label": 1,
  "code_tokens": "def valuesToInts ( values ) : res = [ ] append = res . append for d in values : if isinstance ( d , int ) : append ( d ) else : append ( valToInt ( d ) ) return res",
  "docstring_tokens": "Iterable of values to ints ( nonvalid = None )"
 },
 {
  "idx": "webquery-test-633",
  "doc": "how to change datetime to float in python",
  "code": "def date_to_number(self, date):\n        \"\"\"\n        Converts a date or datetime instance to a corresponding float value.\n        \"\"\"\n        if isinstance(date, datetime.datetime):\n            delta = date - self._null_date\n        elif isinstance(date, datetime.date):\n            delta = date - self._null_date.date()\n        else:\n            raise TypeError(date)\n        return delta.days + delta.seconds / (24.0 * 60 * 60)",
  "label": 1,
  "code_tokens": "def date_to_number ( self , date ) : if isinstance ( date , datetime . datetime ) : delta = date - self . _null_date elif isinstance ( date , datetime . date ) : delta = date - self . _null_date . date ( ) else : raise TypeError ( date ) return delta . days + delta . seconds / ( 24.0 * 60 * 60 )",
  "docstring_tokens": "Converts a date or datetime instance to a corresponding float value ."
 },
 {
  "idx": "webquery-test-634",
  "doc": "how to change datetime to float in python",
  "code": "def _dt_to_float_ordinal(dt):\n    \"\"\"\n    Convert :mod:`datetime` to the Gregorian date as UTC float days,\n    preserving hours, minutes, seconds and microseconds.  Return value\n    is a :func:`float`.\n    \"\"\"\n    if (isinstance(dt, (np.ndarray, Index, ABCSeries)\n                   ) and is_datetime64_ns_dtype(dt)):\n        base = dates.epoch2num(dt.asi8 / 1.0E9)\n    else:\n        base = dates.date2num(dt)\n    return base",
  "label": 1,
  "code_tokens": "def _dt_to_float_ordinal ( dt ) : if ( isinstance ( dt , ( np . ndarray , Index , ABCSeries ) ) and is_datetime64_ns_dtype ( dt ) ) : base = dates . epoch2num ( dt . asi8 / 1.0E9 ) else : base = dates . date2num ( dt ) return base",
  "docstring_tokens": "Convert : mod : datetime to the Gregorian date as UTC float days preserving hours minutes seconds and microseconds . Return value is a : func : float ."
 },
 {
  "idx": "webquery-test-635",
  "doc": "python3 switch window focus linux",
  "code": "def inFocus(self):\n        \"\"\"Set GUI on-top flag\"\"\"\n        previous_flags = self.window.flags()\n        self.window.setFlags(previous_flags |\n                             QtCore.Qt.WindowStaysOnTopHint)",
  "label": 0,
  "code_tokens": "def inFocus ( self ) : previous_flags = self . window . flags ( ) self . window . setFlags ( previous_flags | QtCore . Qt . WindowStaysOnTopHint )",
  "docstring_tokens": "Set GUI on - top flag"
 },
 {
  "idx": "webquery-test-636",
  "doc": "python3 switch window focus linux",
  "code": "def SwitchToThisWindow(handle: int) -> None:\n    \"\"\"\n    SwitchToThisWindow from Win32.\n    handle: int, the handle of a native window.\n    \"\"\"\n    ctypes.windll.user32.SwitchToThisWindow(ctypes.c_void_p(handle), 1)",
  "label": 0,
  "code_tokens": "def SwitchToThisWindow ( handle : int ) -> None : ctypes . windll . user32 . SwitchToThisWindow ( ctypes . c_void_p ( handle ) , 1 )",
  "docstring_tokens": "SwitchToThisWindow from Win32 . handle : int the handle of a native window ."
 },
 {
  "idx": "webquery-test-637",
  "doc": "return row python 2 dimensional list",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-638",
  "doc": "return row python 2 dimensional list",
  "code": "def to_list(self):\n        \"\"\"Convert this confusion matrix into a 2x2 plain list of values.\"\"\"\n        return [[int(self.table.cell_values[0][1]), int(self.table.cell_values[0][2])],\n                [int(self.table.cell_values[1][1]), int(self.table.cell_values[1][2])]]",
  "label": 0,
  "code_tokens": "def to_list ( self ) : return [ [ int ( self . table . cell_values [ 0 ] [ 1 ] ) , int ( self . table . cell_values [ 0 ] [ 2 ] ) ] , [ int ( self . table . cell_values [ 1 ] [ 1 ] ) , int ( self . table . cell_values [ 1 ] [ 2 ] ) ] ]",
  "docstring_tokens": "Convert this confusion matrix into a 2x2 plain list of values ."
 },
 {
  "idx": "webquery-test-639",
  "doc": "python how to extract html of a webpage",
  "code": "def html_to_text(content):\n    \"\"\" Converts html content to plain text \"\"\"\n    text = None\n    h2t = html2text.HTML2Text()\n    h2t.ignore_links = False\n    text = h2t.handle(content)\n    return text",
  "label": 1,
  "code_tokens": "def html_to_text ( content ) : text = None h2t = html2text . HTML2Text ( ) h2t . ignore_links = False text = h2t . handle ( content ) return text",
  "docstring_tokens": "Converts html content to plain text"
 },
 {
  "idx": "webquery-test-640",
  "doc": "python how to extract html of a webpage",
  "code": "def markdown_to_text(body):\n    \"\"\"Converts markdown to text.\n\n    Args:\n        body: markdown (or plaintext, or maybe HTML) input\n\n    Returns:\n        Plaintext with all tags and frills removed\n    \"\"\"\n    # Turn our input into HTML\n    md = markdown.markdown(body, extensions=[\n        'markdown.extensions.extra'\n    ])\n\n    # Safely parse HTML so that we don't have to parse it ourselves\n    soup = BeautifulSoup(md, 'html.parser')\n\n    # Return just the text of the parsed HTML\n    return soup.get_text()",
  "label": 0,
  "code_tokens": "def markdown_to_text ( body ) : # Turn our input into HTML md = markdown . markdown ( body , extensions = [ 'markdown.extensions.extra' ] ) # Safely parse HTML so that we don't have to parse it ourselves soup = BeautifulSoup ( md , 'html.parser' ) # Return just the text of the parsed HTML return soup . get_text ( )",
  "docstring_tokens": "Converts markdown to text ."
 },
 {
  "idx": "webquery-test-641",
  "doc": "how to make python run until someone types",
  "code": "def main(idle):\n    \"\"\"Any normal python logic which runs a loop. Can take arguments.\"\"\"\n    while True:\n\n        LOG.debug(\"Sleeping for {0} seconds.\".format(idle))\n        time.sleep(idle)",
  "label": 0,
  "code_tokens": "def main ( idle ) : while True : LOG . debug ( \"Sleeping for {0} seconds.\" . format ( idle ) ) time . sleep ( idle )",
  "docstring_tokens": "Any normal python logic which runs a loop . Can take arguments ."
 },
 {
  "idx": "webquery-test-642",
  "doc": "how to make python run until someone types",
  "code": "def run(self, forever=True):\n        \"\"\"start the bot\"\"\"\n        loop = self.create_connection()\n        self.add_signal_handlers()\n        if forever:\n            loop.run_forever()",
  "label": 0,
  "code_tokens": "def run ( self , forever = True ) : loop = self . create_connection ( ) self . add_signal_handlers ( ) if forever : loop . run_forever ( )",
  "docstring_tokens": "start the bot"
 },
 {
  "idx": "webquery-test-643",
  "doc": "python string match ignor case",
  "code": "def ismatch(text, pattern):\n    \"\"\"Test whether text contains string or matches regex.\"\"\"\n\n    if hasattr(pattern, 'search'):\n        return pattern.search(text) is not None\n    else:\n        return pattern in text if Config.options.case_sensitive \\\n            else pattern.lower() in text.lower()",
  "label": 0,
  "code_tokens": "def ismatch ( text , pattern ) : if hasattr ( pattern , 'search' ) : return pattern . search ( text ) is not None else : return pattern in text if Config . options . case_sensitive else pattern . lower ( ) in text . lower ( )",
  "docstring_tokens": "Test whether text contains string or matches regex ."
 },
 {
  "idx": "webquery-test-644",
  "doc": "python string match ignor case",
  "code": "def find_whole_word(w):\n    \"\"\"\n    Scan through string looking for a location where this word produces a match,\n    and return a corresponding MatchObject instance.\n    Return None if no position in the string matches the pattern;\n    note that this is different from finding a zero-length match at some point in the string.\n    \"\"\"\n    return re.compile(r'\\b({0})\\b'.format(w), flags=re.IGNORECASE).search",
  "label": 1,
  "code_tokens": "def find_whole_word ( w ) : return re . compile ( r'\\b({0})\\b' . format ( w ) , flags = re . IGNORECASE ) . search",
  "docstring_tokens": "Scan through string looking for a location where this word produces a match and return a corresponding MatchObject instance . Return None if no position in the string matches the pattern ; note that this is different from finding a zero - length match at some point in the string ."
 },
 {
  "idx": "webquery-test-645",
  "doc": "how to split a string by colons python",
  "code": "def split(s):\n  \"\"\"Uses dynamic programming to infer the location of spaces in a string without spaces.\"\"\"\n  l = [_split(x) for x in _SPLIT_RE.split(s)]\n  return [item for sublist in l for item in sublist]",
  "label": 0,
  "code_tokens": "def split ( s ) : l = [ _split ( x ) for x in _SPLIT_RE . split ( s ) ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Uses dynamic programming to infer the location of spaces in a string without spaces ."
 },
 {
  "idx": "webquery-test-646",
  "doc": "how to split a string by colons python",
  "code": "def _split(string, splitters):\n    \"\"\"Splits a string into parts at multiple characters\"\"\"\n    part = ''\n    for character in string:\n        if character in splitters:\n            yield part\n            part = ''\n        else:\n            part += character\n    yield part",
  "label": 0,
  "code_tokens": "def _split ( string , splitters ) : part = '' for character in string : if character in splitters : yield part part = '' else : part += character yield part",
  "docstring_tokens": "Splits a string into parts at multiple characters"
 },
 {
  "idx": "webquery-test-647",
  "doc": "python extract date from timesdelta",
  "code": "def datetime64_to_datetime(dt):\n    \"\"\" convert numpy's datetime64 to datetime \"\"\"\n    dt64 = np.datetime64(dt)\n    ts = (dt64 - np.datetime64('1970-01-01T00:00:00')) / np.timedelta64(1, 's')\n    return datetime.datetime.utcfromtimestamp(ts)",
  "label": 0,
  "code_tokens": "def datetime64_to_datetime ( dt ) : dt64 = np . datetime64 ( dt ) ts = ( dt64 - np . datetime64 ( '1970-01-01T00:00:00' ) ) / np . timedelta64 ( 1 , 's' ) return datetime . datetime . utcfromtimestamp ( ts )",
  "docstring_tokens": "convert numpy s datetime64 to datetime"
 },
 {
  "idx": "webquery-test-648",
  "doc": "python extract date from timesdelta",
  "code": "def timestamp_from_dt(dt, epoch=datetime(1970, 1, 1)):\n    \"\"\"\n    Convert a datetime to a timestamp.\n    https://stackoverflow.com/a/8778548/141395\n    \"\"\"\n    delta = dt - epoch\n    # return delta.total_seconds()\n    return delta.seconds + delta.days * 86400",
  "label": 1,
  "code_tokens": "def timestamp_from_dt ( dt , epoch = datetime ( 1970 , 1 , 1 ) ) : delta = dt - epoch # return delta.total_seconds() return delta . seconds + delta . days * 86400",
  "docstring_tokens": "Convert a datetime to a timestamp . https : // stackoverflow . com / a / 8778548 / 141395"
 },
 {
  "idx": "webquery-test-649",
  "doc": "get specific index of a string python",
  "code": "def find_first_in_list(txt: str, str_list: [str]) -> int:  # type: ignore\n    \"\"\"\n    Returns the index of the earliest occurence of an item from a list in a string\n\n    Ex: find_first_in_list('foobar', ['bar', 'fin']) -> 3\n    \"\"\"\n    start = len(txt) + 1\n    for item in str_list:\n        if start > txt.find(item) > -1:\n            start = txt.find(item)\n    return start if len(txt) + 1 > start > -1 else -1",
  "label": 1,
  "code_tokens": "def find_first_in_list ( txt : str , str_list : [ str ] ) -> int : # type: ignore start = len ( txt ) + 1 for item in str_list : if start > txt . find ( item ) > - 1 : start = txt . find ( item ) return start if len ( txt ) + 1 > start > - 1 else - 1",
  "docstring_tokens": "Returns the index of the earliest occurence of an item from a list in a string"
 },
 {
  "idx": "webquery-test-650",
  "doc": "get specific index of a string python",
  "code": "def get_list_index(lst, index_or_name):\n    \"\"\"\n    Return the index of an element in the list.\n\n    Args:\n        lst (list): The list.\n        index_or_name (int or str): The value of the reference element, or directly its numeric index.\n\n    Returns:\n        (int) The index of the element in the list.\n    \"\"\"\n    if isinstance(index_or_name, six.integer_types):\n        return index_or_name\n\n    return lst.index(index_or_name)",
  "label": 1,
  "code_tokens": "def get_list_index ( lst , index_or_name ) : if isinstance ( index_or_name , six . integer_types ) : return index_or_name return lst . index ( index_or_name )",
  "docstring_tokens": "Return the index of an element in the list ."
 },
 {
  "idx": "webquery-test-651",
  "doc": "make 2d list in python from 1d",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-652",
  "doc": "make 2d list in python from 1d",
  "code": "def pack_triples_numpy(triples):\n    \"\"\"Packs a list of triple indexes into a 2D numpy array.\"\"\"\n    if len(triples) == 0:\n        return np.array([], dtype=np.int64)\n    return np.stack(list(map(_transform_triple_numpy, triples)), axis=0)",
  "label": 0,
  "code_tokens": "def pack_triples_numpy ( triples ) : if len ( triples ) == 0 : return np . array ( [ ] , dtype = np . int64 ) return np . stack ( list ( map ( _transform_triple_numpy , triples ) ) , axis = 0 )",
  "docstring_tokens": "Packs a list of triple indexes into a 2D numpy array ."
 },
 {
  "idx": "webquery-test-653",
  "doc": "python how to slice a dictionary",
  "code": "def chunks(data, size):\n    \"\"\"\n    Get chink for dict, copy as-is from https://stackoverflow.com/a/8290508/6753144\n    \"\"\"\n    it = iter(data)\n    for i in range(0, len(data), size):\n        yield {k: data[k] for k in islice(it, size)}",
  "label": 0,
  "code_tokens": "def chunks ( data , size ) : it = iter ( data ) for i in range ( 0 , len ( data ) , size ) : yield { k : data [ k ] for k in islice ( it , size ) }",
  "docstring_tokens": "Get chink for dict copy as - is from https : // stackoverflow . com / a / 8290508 / 6753144"
 },
 {
  "idx": "webquery-test-654",
  "doc": "python how to slice a dictionary",
  "code": "def dict_chunks(dictionary, chunk):\n    \"\"\"Return a list of dictionary with n-keys (chunk) per list.\"\"\"\n    return [{k: v for k, v in dictionary.items() if k in i} for i in chunks(list(dictionary.keys()), chunk)]",
  "label": 0,
  "code_tokens": "def dict_chunks ( dictionary , chunk ) : return [ { k : v for k , v in dictionary . items ( ) if k in i } for i in chunks ( list ( dictionary . keys ( ) ) , chunk ) ]",
  "docstring_tokens": "Return a list of dictionary with n - keys ( chunk ) per list ."
 },
 {
  "idx": "webquery-test-655",
  "doc": "accessing only numeric values in a tuple python",
  "code": "def rgba_bytes_tuple(self, x):\n        \"\"\"Provides the color corresponding to value `x` in the\n        form of a tuple (R,G,B,A) with int values between 0 and 255.\n        \"\"\"\n        return tuple(int(u*255.9999) for u in self.rgba_floats_tuple(x))",
  "label": 0,
  "code_tokens": "def rgba_bytes_tuple ( self , x ) : return tuple ( int ( u * 255.9999 ) for u in self . rgba_floats_tuple ( x ) )",
  "docstring_tokens": "Provides the color corresponding to value x in the form of a tuple ( R G B A ) with int values between 0 and 255 ."
 },
 {
  "idx": "webquery-test-656",
  "doc": "accessing only numeric values in a tuple python",
  "code": "def get_value_tuple(self):\n        \"\"\"\n        Returns a tuple of the color's values (in order). For example,\n        an LabColor object will return (lab_l, lab_a, lab_b), where each\n        member of the tuple is the float value for said variable.\n        \"\"\"\n        retval = tuple()\n        for val in self.VALUES:\n            retval += (getattr(self, val),)\n        return retval",
  "label": 0,
  "code_tokens": "def get_value_tuple ( self ) : retval = tuple ( ) for val in self . VALUES : retval += ( getattr ( self , val ) , ) return retval",
  "docstring_tokens": "Returns a tuple of the color s values ( in order ) . For example an LabColor object will return ( lab_l lab_a lab_b ) where each member of the tuple is the float value for said variable ."
 },
 {
  "idx": "webquery-test-657",
  "doc": "remove whitespace in a list in python",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 0,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-658",
  "doc": "remove whitespace in a list in python",
  "code": "def strip_spaces(value, sep=None, join=True):\n    \"\"\"Cleans trailing whitespaces and replaces also multiple whitespaces with a single space.\"\"\"\n    value = value.strip()\n    value = [v.strip() for v in value.split(sep)]\n    join_sep = sep or ' '\n    return join_sep.join(value) if join else value",
  "label": 1,
  "code_tokens": "def strip_spaces ( value , sep = None , join = True ) : value = value . strip ( ) value = [ v . strip ( ) for v in value . split ( sep ) ] join_sep = sep or ' ' return join_sep . join ( value ) if join else value",
  "docstring_tokens": "Cleans trailing whitespaces and replaces also multiple whitespaces with a single space ."
 },
 {
  "idx": "webquery-test-659",
  "doc": "how to pass values continuosly from python to html",
  "code": "def do_forceescape(value):\n    \"\"\"Enforce HTML escaping.  This will probably double escape variables.\"\"\"\n    if hasattr(value, '__html__'):\n        value = value.__html__()\n    return escape(text_type(value))",
  "label": 0,
  "code_tokens": "def do_forceescape ( value ) : if hasattr ( value , '__html__' ) : value = value . __html__ ( ) return escape ( text_type ( value ) )",
  "docstring_tokens": "Enforce HTML escaping . This will probably double escape variables ."
 },
 {
  "idx": "webquery-test-660",
  "doc": "how to pass values continuosly from python to html",
  "code": "def example_view():\n    text = request.args.get('text', 'http://www.youtube.com/watch?v=nda_OSWeyn8')\n    html = request.args.get('html', \"\"\"\n<p>This is a test</p>\n<p>http://www.youtube.com/watch?v=nda_OSWeyn8</p>\n<p>This will get rendered as a link: http://www.youtube.com/watch?v=nda_OSWeyn8</p>\n<p>This will not be modified: <a href=\"http://www.google.com/\">http://www.youtube.com/watch?v=nda_OSWeyn8</a></p>\n    \"\"\")\n    return render_template('example.html', text=text, html=html)",
  "label": 1,
  "code_tokens": "def example_view ( ) : text = request . args . get ( 'text' , 'http://www.youtube.com/watch?v=nda_OSWeyn8' ) html = request . args . get ( 'html' , \"\"\"\n<p>This is a test</p>\n<p>http://www.youtube.com/watch?v=nda_OSWeyn8</p>\n<p>This will get rendered as a link: http://www.youtube.com/watch?v=nda_OSWeyn8</p>\n<p>This will not be modified: <a href=\"http://www.google.com/\">http://www.youtube.com/watch?v=nda_OSWeyn8</a></p>\n    \"\"\" ) return render_template ( 'example.html' , text = text , html = html )",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-661",
  "doc": "date greater than current date python",
  "code": "def created_today(self):\n        \"\"\"Return True if created today.\"\"\"\n        if self.datetime.date() == datetime.today().date():\n            return True\n        return False",
  "label": 0,
  "code_tokens": "def created_today ( self ) : if self . datetime . date ( ) == datetime . today ( ) . date ( ) : return True return False",
  "docstring_tokens": "Return True if created today ."
 },
 {
  "idx": "webquery-test-662",
  "doc": "date greater than current date python",
  "code": "def now_time(str=False):\n    \"\"\"Get the current time.\"\"\"\n    if str:\n        return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return datetime.datetime.now()",
  "label": 0,
  "code_tokens": "def now_time ( str = False ) : if str : return datetime . datetime . now ( ) . strftime ( \"%Y-%m-%d %H:%M:%S\" ) return datetime . datetime . now ( )",
  "docstring_tokens": "Get the current time ."
 },
 {
  "idx": "webquery-test-663",
  "doc": "python how to access a 4d array",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-664",
  "doc": "python how to access a 4d array",
  "code": "def torecarray(*args, **kwargs):\n    \"\"\"\n    Convenient shorthand for ``toarray(*args, **kwargs).view(np.recarray)``.\n\n    \"\"\"\n\n    import numpy as np\n    return toarray(*args, **kwargs).view(np.recarray)",
  "label": 0,
  "code_tokens": "def torecarray ( * args , * * kwargs ) : import numpy as np return toarray ( * args , * * kwargs ) . view ( np . recarray )",
  "docstring_tokens": "Convenient shorthand for toarray ( * args ** kwargs ) . view ( np . recarray ) ."
 },
 {
  "idx": "webquery-test-665",
  "doc": "put two lists together python as dictionary",
  "code": "def list2dict(lst):\n    \"\"\"Takes a list of (key,value) pairs and turns it into a dict.\"\"\"\n\n    dic = {}\n    for k,v in lst: dic[k] = v\n    return dic",
  "label": 0,
  "code_tokens": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic",
  "docstring_tokens": "Takes a list of ( key value ) pairs and turns it into a dict ."
 },
 {
  "idx": "webquery-test-666",
  "doc": "put two lists together python as dictionary",
  "code": "def list_of_lists_to_dict(l):\n    \"\"\" Convert list of key,value lists to dict\n\n    [['id', 1], ['id', 2], ['id', 3], ['foo': 4]]\n    {'id': [1, 2, 3], 'foo': [4]}\n    \"\"\"\n    d = {}\n    for key, val in l:\n        d.setdefault(key, []).append(val)\n    return d",
  "label": 0,
  "code_tokens": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d",
  "docstring_tokens": "Convert list of key value lists to dict"
 },
 {
  "idx": "webquery-test-667",
  "doc": "count characters length python",
  "code": "def array_dim(arr):\n    \"\"\"Return the size of a multidimansional array.\n    \"\"\"\n    dim = []\n    while True:\n        try:\n            dim.append(len(arr))\n            arr = arr[0]\n        except TypeError:\n            return dim",
  "label": 0,
  "code_tokens": "def array_dim ( arr ) : dim = [ ] while True : try : dim . append ( len ( arr ) ) arr = arr [ 0 ] except TypeError : return dim",
  "docstring_tokens": "Return the size of a multidimansional array ."
 },
 {
  "idx": "webquery-test-668",
  "doc": "count characters length python",
  "code": "def __len__(self):\n        \"\"\" This will equal 124 for the V1 database. \"\"\"\n        length = 0\n        for typ, siz, _ in self.format:\n            length += siz\n        return length",
  "label": 0,
  "code_tokens": "def __len__ ( self ) : length = 0 for typ , siz , _ in self . format : length += siz return length",
  "docstring_tokens": "This will equal 124 for the V1 database ."
 },
 {
  "idx": "webquery-test-669",
  "doc": "check if an element exist python",
  "code": "def elXpath(self, xpath, dom=None):\n        \"\"\"check if element is present by css\"\"\"\n        if dom is None:\n            dom = self.browser\n        return expect(dom.is_element_present_by_xpath, args=[xpath])",
  "label": 0,
  "code_tokens": "def elXpath ( self , xpath , dom = None ) : if dom is None : dom = self . browser return expect ( dom . is_element_present_by_xpath , args = [ xpath ] )",
  "docstring_tokens": "check if element is present by css"
 },
 {
  "idx": "webquery-test-670",
  "doc": "check if an element exist python",
  "code": "def is_present(self, selector):\n        \"\"\"Check if an element is present in the dom or not\n\n        This method won't check if the element is displayed or not\n        This method won't wait until the element is visible or present\n        This method won't raise any exception if the element is not present\n\n        Returns:\n            bool: True if the element is present; False otherwise\n        \"\"\"\n        self.debug_log(\"Is present (%s)\" % selector)\n\n        element = self.find(\n            selector,\n            raise_exception=False,\n            wait_until_present=False,\n            wait_until_visible=False\n        )\n        if element:\n            self.debug_log(\"is present: True\")\n            return True\n        else:\n            self.debug_log(\"is present: False\")\n            return False",
  "label": 1,
  "code_tokens": "def is_present ( self , selector ) : self . debug_log ( \"Is present (%s)\" % selector ) element = self . find ( selector , raise_exception = False , wait_until_present = False , wait_until_visible = False ) if element : self . debug_log ( \"is present: True\" ) return True else : self . debug_log ( \"is present: False\" ) return False",
  "docstring_tokens": "Check if an element is present in the dom or not"
 },
 {
  "idx": "webquery-test-671",
  "doc": "python setter for tupple",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 1,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-672",
  "doc": "python setter for tupple",
  "code": "def get_value_tuple(self):\n        \"\"\"\n        Returns a tuple of the color's values (in order). For example,\n        an LabColor object will return (lab_l, lab_a, lab_b), where each\n        member of the tuple is the float value for said variable.\n        \"\"\"\n        retval = tuple()\n        for val in self.VALUES:\n            retval += (getattr(self, val),)\n        return retval",
  "label": 1,
  "code_tokens": "def get_value_tuple ( self ) : retval = tuple ( ) for val in self . VALUES : retval += ( getattr ( self , val ) , ) return retval",
  "docstring_tokens": "Returns a tuple of the color s values ( in order ) . For example an LabColor object will return ( lab_l lab_a lab_b ) where each member of the tuple is the float value for said variable ."
 },
 {
  "idx": "webquery-test-673",
  "doc": "sort uniq in python strings",
  "code": "def uniqued(iterable):\n    \"\"\"Return unique list of ``iterable`` items preserving order.\n\n    >>> uniqued('spameggs')\n    ['s', 'p', 'a', 'm', 'e', 'g']\n    \"\"\"\n    seen = set()\n    return [item for item in iterable if item not in seen and not seen.add(item)]",
  "label": 0,
  "code_tokens": "def uniqued ( iterable ) : seen = set ( ) return [ item for item in iterable if item not in seen and not seen . add ( item ) ]",
  "docstring_tokens": "Return unique list of iterable items preserving order ."
 },
 {
  "idx": "webquery-test-674",
  "doc": "sort uniq in python strings",
  "code": "def _uniquify(_list):\n    \"\"\"Remove duplicates in a list.\"\"\"\n    seen = set()\n    result = []\n    for x in _list:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result",
  "label": 0,
  "code_tokens": "def _uniquify ( _list ) : seen = set ( ) result = [ ] for x in _list : if x not in seen : result . append ( x ) seen . add ( x ) return result",
  "docstring_tokens": "Remove duplicates in a list ."
 },
 {
  "idx": "webquery-test-675",
  "doc": "given a list, calculate the sum of its value recursively python",
  "code": "def calc_list_average(l):\n    \"\"\"\n    Calculates the average value of a list of numbers\n    Returns a float\n    \"\"\"\n    total = 0.0\n    for value in l:\n        total += value\n    return total / len(l)",
  "label": 1,
  "code_tokens": "def calc_list_average ( l ) : total = 0.0 for value in l : total += value return total / len ( l )",
  "docstring_tokens": "Calculates the average value of a list of numbers Returns a float"
 },
 {
  "idx": "webquery-test-676",
  "doc": "given a list, calculate the sum of its value recursively python",
  "code": "def cumsum(inlist):\n    \"\"\"\nReturns a list consisting of the cumulative sum of the items in the\npassed list.\n\nUsage:   lcumsum(inlist)\n\"\"\"\n    newlist = copy.deepcopy(inlist)\n    for i in range(1, len(newlist)):\n        newlist[i] = newlist[i] + newlist[i - 1]\n    return newlist",
  "label": 0,
  "code_tokens": "def cumsum ( inlist ) : newlist = copy . deepcopy ( inlist ) for i in range ( 1 , len ( newlist ) ) : newlist [ i ] = newlist [ i ] + newlist [ i - 1 ] return newlist",
  "docstring_tokens": "Returns a list consisting of the cumulative sum of the items in the passed list ."
 },
 {
  "idx": "webquery-test-677",
  "doc": "python pil capture selected screen",
  "code": "def getBitmap(self):\n        \"\"\" Captures screen area of this region, at least the part that is on the screen\n\n        Returns image as numpy array\n        \"\"\"\n        return PlatformManager.getBitmapFromRect(self.x, self.y, self.w, self.h)",
  "label": 1,
  "code_tokens": "def getBitmap ( self ) : return PlatformManager . getBitmapFromRect ( self . x , self . y , self . w , self . h )",
  "docstring_tokens": "Captures screen area of this region at least the part that is on the screen"
 },
 {
  "idx": "webquery-test-678",
  "doc": "python pil capture selected screen",
  "code": "def transform_coords(self, width, height):\n\t\t\"\"\"Return the current absolute (x, y) coordinates of\n\t\tthe tablet tool event, transformed to screen coordinates and\n\t\twhether they have changed in this event.\n\n\t\tNote:\n\t\t\tOn some devices, returned value may be negative or larger than\n\t\t\tthe width of the device. See `Out-of-bounds motion events`_\n\t\t\tfor more details.\n\t\tArgs:\n\t\t\twidth (int): The current output screen width.\n\t\t\theight (int): The current output screen height.\n\t\tReturns:\n\t\t\t((float, float), bool): The current absolute (x, y) coordinates\n\t\t\ttransformed to screen coordinates and whether they have changed.\n\t\t\"\"\"\n\n\t\tx = self._libinput.libinput_event_tablet_tool_get_x_transformed(\n\t\t\tself._handle, width)\n\t\ty = self._libinput.libinput_event_tablet_tool_get_y_transformed(\n\t\t\tself._handle, height)\n\t\tx_changed = self._libinput.libinput_event_tablet_tool_x_has_changed(\n\t\t\tself._handle)\n\t\ty_changed = self._libinput.libinput_event_tablet_tool_y_has_changed(\n\t\t\tself._handle)\n\t\treturn (x, y), x_changed or y_changed",
  "label": 0,
  "code_tokens": "def transform_coords ( self , width , height ) : x = self . _libinput . libinput_event_tablet_tool_get_x_transformed ( self . _handle , width ) y = self . _libinput . libinput_event_tablet_tool_get_y_transformed ( self . _handle , height ) x_changed = self . _libinput . libinput_event_tablet_tool_x_has_changed ( self . _handle ) y_changed = self . _libinput . libinput_event_tablet_tool_y_has_changed ( self . _handle ) return ( x , y ) , x_changed or y_changed",
  "docstring_tokens": "Return the current absolute ( x y ) coordinates of the tablet tool event transformed to screen coordinates and whether they have changed in this event ."
 },
 {
  "idx": "webquery-test-679",
  "doc": "how to print list alphabetical python",
  "code": "def __repr__(self):\n        \"\"\"\n        Basic string representation of the order.\n        \"\"\"\n        list_repr = \"<MarketOrderList: \\n\"\n\n        for order_list in [olist.orders for olist in self._orders.values()]:\n            for order in order_list:\n                list_repr += repr(order)\n\n        return list_repr",
  "label": 0,
  "code_tokens": "def __repr__ ( self ) : list_repr = \"<MarketOrderList: \\n\" for order_list in [ olist . orders for olist in self . _orders . values ( ) ] : for order in order_list : list_repr += repr ( order ) return list_repr",
  "docstring_tokens": "Basic string representation of the order ."
 },
 {
  "idx": "webquery-test-680",
  "doc": "how to print list alphabetical python",
  "code": "def _tuple_repr(data):\n    \"\"\"Return a repr() for a list/tuple\"\"\"\n    if len(data) == 1:\n        return \"(%s,)\" % rpr(data[0])\n    else:\n        return \"(%s)\" % \", \".join([rpr(x) for x in data])",
  "label": 0,
  "code_tokens": "def _tuple_repr ( data ) : if len ( data ) == 1 : return \"(%s,)\" % rpr ( data [ 0 ] ) else : return \"(%s)\" % \", \" . join ( [ rpr ( x ) for x in data ] )",
  "docstring_tokens": "Return a repr () for a list / tuple"
 },
 {
  "idx": "webquery-test-681",
  "doc": "python open a file and append",
  "code": "def add_binary_file(self, filename, address=0, overwrite=False):\n        \"\"\"Open given binary file and add its contents. Set `overwrite` to\n        ``True`` to allow already added data to be overwritten.\n\n        \"\"\"\n\n        with open(filename, 'rb') as fin:\n            self.add_binary(fin.read(), address, overwrite)",
  "label": 1,
  "code_tokens": "def add_binary_file ( self , filename , address = 0 , overwrite = False ) : with open ( filename , 'rb' ) as fin : self . add_binary ( fin . read ( ) , address , overwrite )",
  "docstring_tokens": "Open given binary file and add its contents . Set overwrite to True to allow already added data to be overwritten ."
 },
 {
  "idx": "webquery-test-682",
  "doc": "python open a file and append",
  "code": "def prepend_line(filepath, line):\n    \"\"\"Rewrite a file adding a line to its beginning.\n    \"\"\"\n    with open(filepath) as f:\n        lines = f.readlines()\n\n    lines.insert(0, line)\n\n    with open(filepath, 'w') as f:\n        f.writelines(lines)",
  "label": 1,
  "code_tokens": "def prepend_line ( filepath , line ) : with open ( filepath ) as f : lines = f . readlines ( ) lines . insert ( 0 , line ) with open ( filepath , 'w' ) as f : f . writelines ( lines )",
  "docstring_tokens": "Rewrite a file adding a line to its beginning ."
 },
 {
  "idx": "webquery-test-683",
  "doc": "python index of max in array",
  "code": "def MultiArgMax(x):\n  \"\"\"\n  Get tuple (actually a generator) of indices where the max value of\n  array x occurs. Requires that x have a max() method, as x.max()\n  (in the case of NumPy) is much faster than max(x).\n  For a simpler, faster argmax when there is only a single maximum entry,\n  or when knowing only the first index where the maximum occurs,\n  call argmax() on a NumPy array.\n\n  :param x: Any sequence that has a max() method.\n  :returns: Generator with the indices where the max value occurs.\n  \"\"\"\n  m = x.max()\n  return (i for i, v in enumerate(x) if v == m)",
  "label": 1,
  "code_tokens": "def MultiArgMax ( x ) : m = x . max ( ) return ( i for i , v in enumerate ( x ) if v == m )",
  "docstring_tokens": "Get tuple ( actually a generator ) of indices where the max value of array x occurs . Requires that x have a max () method as x . max () ( in the case of NumPy ) is much faster than max ( x ) . For a simpler faster argmax when there is only a single maximum entry or when knowing only the first index where the maximum occurs call argmax () on a NumPy array ."
 },
 {
  "idx": "webquery-test-684",
  "doc": "python index of max in array",
  "code": "def closest(xarr, val):\n    \"\"\" Return the index of the closest in xarr to value val \"\"\"\n    idx_closest = np.argmin(np.abs(np.array(xarr) - val))\n    return idx_closest",
  "label": 0,
  "code_tokens": "def closest ( xarr , val ) : idx_closest = np . argmin ( np . abs ( np . array ( xarr ) - val ) ) return idx_closest",
  "docstring_tokens": "Return the index of the closest in xarr to value val"
 },
 {
  "idx": "webquery-test-685",
  "doc": "first item in a tuple python",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 0,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-686",
  "doc": "first item in a tuple python",
  "code": "def compose_all(tups):\n  \"\"\"Compose all given tuples together.\"\"\"\n  from . import ast  # I weep for humanity\n  return functools.reduce(lambda x, y: x.compose(y), map(ast.make_tuple, tups), ast.make_tuple({}))",
  "label": 0,
  "code_tokens": "def compose_all ( tups ) : from . import ast # I weep for humanity return functools . reduce ( lambda x , y : x . compose ( y ) , map ( ast . make_tuple , tups ) , ast . make_tuple ( { } ) )",
  "docstring_tokens": "Compose all given tuples together ."
 },
 {
  "idx": "webquery-test-687",
  "doc": "python multiprocessing logger pass in by function",
  "code": "def debug(self, text):\n\t\t\"\"\" Ajout d'un message de log de type DEBUG \"\"\"\n\t\tself.logger.debug(\"{}{}\".format(self.message_prefix, text))",
  "label": 0,
  "code_tokens": "def debug ( self , text ) : self . logger . debug ( \"{}{}\" . format ( self . message_prefix , text ) )",
  "docstring_tokens": "Ajout d un message de log de type DEBUG"
 },
 {
  "idx": "webquery-test-688",
  "doc": "python multiprocessing logger pass in by function",
  "code": "def log(self, level, msg=None, *args, **kwargs):\n        \"\"\"Writes log out at any arbitray level.\"\"\"\n\n        return self._log(level, msg, args, kwargs)",
  "label": 0,
  "code_tokens": "def log ( self , level , msg = None , * args , * * kwargs ) : return self . _log ( level , msg , args , kwargs )",
  "docstring_tokens": "Writes log out at any arbitray level ."
 },
 {
  "idx": "webquery-test-689",
  "doc": "email function discord api python",
  "code": "def create_message(self, channel_id, text):\n        \"\"\"\n        Sends a message to a Discord channel or user via REST API\n\n        Args:\n            channel_id (string): ID of destingation Discord channel\n            text (string): Content of message\n        \"\"\"\n\n        baseurl = self.rest_baseurl + \\\n            '/channels/{}/messages'.format(channel_id)\n        requests.post(baseurl,\n                      headers=self.headers,\n                      data=json.dumps({'content': text}))",
  "label": 1,
  "code_tokens": "def create_message ( self , channel_id , text ) : baseurl = self . rest_baseurl + '/channels/{}/messages' . format ( channel_id ) requests . post ( baseurl , headers = self . headers , data = json . dumps ( { 'content' : text } ) )",
  "docstring_tokens": "Sends a message to a Discord channel or user via REST API"
 },
 {
  "idx": "webquery-test-690",
  "doc": "email function discord api python",
  "code": "def cmd(send, msg, args):\n    \"\"\"'Inspects a bot attribute.\n\n    Syntax: {command} <attr>\n\n    \"\"\"\n    if not hasattr(args['handler'], msg):\n        send(\"That attribute was not found in the handler.\")\n        return\n    send(str(getattr(args['handler'], msg)))",
  "label": 0,
  "code_tokens": "def cmd ( send , msg , args ) : if not hasattr ( args [ 'handler' ] , msg ) : send ( \"That attribute was not found in the handler.\" ) return send ( str ( getattr ( args [ 'handler' ] , msg ) ) )",
  "docstring_tokens": "Inspects a bot attribute ."
 },
 {
  "idx": "webquery-test-691",
  "doc": "python 3 iterate sort dictionary",
  "code": "def _dict_values_sorted_by_key(dictionary):\n    # This should be a yield from instead.\n    \"\"\"Internal helper to return the values of a dictionary, sorted by key.\n    \"\"\"\n    for _, value in sorted(dictionary.iteritems(), key=operator.itemgetter(0)):\n        yield value",
  "label": 1,
  "code_tokens": "def _dict_values_sorted_by_key ( dictionary ) : # This should be a yield from instead. for _ , value in sorted ( dictionary . iteritems ( ) , key = operator . itemgetter ( 0 ) ) : yield value",
  "docstring_tokens": "Internal helper to return the values of a dictionary sorted by key ."
 },
 {
  "idx": "webquery-test-692",
  "doc": "python 3 iterate sort dictionary",
  "code": "def csort(objs, key):\n    \"\"\"Order-preserving sorting function.\"\"\"\n    idxs = dict((obj, i) for (i, obj) in enumerate(objs))\n    return sorted(objs, key=lambda obj: (key(obj), idxs[obj]))",
  "label": 1,
  "code_tokens": "def csort ( objs , key ) : idxs = dict ( ( obj , i ) for ( i , obj ) in enumerate ( objs ) ) return sorted ( objs , key = lambda obj : ( key ( obj ) , idxs [ obj ] ) )",
  "docstring_tokens": "Order - preserving sorting function ."
 },
 {
  "idx": "webquery-test-693",
  "doc": "python string in not in string",
  "code": "def __contains__(self, char):  # noqa: D105\n        \"\"\"Implement the `in` keyword, searches the sequence.\n        \"\"\"\n        return len(char) <= len(self) and char in str(self.seq) * 2",
  "label": 0,
  "code_tokens": "def __contains__ ( self , char ) : # noqa: D105 return len ( char ) <= len ( self ) and char in str ( self . seq ) * 2",
  "docstring_tokens": "Implement the in keyword searches the sequence ."
 },
 {
  "idx": "webquery-test-694",
  "doc": "python string in not in string",
  "code": "def notin(arg, values):\n    \"\"\"\n    Like isin, but checks whether this expression's value(s) are not\n    contained in the passed values. See isin docs for full usage.\n    \"\"\"\n    op = ops.NotContains(arg, values)\n    return op.to_expr()",
  "label": 0,
  "code_tokens": "def notin ( arg , values ) : op = ops . NotContains ( arg , values ) return op . to_expr ( )",
  "docstring_tokens": "Like isin but checks whether this expression s value ( s ) are not contained in the passed values . See isin docs for full usage ."
 },
 {
  "idx": "webquery-test-695",
  "doc": "rounding a float to 2 decimal places in python",
  "code": "def intround(value):\n    \"\"\"Given a float returns a rounded int. Should give the same result on\n    both Py2/3\n    \"\"\"\n\n    return int(decimal.Decimal.from_float(\n        value).to_integral_value(decimal.ROUND_HALF_EVEN))",
  "label": 0,
  "code_tokens": "def intround ( value ) : return int ( decimal . Decimal . from_float ( value ) . to_integral_value ( decimal . ROUND_HALF_EVEN ) )",
  "docstring_tokens": "Given a float returns a rounded int . Should give the same result on both Py2 / 3"
 },
 {
  "idx": "webquery-test-696",
  "doc": "rounding a float to 2 decimal places in python",
  "code": "def py3round(number):\n    \"\"\"Unified rounding in all python versions.\"\"\"\n    if abs(round(number) - number) == 0.5:\n        return int(2.0 * round(number / 2.0))\n\n    return int(round(number))",
  "label": 0,
  "code_tokens": "def py3round ( number ) : if abs ( round ( number ) - number ) == 0.5 : return int ( 2.0 * round ( number / 2.0 ) ) return int ( round ( number ) )",
  "docstring_tokens": "Unified rounding in all python versions ."
 },
 {
  "idx": "webquery-test-697",
  "doc": "removing just one comma from a string in python",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 0,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-698",
  "doc": "removing just one comma from a string in python",
  "code": "def strip_spaces(s):\n    \"\"\" Strip excess spaces from a string \"\"\"\n    return u\" \".join([c for c in s.split(u' ') if c])",
  "label": 0,
  "code_tokens": "def strip_spaces ( s ) : return u\" \" . join ( [ c for c in s . split ( u' ' ) if c ] )",
  "docstring_tokens": "Strip excess spaces from a string"
 },
 {
  "idx": "webquery-test-699",
  "doc": "what command stops a python program",
  "code": "def timeout_thread_handler(timeout, stop_event):\n    \"\"\"A background thread to kill the process if it takes too long.\n\n    Args:\n        timeout (float): The number of seconds to wait before killing\n            the process.\n        stop_event (Event): An optional event to cleanly stop the background\n            thread if required during testing.\n    \"\"\"\n\n    stop_happened = stop_event.wait(timeout)\n    if stop_happened is False:\n        print(\"Killing program due to %f second timeout\" % timeout)\n\n    os._exit(2)",
  "label": 1,
  "code_tokens": "def timeout_thread_handler ( timeout , stop_event ) : stop_happened = stop_event . wait ( timeout ) if stop_happened is False : print ( \"Killing program due to %f second timeout\" % timeout ) os . _exit ( 2 )",
  "docstring_tokens": "A background thread to kill the process if it takes too long ."
 },
 {
  "idx": "webquery-test-700",
  "doc": "what command stops a python program",
  "code": "def stop_process(self):\n        \"\"\"\n        Stops the child process.\n        \"\"\"\n        self._process.terminate()\n        if not self._process.waitForFinished(100):\n            self._process.kill()",
  "label": 0,
  "code_tokens": "def stop_process ( self ) : self . _process . terminate ( ) if not self . _process . waitForFinished ( 100 ) : self . _process . kill ( )",
  "docstring_tokens": "Stops the child process ."
 },
 {
  "idx": "webquery-test-701",
  "doc": "multiplying two array element wise python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-702",
  "doc": "multiplying two array element wise python",
  "code": "def Unpack(a, num, axis):\n    \"\"\"\n    Unpack op.\n    \"\"\"\n    return tuple(np.squeeze(b, axis=axis) for b in np.split(a, num, axis=axis))",
  "label": 0,
  "code_tokens": "def Unpack ( a , num , axis ) : return tuple ( np . squeeze ( b , axis = axis ) for b in np . split ( a , num , axis = axis ) )",
  "docstring_tokens": "Unpack op ."
 },
 {
  "idx": "webquery-test-703",
  "doc": "how to use a vector loop in python",
  "code": "def apply(f, obj, *args, **kwargs):\n    \"\"\"Apply a function in parallel to each element of the input\"\"\"\n    return vectorize(f)(obj, *args, **kwargs)",
  "label": 0,
  "code_tokens": "def apply ( f , obj , * args , * * kwargs ) : return vectorize ( f ) ( obj , * args , * * kwargs )",
  "docstring_tokens": "Apply a function in parallel to each element of the input"
 },
 {
  "idx": "webquery-test-704",
  "doc": "how to use a vector loop in python",
  "code": "def norm_vec(vector):\n    \"\"\"Normalize the length of a vector to one\"\"\"\n    assert len(vector) == 3\n    v = np.array(vector)\n    return v/np.sqrt(np.sum(v**2))",
  "label": 0,
  "code_tokens": "def norm_vec ( vector ) : assert len ( vector ) == 3 v = np . array ( vector ) return v / np . sqrt ( np . sum ( v ** 2 ) )",
  "docstring_tokens": "Normalize the length of a vector to one"
 },
 {
  "idx": "webquery-test-705",
  "doc": "python3 print seconds from deltatime",
  "code": "def datetime_to_ms(dt):\n    \"\"\"\n    Converts a datetime to a millisecond accuracy timestamp\n    \"\"\"\n    seconds = calendar.timegm(dt.utctimetuple())\n    return seconds * 1000 + int(dt.microsecond / 1000)",
  "label": 1,
  "code_tokens": "def datetime_to_ms ( dt ) : seconds = calendar . timegm ( dt . utctimetuple ( ) ) return seconds * 1000 + int ( dt . microsecond / 1000 )",
  "docstring_tokens": "Converts a datetime to a millisecond accuracy timestamp"
 },
 {
  "idx": "webquery-test-706",
  "doc": "python3 print seconds from deltatime",
  "code": "def total_seconds(td):\n    \"\"\"For those with older versions of Python, a pure-Python\n    implementation of Python 2.7's :meth:`~datetime.timedelta.total_seconds`.\n\n    Args:\n        td (datetime.timedelta): The timedelta to convert to seconds.\n    Returns:\n        float: total number of seconds\n\n    >>> td = timedelta(days=4, seconds=33)\n    >>> total_seconds(td)\n    345633.0\n    \"\"\"\n    a_milli = 1000000.0\n    td_ds = td.seconds + (td.days * 86400)  # 24 * 60 * 60\n    td_micro = td.microseconds + (td_ds * a_milli)\n    return td_micro / a_milli",
  "label": 1,
  "code_tokens": "def total_seconds ( td ) : a_milli = 1000000.0 td_ds = td . seconds + ( td . days * 86400 ) # 24 * 60 * 60 td_micro = td . microseconds + ( td_ds * a_milli ) return td_micro / a_milli",
  "docstring_tokens": "For those with older versions of Python a pure - Python implementation of Python 2 . 7 s : meth : ~datetime . timedelta . total_seconds ."
 },
 {
  "idx": "webquery-test-707",
  "doc": "simple program in adaline to identify healthy or not in python",
  "code": "def is_alive(self):\n        \"\"\"\n        Will test whether the ACS service is up and alive.\n        \"\"\"\n        response = self.get_monitoring_heartbeat()\n        if response.status_code == 200 and response.content == 'alive':\n            return True\n\n        return False",
  "label": 0,
  "code_tokens": "def is_alive ( self ) : response = self . get_monitoring_heartbeat ( ) if response . status_code == 200 and response . content == 'alive' : return True return False",
  "docstring_tokens": "Will test whether the ACS service is up and alive ."
 },
 {
  "idx": "webquery-test-708",
  "doc": "simple program in adaline to identify healthy or not in python",
  "code": "def is_agent_listening(self, host, port):\n        \"\"\"\n        Check if the Instana Agent is listening on <host> and <port>.\n        \"\"\"\n        try:\n            rv = False\n            url = \"http://%s:%s/\" % (host, port)\n            response = self.client.get(url, timeout=0.8)\n\n            server_header = response.headers[\"Server\"]\n            if server_header == AGENT_HEADER:\n                logger.debug(\"Host agent found on %s:%d\" % (host, port))\n                rv = True\n            else:\n                logger.debug(\"...something is listening on %s:%d but it's not the Instana Agent: %s\"\n                             % (host, port, server_header))\n        except (requests.ConnectTimeout, requests.ConnectionError):\n            logger.debug(\"No host agent listening on %s:%d\" % (host, port))\n            rv = False\n        finally:\n            return rv",
  "label": 0,
  "code_tokens": "def is_agent_listening ( self , host , port ) : try : rv = False url = \"http://%s:%s/\" % ( host , port ) response = self . client . get ( url , timeout = 0.8 ) server_header = response . headers [ \"Server\" ] if server_header == AGENT_HEADER : logger . debug ( \"Host agent found on %s:%d\" % ( host , port ) ) rv = True else : logger . debug ( \"...something is listening on %s:%d but it's not the Instana Agent: %s\" % ( host , port , server_header ) ) except ( requests . ConnectTimeout , requests . ConnectionError ) : logger . debug ( \"No host agent listening on %s:%d\" % ( host , port ) ) rv = False finally : return rv",
  "docstring_tokens": "Check if the Instana Agent is listening on <host > and <port > ."
 },
 {
  "idx": "webquery-test-709",
  "doc": "plot points in image python matlibplot",
  "code": "def draw_image(self, ax, image):\n        \"\"\"Process a matplotlib image object and call renderer.draw_image\"\"\"\n        self.renderer.draw_image(imdata=utils.image_to_base64(image),\n                                 extent=image.get_extent(),\n                                 coordinates=\"data\",\n                                 style={\"alpha\": image.get_alpha(),\n                                        \"zorder\": image.get_zorder()},\n                                 mplobj=image)",
  "label": 0,
  "code_tokens": "def draw_image ( self , ax , image ) : self . renderer . draw_image ( imdata = utils . image_to_base64 ( image ) , extent = image . get_extent ( ) , coordinates = \"data\" , style = { \"alpha\" : image . get_alpha ( ) , \"zorder\" : image . get_zorder ( ) } , mplobj = image )",
  "docstring_tokens": "Process a matplotlib image object and call renderer . draw_image"
 },
 {
  "idx": "webquery-test-710",
  "doc": "plot points in image python matlibplot",
  "code": "def imshow(self, canvas, X, extent=None, label=None, vmin=None, vmax=None, **kwargs):\n        \"\"\"\n        Show the image stored in X on the canvas.\n        \n        The origin of the image show is (0,0), such that X[0,0] gets plotted at [0,0] of the image!\n        \n        the kwargs are plotting library specific kwargs!\n        \"\"\"\n        raise NotImplementedError(\"Implement all plot functions in AbstractPlottingLibrary in order to use your own plotting library\")",
  "label": 0,
  "code_tokens": "def imshow ( self , canvas , X , extent = None , label = None , vmin = None , vmax = None , * * kwargs ) : raise NotImplementedError ( \"Implement all plot functions in AbstractPlottingLibrary in order to use your own plotting library\" )",
  "docstring_tokens": "Show the image stored in X on the canvas . The origin of the image show is ( 0 0 ) such that X [ 0 0 ] gets plotted at [ 0 0 ] of the image! the kwargs are plotting library specific kwargs!"
 },
 {
  "idx": "webquery-test-711",
  "doc": "writing an xml in python",
  "code": "def etree_write(tree, stream):\n    \"\"\"\n    Write XML ElementTree 'root' content into 'stream'.\n\n    :param tree: XML ElementTree object\n    :param stream: File or file-like object can write to\n    \"\"\"\n    try:\n        tree.write(stream, encoding=\"utf-8\", xml_declaration=True)\n    except TypeError:\n        tree.write(stream, encoding=\"unicode\", xml_declaration=True)",
  "label": 1,
  "code_tokens": "def etree_write ( tree , stream ) : try : tree . write ( stream , encoding = \"utf-8\" , xml_declaration = True ) except TypeError : tree . write ( stream , encoding = \"unicode\" , xml_declaration = True )",
  "docstring_tokens": "Write XML ElementTree root content into stream ."
 },
 {
  "idx": "webquery-test-712",
  "doc": "writing an xml in python",
  "code": "def write(self, writer):\n        \"\"\"\n        Writes an XML representation of this node (including descendants) to the specified file-like object.\n\n        :param writer: An :class:`XmlWriter` instance to write this node to\n        \"\"\"\n        multiline = bool(self._children)\n        newline_start = multiline and not bool(self.data)\n        writer.start(self.tagname, self.attrs, newline=newline_start)\n        if self.data:\n            writer.data(self.data, newline=bool(self._children))\n        for c in self._children:\n            c.write(writer)\n        writer.end(self.tagname, indent=multiline)",
  "label": 1,
  "code_tokens": "def write ( self , writer ) : multiline = bool ( self . _children ) newline_start = multiline and not bool ( self . data ) writer . start ( self . tagname , self . attrs , newline = newline_start ) if self . data : writer . data ( self . data , newline = bool ( self . _children ) ) for c in self . _children : c . write ( writer ) writer . end ( self . tagname , indent = multiline )",
  "docstring_tokens": "Writes an XML representation of this node ( including descendants ) to the specified file - like object ."
 },
 {
  "idx": "webquery-test-713",
  "doc": "python input function two integers",
  "code": "def minus(*args):\n    \"\"\"Also, converts either to ints or to floats.\"\"\"\n    if len(args) == 1:\n        return -to_numeric(args[0])\n    return to_numeric(args[0]) - to_numeric(args[1])",
  "label": 0,
  "code_tokens": "def minus ( * args ) : if len ( args ) == 1 : return - to_numeric ( args [ 0 ] ) return to_numeric ( args [ 0 ] ) - to_numeric ( args [ 1 ] )",
  "docstring_tokens": "Also converts either to ints or to floats ."
 },
 {
  "idx": "webquery-test-714",
  "doc": "python input function two integers",
  "code": "def divide(x: LispNumber, y: LispNumber) -> LispNumber:\n    \"\"\"Division reducer. If both arguments are integers, return a Fraction.\n    Otherwise, return the true division of x and y.\"\"\"\n    if isinstance(x, int) and isinstance(y, int):\n        return Fraction(x, y)\n    return x / y",
  "label": 0,
  "code_tokens": "def divide ( x : LispNumber , y : LispNumber ) -> LispNumber : if isinstance ( x , int ) and isinstance ( y , int ) : return Fraction ( x , y ) return x / y",
  "docstring_tokens": "Division reducer . If both arguments are integers return a Fraction . Otherwise return the true division of x and y ."
 },
 {
  "idx": "webquery-test-715",
  "doc": "how to add dollar signs to in python",
  "code": "def format_screen(strng):\n    \"\"\"Format a string for screen printing.\n\n    This removes some latex-type format codes.\"\"\"\n    # Paragraph continue\n    par_re = re.compile(r'\\\\$',re.MULTILINE)\n    strng = par_re.sub('',strng)\n    return strng",
  "label": 0,
  "code_tokens": "def format_screen ( strng ) : # Paragraph continue par_re = re . compile ( r'\\\\$' , re . MULTILINE ) strng = par_re . sub ( '' , strng ) return strng",
  "docstring_tokens": "Format a string for screen printing ."
 },
 {
  "idx": "webquery-test-716",
  "doc": "how to add dollar signs to in python",
  "code": "def format_float(value): # not used\n    \"\"\"Modified form of the 'g' format specifier.\n    \"\"\"\n    string = \"{:g}\".format(value).replace(\"e+\", \"e\")\n    string = re.sub(\"e(-?)0*(\\d+)\", r\"e\\1\\2\", string)\n    return string",
  "label": 0,
  "code_tokens": "def format_float ( value ) : # not used string = \"{:g}\" . format ( value ) . replace ( \"e+\" , \"e\" ) string = re . sub ( \"e(-?)0*(\\d+)\" , r\"e\\1\\2\" , string ) return string",
  "docstring_tokens": "Modified form of the g format specifier ."
 },
 {
  "idx": "webquery-test-717",
  "doc": "python pass numpy array to method",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-718",
  "doc": "python pass numpy array to method",
  "code": "def _to_array(value):\n    \"\"\"As a convenience, turn Python lists and tuples into NumPy arrays.\"\"\"\n    if isinstance(value, (tuple, list)):\n        return array(value)\n    elif isinstance(value, (float, int)):\n        return np.float64(value)\n    else:\n        return value",
  "label": 0,
  "code_tokens": "def _to_array ( value ) : if isinstance ( value , ( tuple , list ) ) : return array ( value ) elif isinstance ( value , ( float , int ) ) : return np . float64 ( value ) else : return value",
  "docstring_tokens": "As a convenience turn Python lists and tuples into NumPy arrays ."
 },
 {
  "idx": "webquery-test-719",
  "doc": "remove key value from pythondictinary",
  "code": "def _remove_dict_keys_with_value(dict_, val):\n  \"\"\"Removes `dict` keys which have have `self` as value.\"\"\"\n  return {k: v for k, v in dict_.items() if v is not val}",
  "label": 1,
  "code_tokens": "def _remove_dict_keys_with_value ( dict_ , val ) : return { k : v for k , v in dict_ . items ( ) if v is not val }",
  "docstring_tokens": "Removes dict keys which have have self as value ."
 },
 {
  "idx": "webquery-test-720",
  "doc": "remove key value from pythondictinary",
  "code": "def _prune(self):\n        \"\"\"Primitive way to keep dict in sync with RB.\"\"\"\n        delkeys = [k for k in self.keys() if k not in self.__ringbuffer]\n        for k in delkeys:  # necessary because dict is changed during iterations\n            super(KRingbuffer,self).__delitem__(k)",
  "label": 0,
  "code_tokens": "def _prune ( self ) : delkeys = [ k for k in self . keys ( ) if k not in self . __ringbuffer ] for k in delkeys : # necessary because dict is changed during iterations super ( KRingbuffer , self ) . __delitem__ ( k )",
  "docstring_tokens": "Primitive way to keep dict in sync with RB ."
 },
 {
  "idx": "webquery-test-721",
  "doc": "python autoconvert to boolean",
  "code": "def strToBool(val):\n    \"\"\"\n    Helper function to turn a string representation of \"true\" into\n    boolean True.\n    \"\"\"\n    if isinstance(val, str):\n        val = val.lower()\n\n    return val in ['true', 'on', 'yes', True]",
  "label": 1,
  "code_tokens": "def strToBool ( val ) : if isinstance ( val , str ) : val = val . lower ( ) return val in [ 'true' , 'on' , 'yes' , True ]",
  "docstring_tokens": "Helper function to turn a string representation of true into boolean True ."
 },
 {
  "idx": "webquery-test-722",
  "doc": "python autoconvert to boolean",
  "code": "def _check_and_convert_bools(self):\n        \"\"\"Replace boolean variables by the characters 'F'/'T'\n        \"\"\"\n        replacements = {\n            True: 'T',\n            False: 'F',\n        }\n\n        for key in self.bools:\n            if isinstance(self[key], bool):\n                self[key] = replacements[self[key]]",
  "label": 0,
  "code_tokens": "def _check_and_convert_bools ( self ) : replacements = { True : 'T' , False : 'F' , } for key in self . bools : if isinstance ( self [ key ] , bool ) : self [ key ] = replacements [ self [ key ] ]",
  "docstring_tokens": "Replace boolean variables by the characters F / T"
 },
 {
  "idx": "webquery-test-723",
  "doc": "python get the value in the list starting with the str",
  "code": "def get_list_index(lst, index_or_name):\n    \"\"\"\n    Return the index of an element in the list.\n\n    Args:\n        lst (list): The list.\n        index_or_name (int or str): The value of the reference element, or directly its numeric index.\n\n    Returns:\n        (int) The index of the element in the list.\n    \"\"\"\n    if isinstance(index_or_name, six.integer_types):\n        return index_or_name\n\n    return lst.index(index_or_name)",
  "label": 0,
  "code_tokens": "def get_list_index ( lst , index_or_name ) : if isinstance ( index_or_name , six . integer_types ) : return index_or_name return lst . index ( index_or_name )",
  "docstring_tokens": "Return the index of an element in the list ."
 },
 {
  "idx": "webquery-test-724",
  "doc": "python get the value in the list starting with the str",
  "code": "def get_substring_idxs(substr, string):\n    \"\"\"\n    Return a list of indexes of substr. If substr not found, list is\n    empty.\n\n    Arguments:\n        substr (str): Substring to match.\n        string (str): String to match in.\n\n    Returns:\n        list of int: Start indices of substr.\n    \"\"\"\n    return [match.start() for match in re.finditer(substr, string)]",
  "label": 0,
  "code_tokens": "def get_substring_idxs ( substr , string ) : return [ match . start ( ) for match in re . finditer ( substr , string ) ]",
  "docstring_tokens": "Return a list of indexes of substr . If substr not found list is empty ."
 },
 {
  "idx": "webquery-test-725",
  "doc": "create a square wave python",
  "code": "def sine_wave(frequency):\n  \"\"\"Emit a sine wave at the given frequency.\"\"\"\n  xs = tf.reshape(tf.range(_samples(), dtype=tf.float32), [1, _samples(), 1])\n  ts = xs / FLAGS.sample_rate\n  return tf.sin(2 * math.pi * frequency * ts)",
  "label": 0,
  "code_tokens": "def sine_wave ( frequency ) : xs = tf . reshape ( tf . range ( _samples ( ) , dtype = tf . float32 ) , [ 1 , _samples ( ) , 1 ] ) ts = xs / FLAGS . sample_rate return tf . sin ( 2 * math . pi * frequency * ts )",
  "docstring_tokens": "Emit a sine wave at the given frequency ."
 },
 {
  "idx": "webquery-test-726",
  "doc": "create a square wave python",
  "code": "def constant(times: np.ndarray, amp: complex) -> np.ndarray:\n    \"\"\"Continuous constant pulse.\n\n    Args:\n        times: Times to output pulse for.\n        amp: Complex pulse amplitude.\n    \"\"\"\n    return np.full(len(times), amp, dtype=np.complex_)",
  "label": 0,
  "code_tokens": "def constant ( times : np . ndarray , amp : complex ) -> np . ndarray : return np . full ( len ( times ) , amp , dtype = np . complex_ )",
  "docstring_tokens": "Continuous constant pulse ."
 },
 {
  "idx": "webquery-test-727",
  "doc": "python script to run against a list of servers",
  "code": "def _connect(self, servers):\n        \"\"\" connect to the given server, e.g.: \\\\connect localhost:4200 \"\"\"\n        self._do_connect(servers.split(' '))\n        self._verify_connection(verbose=True)",
  "label": 1,
  "code_tokens": "def _connect ( self , servers ) : self . _do_connect ( servers . split ( ' ' ) ) self . _verify_connection ( verbose = True )",
  "docstring_tokens": "connect to the given server e . g . : \\\\ connect localhost : 4200"
 },
 {
  "idx": "webquery-test-728",
  "doc": "python script to run against a list of servers",
  "code": "def is_http_running_on(port):\n  \"\"\" Check if an http server runs on a given port.\n\n  Args:\n    The port to check.\n  Returns:\n    True if it is used by an http server. False otherwise.\n  \"\"\"\n  try:\n    conn = httplib.HTTPConnection('127.0.0.1:' + str(port))\n    conn.connect()\n    conn.close()\n    return True\n  except Exception:\n    return False",
  "label": 0,
  "code_tokens": "def is_http_running_on ( port ) : try : conn = httplib . HTTPConnection ( '127.0.0.1:' + str ( port ) ) conn . connect ( ) conn . close ( ) return True except Exception : return False",
  "docstring_tokens": "Check if an http server runs on a given port ."
 },
 {
  "idx": "webquery-test-729",
  "doc": "python 3 check obj is num",
  "code": "def is_integer(obj):\n    \"\"\"Is this an integer.\n\n    :param object obj:\n    :return:\n    \"\"\"\n    if PYTHON3:\n        return isinstance(obj, int)\n    return isinstance(obj, (int, long))",
  "label": 1,
  "code_tokens": "def is_integer ( obj ) : if PYTHON3 : return isinstance ( obj , int ) return isinstance ( obj , ( int , long ) )",
  "docstring_tokens": "Is this an integer ."
 },
 {
  "idx": "webquery-test-730",
  "doc": "python 3 check obj is num",
  "code": "def _is_bit(obj):\n    \"\"\"Determine if obj is a bit\"\"\"\n    # If there is a bit type this could be replaced by isinstance.\n    if isinstance(obj, tuple) and len(obj) == 2:\n        if isinstance(obj[0], Register) and isinstance(obj[1], int) and obj[1] < len(obj[0]):\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def _is_bit ( obj ) : # If there is a bit type this could be replaced by isinstance. if isinstance ( obj , tuple ) and len ( obj ) == 2 : if isinstance ( obj [ 0 ] , Register ) and isinstance ( obj [ 1 ] , int ) and obj [ 1 ] < len ( obj [ 0 ] ) : return True return False",
  "docstring_tokens": "Determine if obj is a bit"
 },
 {
  "idx": "webquery-test-731",
  "doc": "removing an element from a dictionary python",
  "code": "def _remove_dict_keys_with_value(dict_, val):\n  \"\"\"Removes `dict` keys which have have `self` as value.\"\"\"\n  return {k: v for k, v in dict_.items() if v is not val}",
  "label": 1,
  "code_tokens": "def _remove_dict_keys_with_value ( dict_ , val ) : return { k : v for k , v in dict_ . items ( ) if v is not val }",
  "docstring_tokens": "Removes dict keys which have have self as value ."
 },
 {
  "idx": "webquery-test-732",
  "doc": "removing an element from a dictionary python",
  "code": "def pop (self, key):\n        \"\"\"Remove key from dict and return value.\"\"\"\n        if key in self._keys:\n            self._keys.remove(key)\n        super(ListDict, self).pop(key)",
  "label": 1,
  "code_tokens": "def pop ( self , key ) : if key in self . _keys : self . _keys . remove ( key ) super ( ListDict , self ) . pop ( key )",
  "docstring_tokens": "Remove key from dict and return value ."
 },
 {
  "idx": "webquery-test-733",
  "doc": "python 3 overriding print",
  "code": "def pstd(self, *args, **kwargs):\n        \"\"\" Console to STDOUT \"\"\"\n        kwargs['file'] = self.out\n        self.print(*args, **kwargs)\n        sys.stdout.flush()",
  "label": 0,
  "code_tokens": "def pstd ( self , * args , * * kwargs ) : kwargs [ 'file' ] = self . out self . print ( * args , * * kwargs ) sys . stdout . flush ( )",
  "docstring_tokens": "Console to STDOUT"
 },
 {
  "idx": "webquery-test-734",
  "doc": "python 3 overriding print",
  "code": "def flushed_print(*args, **kwargs):\n    \"\"\"\n    Use to replace print(*args, flush=True) that doesn't exist for python<3.3\n    \"\"\"\n    print(*args, **kwargs)\n    file = kwargs.get('file', sys.stdout)\n    file.flush() if file is not None else sys.stdout.flush()",
  "label": 1,
  "code_tokens": "def flushed_print ( * args , * * kwargs ) : print ( * args , * * kwargs ) file = kwargs . get ( 'file' , sys . stdout ) file . flush ( ) if file is not None else sys . stdout . flush ( )",
  "docstring_tokens": "Use to replace print ( * args flush = True ) that doesn t exist for python<3 . 3"
 },
 {
  "idx": "webquery-test-735",
  "doc": "python pretty print to a variable",
  "code": "def py(self, output):\n        \"\"\"Output data as a nicely-formatted python data structure\"\"\"\n        import pprint\n        pprint.pprint(output, stream=self.outfile)",
  "label": 1,
  "code_tokens": "def py ( self , output ) : import pprint pprint . pprint ( output , stream = self . outfile )",
  "docstring_tokens": "Output data as a nicely - formatted python data structure"
 },
 {
  "idx": "webquery-test-736",
  "doc": "python pretty print to a variable",
  "code": "def ss(*args, **kwargs):\n    \"\"\"\n    exactly like s, but doesn't return variable names or file positions (useful for logging)\n\n    since -- 10-15-2015\n    return -- str\n    \"\"\"\n    if not args:\n        raise ValueError(\"you didn't pass any arguments to print out\")\n\n    with Reflect.context(args, **kwargs) as r:\n        instance = V_CLASS(r, stream, **kwargs)\n        return instance.value().strip()",
  "label": 0,
  "code_tokens": "def ss ( * args , * * kwargs ) : if not args : raise ValueError ( \"you didn't pass any arguments to print out\" ) with Reflect . context ( args , * * kwargs ) as r : instance = V_CLASS ( r , stream , * * kwargs ) return instance . value ( ) . strip ( )",
  "docstring_tokens": "exactly like s but doesn t return variable names or file positions ( useful for logging )"
 },
 {
  "idx": "webquery-test-737",
  "doc": "python remove redundant elements of list",
  "code": "def dedup_list(l):\n    \"\"\"Given a list (l) will removing duplicates from the list,\n       preserving the original order of the list. Assumes that\n       the list entrie are hashable.\"\"\"\n    dedup = set()\n    return [ x for x in l if not (x in dedup or dedup.add(x))]",
  "label": 1,
  "code_tokens": "def dedup_list ( l ) : dedup = set ( ) return [ x for x in l if not ( x in dedup or dedup . add ( x ) ) ]",
  "docstring_tokens": "Given a list ( l ) will removing duplicates from the list preserving the original order of the list . Assumes that the list entrie are hashable ."
 },
 {
  "idx": "webquery-test-738",
  "doc": "python remove redundant elements of list",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 1,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-739",
  "doc": "python only unique elements in list",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 1,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-740",
  "doc": "python only unique elements in list",
  "code": "def remove_duplicates(lst):\n    \"\"\"\n    Emulate what a Python ``set()`` does, but keeping the element's order.\n    \"\"\"\n    dset = set()\n    return [l for l in lst if l not in dset and not dset.add(l)]",
  "label": 0,
  "code_tokens": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]",
  "docstring_tokens": "Emulate what a Python set () does but keeping the element s order ."
 },
 {
  "idx": "webquery-test-741",
  "doc": "how to animate a rotating line in python",
  "code": "def _rotate(n, x, y, rx, ry):\n    \"\"\"Rotate and flip a quadrant appropriately\n\n    Based on the implementation here:\n        https://en.wikipedia.org/w/index.php?title=Hilbert_curve&oldid=797332503\n\n    \"\"\"\n    if ry == 0:\n        if rx == 1:\n            x = n - 1 - x\n            y = n - 1 - y\n        return y, x\n    return x, y",
  "label": 0,
  "code_tokens": "def _rotate ( n , x , y , rx , ry ) : if ry == 0 : if rx == 1 : x = n - 1 - x y = n - 1 - y return y , x return x , y",
  "docstring_tokens": "Rotate and flip a quadrant appropriately"
 },
 {
  "idx": "webquery-test-742",
  "doc": "how to animate a rotating line in python",
  "code": "def rotate_left(self, seconds=None):\n        \"\"\"Rotate robot left.\"\"\"\n        self._move(speed=0, steering=STEER_MAX, seconds=seconds)",
  "label": 0,
  "code_tokens": "def rotate_left ( self , seconds = None ) : self . _move ( speed = 0 , steering = STEER_MAX , seconds = seconds )",
  "docstring_tokens": "Rotate robot left ."
 },
 {
  "idx": "webquery-test-743",
  "doc": "python reading dict of a dict of a dict",
  "code": "def from_dict(cls, d):\n        \"\"\"\n        Makes XcFunc obey the general json interface used in pymatgen for easier serialization.\n        \"\"\"\n        return cls(xc=d.get(\"xc\"), x=d.get(\"x\"), c=d.get(\"c\"))",
  "label": 0,
  "code_tokens": "def from_dict ( cls , d ) : return cls ( xc = d . get ( \"xc\" ) , x = d . get ( \"x\" ) , c = d . get ( \"c\" ) )",
  "docstring_tokens": "Makes XcFunc obey the general json interface used in pymatgen for easier serialization ."
 },
 {
  "idx": "webquery-test-744",
  "doc": "python reading dict of a dict of a dict",
  "code": "def unicode_dict(_dict):\n    \"\"\"\n    Make sure keys and values of dict is unicode.\n    \"\"\"\n    r = {}\n    for k, v in iteritems(_dict):\n        r[unicode_obj(k)] = unicode_obj(v)\n    return r",
  "label": 0,
  "code_tokens": "def unicode_dict ( _dict ) : r = { } for k , v in iteritems ( _dict ) : r [ unicode_obj ( k ) ] = unicode_obj ( v ) return r",
  "docstring_tokens": "Make sure keys and values of dict is unicode ."
 },
 {
  "idx": "webquery-test-745",
  "doc": "deleting all values from a dictionary in python",
  "code": "def normalize_dictionary(data_dict):\n    \"\"\"\n    Converts all the keys in \"data_dict\" to strings. The keys must be\n    convertible using str().\n    \"\"\"\n    for key, value in data_dict.items():\n        if not isinstance(key, str):\n            del data_dict[key]\n            data_dict[str(key)] = value\n    return data_dict",
  "label": 0,
  "code_tokens": "def normalize_dictionary ( data_dict ) : for key , value in data_dict . items ( ) : if not isinstance ( key , str ) : del data_dict [ key ] data_dict [ str ( key ) ] = value return data_dict",
  "docstring_tokens": "Converts all the keys in data_dict to strings . The keys must be convertible using str () ."
 },
 {
  "idx": "webquery-test-746",
  "doc": "deleting all values from a dictionary in python",
  "code": "def rm_keys_from_dict(d, keys):\n    \"\"\"\n    Given a dictionary and a key list, remove any data in the dictionary with the given keys.\n\n    :param dict d: Metadata\n    :param list keys: Keys to be removed\n    :return dict d: Metadata\n    \"\"\"\n    # Loop for each key given\n    for key in keys:\n        # Is the key in the dictionary?\n        if key in d:\n            try:\n                d.pop(key, None)\n            except KeyError:\n                # Not concerned with an error. Keep going.\n                pass\n    return d",
  "label": 0,
  "code_tokens": "def rm_keys_from_dict ( d , keys ) : # Loop for each key given for key in keys : # Is the key in the dictionary? if key in d : try : d . pop ( key , None ) except KeyError : # Not concerned with an error. Keep going. pass return d",
  "docstring_tokens": "Given a dictionary and a key list remove any data in the dictionary with the given keys ."
 },
 {
  "idx": "webquery-test-747",
  "doc": "how to check a string is decimal in python 2",
  "code": "def is_dec(ip):\n    \"\"\"Return true if the IP address is in decimal notation.\"\"\"\n    try:\n        dec = int(str(ip))\n    except ValueError:\n        return False\n    if dec > 4294967295 or dec < 0:\n        return False\n    return True",
  "label": 0,
  "code_tokens": "def is_dec ( ip ) : try : dec = int ( str ( ip ) ) except ValueError : return False if dec > 4294967295 or dec < 0 : return False return True",
  "docstring_tokens": "Return true if the IP address is in decimal notation ."
 },
 {
  "idx": "webquery-test-748",
  "doc": "how to check a string is decimal in python 2",
  "code": "def _isint(string):\n    \"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"\n    return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)",
  "label": 0,
  "code_tokens": "def _isint ( string ) : return type ( string ) is int or ( isinstance ( string , _binary_type ) or isinstance ( string , _text_type ) ) and _isconvertible ( int , string )",
  "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"
 },
 {
  "idx": "webquery-test-749",
  "doc": "python, how to put a variable in a string",
  "code": "def __str__(self):\n        \"\"\"Returns full address string.\"\"\"\n        return \"{}\\n{}, {} {}\".format(self.street, self.city, self.state, self.postal_code)",
  "label": 1,
  "code_tokens": "def __str__ ( self ) : return \"{}\\n{}, {} {}\" . format ( self . street , self . city , self . state , self . postal_code )",
  "docstring_tokens": "Returns full address string ."
 },
 {
  "idx": "webquery-test-750",
  "doc": "python, how to put a variable in a string",
  "code": "def full_name(self):\n        \"\"\"\n        You can get full name of user.\n\n        :return: str\n        \"\"\"\n        full_name = self.first_name\n        if self.last_name:\n            full_name += ' ' + self.last_name\n        return full_name",
  "label": 0,
  "code_tokens": "def full_name ( self ) : full_name = self . first_name if self . last_name : full_name += ' ' + self . last_name return full_name",
  "docstring_tokens": "You can get full name of user ."
 },
 {
  "idx": "webquery-test-751",
  "doc": "python how to pull 4 keys from a dictionary",
  "code": "def key_of(d):\n    \"\"\"\n    Returns the key of a single element dict.\n    \"\"\"\n    if len(d) > 1 and not type(d) == dict():\n        raise ValueError('key_of(d) may only except single element dict')\n    else:\n        return keys_of(d)[0]",
  "label": 0,
  "code_tokens": "def key_of ( d ) : if len ( d ) > 1 and not type ( d ) == dict ( ) : raise ValueError ( 'key_of(d) may only except single element dict' ) else : return keys_of ( d ) [ 0 ]",
  "docstring_tokens": "Returns the key of a single element dict ."
 },
 {
  "idx": "webquery-test-752",
  "doc": "python how to pull 4 keys from a dictionary",
  "code": "def get_single_item(d):\n    \"\"\"Get an item from a dict which contains just one item.\"\"\"\n    assert len(d) == 1, 'Single-item dict must have just one item, not %d.' % len(d)\n    return next(six.iteritems(d))",
  "label": 0,
  "code_tokens": "def get_single_item ( d ) : assert len ( d ) == 1 , 'Single-item dict must have just one item, not %d.' % len ( d ) return next ( six . iteritems ( d ) )",
  "docstring_tokens": "Get an item from a dict which contains just one item ."
 },
 {
  "idx": "webquery-test-753",
  "doc": "strip second word python",
  "code": "def lowstrip(term):\n    \"\"\"Convert to lowercase and strip spaces\"\"\"\n    term = re.sub('\\s+', ' ', term)\n    term = term.lower()\n    return term",
  "label": 0,
  "code_tokens": "def lowstrip ( term ) : term = re . sub ( '\\s+' , ' ' , term ) term = term . lower ( ) return term",
  "docstring_tokens": "Convert to lowercase and strip spaces"
 },
 {
  "idx": "webquery-test-754",
  "doc": "strip second word python",
  "code": "def format_single_space_only(text):\n    \"\"\"Revise consecutive empty space to single space.\n\n    Example::\n\n        \" I   feel    so  GOOD!\" => \"This is so GOOD!\"\n\n    **\u4e2d\u6587\u6587\u6863**\n\n    \u786e\u4fdd\u6587\u672c\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u591a\u4f59\u8fde\u7eed1\u6b21\u7684\u7a7a\u683c\u3002\n    \"\"\"\n    return \" \".join([word for word in text.strip().split(\" \") if len(word) >= 1])",
  "label": 0,
  "code_tokens": "def format_single_space_only ( text ) : return \" \" . join ( [ word for word in text . strip ( ) . split ( \" \" ) if len ( word ) >= 1 ] )",
  "docstring_tokens": "Revise consecutive empty space to single space ."
 },
 {
  "idx": "webquery-test-755",
  "doc": "python open a web page and save all text",
  "code": "def wget(url):\n    \"\"\"\n    Download the page into a string\n    \"\"\"\n    import urllib.parse\n    request = urllib.request.urlopen(url)\n    filestring = request.read()\n    return filestring",
  "label": 1,
  "code_tokens": "def wget ( url ) : import urllib . parse request = urllib . request . urlopen ( url ) filestring = request . read ( ) return filestring",
  "docstring_tokens": "Download the page into a string"
 },
 {
  "idx": "webquery-test-756",
  "doc": "python open a web page and save all text",
  "code": "def Output(self):\n    \"\"\"Output all sections of the page.\"\"\"\n    self.Open()\n    self.Header()\n    self.Body()\n    self.Footer()",
  "label": 0,
  "code_tokens": "def Output ( self ) : self . Open ( ) self . Header ( ) self . Body ( ) self . Footer ( )",
  "docstring_tokens": "Output all sections of the page ."
 },
 {
  "idx": "webquery-test-757",
  "doc": "extracting time from datetime object python",
  "code": "def timestamp_to_datetime(timestamp):\n    \"\"\"Convert an ARF timestamp to a datetime.datetime object (naive local time)\"\"\"\n    from datetime import datetime, timedelta\n    obj = datetime.fromtimestamp(timestamp[0])\n    return obj + timedelta(microseconds=int(timestamp[1]))",
  "label": 0,
  "code_tokens": "def timestamp_to_datetime ( timestamp ) : from datetime import datetime , timedelta obj = datetime . fromtimestamp ( timestamp [ 0 ] ) return obj + timedelta ( microseconds = int ( timestamp [ 1 ] ) )",
  "docstring_tokens": "Convert an ARF timestamp to a datetime . datetime object ( naive local time )"
 },
 {
  "idx": "webquery-test-758",
  "doc": "extracting time from datetime object python",
  "code": "def unmarshal(self, v):\n        \"\"\"\n        Convert a date in \"2012-12-13\" format to a :class:`datetime.date` object.\n        \"\"\"\n        if not isinstance(v, date):\n            # 2012-12-13\n            v = datetime.strptime(v, \"%Y-%m-%d\").date()\n        return v",
  "label": 1,
  "code_tokens": "def unmarshal ( self , v ) : if not isinstance ( v , date ) : # 2012-12-13 v = datetime . strptime ( v , \"%Y-%m-%d\" ) . date ( ) return v",
  "docstring_tokens": "Convert a date in 2012 - 12 - 13 format to a : class : datetime . date object ."
 },
 {
  "idx": "webquery-test-759",
  "doc": "python directory tree print",
  "code": "def print_tree(self, indent=2):\n        \"\"\" print_tree: prints out structure of tree\n            Args: indent (int): What level of indentation at which to start printing\n            Returns: None\n        \"\"\"\n        config.LOGGER.info(\"{indent}{data}\".format(indent=\"   \" * indent, data=str(self)))\n        for child in self.children:\n            child.print_tree(indent + 1)",
  "label": 0,
  "code_tokens": "def print_tree ( self , indent = 2 ) : config . LOGGER . info ( \"{indent}{data}\" . format ( indent = \"   \" * indent , data = str ( self ) ) ) for child in self . children : child . print_tree ( indent + 1 )",
  "docstring_tokens": "print_tree : prints out structure of tree Args : indent ( int ) : What level of indentation at which to start printing Returns : None"
 },
 {
  "idx": "webquery-test-760",
  "doc": "python directory tree print",
  "code": "def print_item_with_children(ac, classes, level):\n    \"\"\" Print the given item and all children items \"\"\"\n    print_row(ac.id, ac.name, f\"{ac.allocation:,.2f}\", level)\n    print_children_recursively(classes, ac, level + 1)",
  "label": 0,
  "code_tokens": "def print_item_with_children ( ac , classes , level ) : print_row ( ac . id , ac . name , f\"{ac.allocation:,.2f}\" , level ) print_children_recursively ( classes , ac , level + 1 )",
  "docstring_tokens": "Print the given item and all children items"
 },
 {
  "idx": "webquery-test-761",
  "doc": "read variable in different file python",
  "code": "def file_read(filename):\n    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\n    fobj = open(filename,'r');\n    source = fobj.read();\n    fobj.close()\n    return source",
  "label": 0,
  "code_tokens": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
  "docstring_tokens": "Read a file and close it . Returns the file source ."
 },
 {
  "idx": "webquery-test-762",
  "doc": "read variable in different file python",
  "code": "def Load(file):\n    \"\"\" Loads a model from specified file \"\"\"\n    with open(file, 'rb') as file:\n        model = dill.load(file)\n        return model",
  "label": 0,
  "code_tokens": "def Load ( file ) : with open ( file , 'rb' ) as file : model = dill . load ( file ) return model",
  "docstring_tokens": "Loads a model from specified file"
 },
 {
  "idx": "webquery-test-763",
  "doc": "print to create a range in python",
  "code": "def frange(start, stop, step, precision):\n    \"\"\"A generator that will generate a range of floats.\"\"\"\n    value = start\n    while round(value, precision) < stop:\n        yield round(value, precision)\n        value += step",
  "label": 1,
  "code_tokens": "def frange ( start , stop , step , precision ) : value = start while round ( value , precision ) < stop : yield round ( value , precision ) value += step",
  "docstring_tokens": "A generator that will generate a range of floats ."
 },
 {
  "idx": "webquery-test-764",
  "doc": "print to create a range in python",
  "code": "def extent(self):\n\n        \"\"\"\n        return range of 2D data\n        \"\"\"\n\n        return [min(self.x), max(self.x), min(self.y), max(self.y)]",
  "label": 0,
  "code_tokens": "def extent ( self ) : return [ min ( self . x ) , max ( self . x ) , min ( self . y ) , max ( self . y ) ]",
  "docstring_tokens": "return range of 2D data"
 },
 {
  "idx": "webquery-test-765",
  "doc": "output dispaly python shell",
  "code": "def out(self, output, newline=True):\n        \"\"\"Outputs a string to the console (stdout).\"\"\"\n        click.echo(output, nl=newline)",
  "label": 1,
  "code_tokens": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )",
  "docstring_tokens": "Outputs a string to the console ( stdout ) ."
 },
 {
  "idx": "webquery-test-766",
  "doc": "output dispaly python shell",
  "code": "def call_out(command):\n  \"\"\"\n  Run the given command (with shell=False) and return a tuple of\n  (int returncode, str output). Strip the output of enclosing whitespace.\n  \"\"\"\n  # start external command process\n  p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n  # get outputs\n  out, _ = p.communicate()\n\n  return p.returncode, out.strip()",
  "label": 0,
  "code_tokens": "def call_out ( command ) : # start external command process p = subprocess . Popen ( command , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) # get outputs out , _ = p . communicate ( ) return p . returncode , out . strip ( )",
  "docstring_tokens": "Run the given command ( with shell = False ) and return a tuple of ( int returncode str output ) . Strip the output of enclosing whitespace ."
 },
 {
  "idx": "webquery-test-767",
  "doc": "string saprete to letter python",
  "code": "def format_name(text):\n    \"\"\"Format a comic name.\"\"\"\n    name = unescape(text)\n    name = asciify(name.replace(u'&', u'And').replace(u'@', u'At'))\n    name = capfirst(name)\n    return name",
  "label": 0,
  "code_tokens": "def format_name ( text ) : name = unescape ( text ) name = asciify ( name . replace ( u'&' , u'And' ) . replace ( u'@' , u'At' ) ) name = capfirst ( name ) return name",
  "docstring_tokens": "Format a comic name ."
 },
 {
  "idx": "webquery-test-768",
  "doc": "string saprete to letter python",
  "code": "def normalize(pw):\n    \"\"\" Lower case, and change the symbols to closest characters\"\"\"\n    pw_lower = pw.lower()\n    return ''.join(helper.L33T.get(c, c) for c in pw_lower)",
  "label": 0,
  "code_tokens": "def normalize ( pw ) : pw_lower = pw . lower ( ) return '' . join ( helper . L33T . get ( c , c ) for c in pw_lower )",
  "docstring_tokens": "Lower case and change the symbols to closest characters"
 },
 {
  "idx": "webquery-test-769",
  "doc": "how to access element of matrix python",
  "code": "def lengths( self ):\n        \"\"\"\n        The cell lengths.\n\n        Args:\n            None\n\n        Returns:\n            (np.array(a,b,c)): The cell lengths.\n        \"\"\"\n        return( np.array( [ math.sqrt( sum( row**2 ) ) for row in self.matrix ] ) )",
  "label": 0,
  "code_tokens": "def lengths ( self ) : return ( np . array ( [ math . sqrt ( sum ( row ** 2 ) ) for row in self . matrix ] ) )",
  "docstring_tokens": "The cell lengths ."
 },
 {
  "idx": "webquery-test-770",
  "doc": "how to access element of matrix python",
  "code": "def to_list(self):\n        \"\"\"Convert this confusion matrix into a 2x2 plain list of values.\"\"\"\n        return [[int(self.table.cell_values[0][1]), int(self.table.cell_values[0][2])],\n                [int(self.table.cell_values[1][1]), int(self.table.cell_values[1][2])]]",
  "label": 0,
  "code_tokens": "def to_list ( self ) : return [ [ int ( self . table . cell_values [ 0 ] [ 1 ] ) , int ( self . table . cell_values [ 0 ] [ 2 ] ) ] , [ int ( self . table . cell_values [ 1 ] [ 1 ] ) , int ( self . table . cell_values [ 1 ] [ 2 ] ) ] ]",
  "docstring_tokens": "Convert this confusion matrix into a 2x2 plain list of values ."
 },
 {
  "idx": "webquery-test-771",
  "doc": "python replace a list in matrix with another list",
  "code": "def Tmatrix(X):\n    \"\"\"\n    gets the orientation matrix (T) from data in X\n    \"\"\"\n    T = [[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]\n    for row in X:\n        for k in range(3):\n            for l in range(3):\n                T[k][l] += row[k] * row[l]\n    return T",
  "label": 0,
  "code_tokens": "def Tmatrix ( X ) : T = [ [ 0. , 0. , 0. ] , [ 0. , 0. , 0. ] , [ 0. , 0. , 0. ] ] for row in X : for k in range ( 3 ) : for l in range ( 3 ) : T [ k ] [ l ] += row [ k ] * row [ l ] return T",
  "docstring_tokens": "gets the orientation matrix ( T ) from data in X"
 },
 {
  "idx": "webquery-test-772",
  "doc": "python replace a list in matrix with another list",
  "code": "def transform(foci, mat):\n    \"\"\" Convert coordinates from one space to another using provided\n    transformation matrix. \"\"\"\n    t = linalg.pinv(mat)\n    foci = np.hstack((foci, np.ones((foci.shape[0], 1))))\n    return np.dot(foci, t)[:, 0:3]",
  "label": 0,
  "code_tokens": "def transform ( foci , mat ) : t = linalg . pinv ( mat ) foci = np . hstack ( ( foci , np . ones ( ( foci . shape [ 0 ] , 1 ) ) ) ) return np . dot ( foci , t ) [ : , 0 : 3 ]",
  "docstring_tokens": "Convert coordinates from one space to another using provided transformation matrix ."
 },
 {
  "idx": "webquery-test-773",
  "doc": "python numpy array how to add values",
  "code": "def append(self, value):\n        \"\"\"\n        \"\"\"\n        if isinstance(value, nparray.ndarray):\n            value = value.to_array()\n\n        new_value = np.append(self.get_value(), value)\n        self.set_value(new_value)",
  "label": 1,
  "code_tokens": "def append ( self , value ) : if isinstance ( value , nparray . ndarray ) : value = value . to_array ( ) new_value = np . append ( self . get_value ( ) , value ) self . set_value ( new_value )",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-774",
  "doc": "python numpy array how to add values",
  "code": "def add(self, x, axis):\n        \"\"\"Function to add 3D View with vector or 2D array (type = numpy.ndarray or 2D Field or 2D View) or 2D View with vector (type = numpy.ndarray)\n        :param x: array(1D, 2D) or field (2D) or View(2D)\n        :param axis: specifies axis, eg. axis = (1,2) plane lies in yz-plane, axis=0 vector along x axis\n        :return: dict with result of operation (same form as view.d)\n        \"\"\"\n        return self.__array_op(operator.add, x, axis)",
  "label": 0,
  "code_tokens": "def add ( self , x , axis ) : return self . __array_op ( operator . add , x , axis )",
  "docstring_tokens": "Function to add 3D View with vector or 2D array ( type = numpy . ndarray or 2D Field or 2D View ) or 2D View with vector ( type = numpy . ndarray ) : param x : array ( 1D 2D ) or field ( 2D ) or View ( 2D ) : param axis : specifies axis eg . axis = ( 1 2 ) plane lies in yz - plane axis = 0 vector along x axis : return : dict with result of operation ( same form as view . d )"
 },
 {
  "idx": "webquery-test-775",
  "doc": "python read tuples from file",
  "code": "def readTuple(self, line, n=3):\n        \"\"\" Reads a tuple of numbers. e.g. vertices, normals or teture coords.\n        \"\"\"\n        numbers = [num for num in line.split(' ') if num]\n        return [float(num) for num in numbers[1:n + 1]]",
  "label": 1,
  "code_tokens": "def readTuple ( self , line , n = 3 ) : numbers = [ num for num in line . split ( ' ' ) if num ] return [ float ( num ) for num in numbers [ 1 : n + 1 ] ]",
  "docstring_tokens": "Reads a tuple of numbers . e . g . vertices normals or teture coords ."
 },
 {
  "idx": "webquery-test-776",
  "doc": "python read tuples from file",
  "code": "def _parse_tuple_string(argument):\n        \"\"\" Return a tuple from parsing 'a,b,c,d' -> (a,b,c,d) \"\"\"\n        if isinstance(argument, str):\n            return tuple(int(p.strip()) for p in argument.split(','))\n        return argument",
  "label": 0,
  "code_tokens": "def _parse_tuple_string ( argument ) : if isinstance ( argument , str ) : return tuple ( int ( p . strip ( ) ) for p in argument . split ( ',' ) ) return argument",
  "docstring_tokens": "Return a tuple from parsing a b c d - > ( a b c d )"
 },
 {
  "idx": "webquery-test-777",
  "doc": "pythone current process memory usage",
  "code": "def get_memory_usage():\n    \"\"\"Gets RAM memory usage\n\n    :return: MB of memory used by this process\n    \"\"\"\n    process = psutil.Process(os.getpid())\n    mem = process.memory_info().rss\n    return mem / (1024 * 1024)",
  "label": 1,
  "code_tokens": "def get_memory_usage ( ) : process = psutil . Process ( os . getpid ( ) ) mem = process . memory_info ( ) . rss return mem / ( 1024 * 1024 )",
  "docstring_tokens": "Gets RAM memory usage"
 },
 {
  "idx": "webquery-test-778",
  "doc": "pythone current process memory usage",
  "code": "def machine_info():\n    \"\"\"Retrieve core and memory information for the current machine.\n    \"\"\"\n    import psutil\n    BYTES_IN_GIG = 1073741824.0\n    free_bytes = psutil.virtual_memory().total\n    return [{\"memory\": float(\"%.1f\" % (free_bytes / BYTES_IN_GIG)), \"cores\": multiprocessing.cpu_count(),\n             \"name\": socket.gethostname()}]",
  "label": 0,
  "code_tokens": "def machine_info ( ) : import psutil BYTES_IN_GIG = 1073741824.0 free_bytes = psutil . virtual_memory ( ) . total return [ { \"memory\" : float ( \"%.1f\" % ( free_bytes / BYTES_IN_GIG ) ) , \"cores\" : multiprocessing . cpu_count ( ) , \"name\" : socket . gethostname ( ) } ]",
  "docstring_tokens": "Retrieve core and memory information for the current machine ."
 },
 {
  "idx": "webquery-test-779",
  "doc": "list choronical order python",
  "code": "def toposort_flatten(data, sort=True):\n    \"\"\"Returns a single list of dependencies. For any set returned by\ntoposort(), those items are sorted and appended to the result (just to\nmake the results deterministic).\"\"\"\n\n    result = []\n    for d in toposort(data):\n        try:\n            result.extend((sorted if sort else list)(d))\n        except TypeError as e:\n            result.extend(list(d))\n    return result",
  "label": 0,
  "code_tokens": "def toposort_flatten ( data , sort = True ) : result = [ ] for d in toposort ( data ) : try : result . extend ( ( sorted if sort else list ) ( d ) ) except TypeError as e : result . extend ( list ( d ) ) return result",
  "docstring_tokens": "Returns a single list of dependencies . For any set returned by toposort () those items are sorted and appended to the result ( just to make the results deterministic ) ."
 },
 {
  "idx": "webquery-test-780",
  "doc": "list choronical order python",
  "code": "def csort(objs, key):\n    \"\"\"Order-preserving sorting function.\"\"\"\n    idxs = dict((obj, i) for (i, obj) in enumerate(objs))\n    return sorted(objs, key=lambda obj: (key(obj), idxs[obj]))",
  "label": 0,
  "code_tokens": "def csort ( objs , key ) : idxs = dict ( ( obj , i ) for ( i , obj ) in enumerate ( objs ) ) return sorted ( objs , key = lambda obj : ( key ( obj ) , idxs [ obj ] ) )",
  "docstring_tokens": "Order - preserving sorting function ."
 },
 {
  "idx": "webquery-test-781",
  "doc": "python get last n rows from list",
  "code": "def tail(self, n=10):\n        \"\"\"\n        Get an SArray that contains the last n elements in the SArray.\n\n        Parameters\n        ----------\n        n : int\n            The number of elements to fetch\n\n        Returns\n        -------\n        out : SArray\n            A new SArray which contains the last n rows of the current SArray.\n        \"\"\"\n        with cython_context():\n            return SArray(_proxy=self.__proxy__.tail(n))",
  "label": 0,
  "code_tokens": "def tail ( self , n = 10 ) : with cython_context ( ) : return SArray ( _proxy = self . __proxy__ . tail ( n ) )",
  "docstring_tokens": "Get an SArray that contains the last n elements in the SArray ."
 },
 {
  "idx": "webquery-test-782",
  "doc": "python get last n rows from list",
  "code": "def searchlast(self,n=10):\n        \"\"\"Return the last n results (or possibly less if not found). Note that the last results are not necessarily the best ones! Depending on the search type.\"\"\"            \n        solutions = deque([], n)\n        for solution in self:\n            solutions.append(solution)\n        return solutions",
  "label": 1,
  "code_tokens": "def searchlast ( self , n = 10 ) : solutions = deque ( [ ] , n ) for solution in self : solutions . append ( solution ) return solutions",
  "docstring_tokens": "Return the last n results ( or possibly less if not found ) . Note that the last results are not necessarily the best ones! Depending on the search type ."
 },
 {
  "idx": "webquery-test-783",
  "doc": "how to index a matrix python",
  "code": "def get_inputs_from_cm(index, cm):\n    \"\"\"Return indices of inputs to the node with the given index.\"\"\"\n    return tuple(i for i in range(cm.shape[0]) if cm[i][index])",
  "label": 0,
  "code_tokens": "def get_inputs_from_cm ( index , cm ) : return tuple ( i for i in range ( cm . shape [ 0 ] ) if cm [ i ] [ index ] )",
  "docstring_tokens": "Return indices of inputs to the node with the given index ."
 },
 {
  "idx": "webquery-test-784",
  "doc": "how to index a matrix python",
  "code": "def _transform_triple_numpy(x):\n    \"\"\"Transform triple index into a 1-D numpy array.\"\"\"\n    return np.array([x.head, x.relation, x.tail], dtype=np.int64)",
  "label": 0,
  "code_tokens": "def _transform_triple_numpy ( x ) : return np . array ( [ x . head , x . relation , x . tail ] , dtype = np . int64 )",
  "docstring_tokens": "Transform triple index into a 1 - D numpy array ."
 },
 {
  "idx": "webquery-test-785",
  "doc": "pass list to argparse python",
  "code": "def parse_command_args():\n    \"\"\"Command line parser.\"\"\"\n    parser = argparse.ArgumentParser(description='Register PB devices.')\n    parser.add_argument('num_pb', type=int,\n                        help='Number of PBs devices to register.')\n    return parser.parse_args()",
  "label": 0,
  "code_tokens": "def parse_command_args ( ) : parser = argparse . ArgumentParser ( description = 'Register PB devices.' ) parser . add_argument ( 'num_pb' , type = int , help = 'Number of PBs devices to register.' ) return parser . parse_args ( )",
  "docstring_tokens": "Command line parser ."
 },
 {
  "idx": "webquery-test-786",
  "doc": "pass list to argparse python",
  "code": "def add_to_parser(self, parser):\n        \"\"\"\n        Adds the argument to an argparse.ArgumentParser instance\n\n        @param parser An argparse.ArgumentParser instance\n        \"\"\"\n        kwargs = self._get_kwargs()\n        args = self._get_args()\n        parser.add_argument(*args, **kwargs)",
  "label": 0,
  "code_tokens": "def add_to_parser ( self , parser ) : kwargs = self . _get_kwargs ( ) args = self . _get_args ( ) parser . add_argument ( * args , * * kwargs )",
  "docstring_tokens": "Adds the argument to an argparse . ArgumentParser instance"
 },
 {
  "idx": "webquery-test-787",
  "doc": "python conver nan to none",
  "code": "def clean_with_zeros(self,x):\n        \"\"\" set nan and inf rows from x to zero\"\"\"\n        x[~np.any(np.isnan(x) | np.isinf(x),axis=1)] = 0\n        return x",
  "label": 1,
  "code_tokens": "def clean_with_zeros ( self , x ) : x [ ~ np . any ( np . isnan ( x ) | np . isinf ( x ) , axis = 1 ) ] = 0 return x",
  "docstring_tokens": "set nan and inf rows from x to zero"
 },
 {
  "idx": "webquery-test-788",
  "doc": "python conver nan to none",
  "code": "def clean_dataframe(df):\n    \"\"\"Fill NaNs with the previous value, the next value or if all are NaN then 1.0\"\"\"\n    df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df",
  "label": 1,
  "code_tokens": "def clean_dataframe ( df ) : df = df . fillna ( method = 'ffill' ) df = df . fillna ( 0.0 ) return df",
  "docstring_tokens": "Fill NaNs with the previous value the next value or if all are NaN then 1 . 0"
 },
 {
  "idx": "webquery-test-789",
  "doc": "python add object to dict repeatly",
  "code": "def as_dictionary(self):\n        \"\"\"\n        Convert this object to a dictionary with formatting appropriate for a PIF.\n\n        :returns: Dictionary with the content of this object formatted for a PIF.\n        \"\"\"\n        return {to_camel_case(i): Serializable._convert_to_dictionary(self.__dict__[i])\n                for i in self.__dict__ if self.__dict__[i] is not None}",
  "label": 1,
  "code_tokens": "def as_dictionary ( self ) : return { to_camel_case ( i ) : Serializable . _convert_to_dictionary ( self . __dict__ [ i ] ) for i in self . __dict__ if self . __dict__ [ i ] is not None }",
  "docstring_tokens": "Convert this object to a dictionary with formatting appropriate for a PIF ."
 },
 {
  "idx": "webquery-test-790",
  "doc": "python add object to dict repeatly",
  "code": "def _zeep_to_dict(cls, obj):\n        \"\"\"Convert a zeep object to a dictionary.\"\"\"\n        res = serialize_object(obj)\n        res = cls._get_non_empty_dict(res)\n        return res",
  "label": 1,
  "code_tokens": "def _zeep_to_dict ( cls , obj ) : res = serialize_object ( obj ) res = cls . _get_non_empty_dict ( res ) return res",
  "docstring_tokens": "Convert a zeep object to a dictionary ."
 },
 {
  "idx": "webquery-test-791",
  "doc": "how to make matrix in python numpy",
  "code": "def get_matrix(self):\n        \"\"\"  Use numpy to create a real matrix object from the data\n\n        :return: the matrix representation of the fvm\n        \"\"\"\n        return np.array([ self.get_row_list(i) for i in range(self.row_count()) ])",
  "label": 1,
  "code_tokens": "def get_matrix ( self ) : return np . array ( [ self . get_row_list ( i ) for i in range ( self . row_count ( ) ) ] )",
  "docstring_tokens": "Use numpy to create a real matrix object from the data"
 },
 {
  "idx": "webquery-test-792",
  "doc": "how to make matrix in python numpy",
  "code": "def length(self):\n        \"\"\"Array of vector lengths\"\"\"\n        return np.sqrt(np.sum(self**2, axis=1)).view(np.ndarray)",
  "label": 0,
  "code_tokens": "def length ( self ) : return np . sqrt ( np . sum ( self ** 2 , axis = 1 ) ) . view ( np . ndarray )",
  "docstring_tokens": "Array of vector lengths"
 },
 {
  "idx": "webquery-test-793",
  "doc": "one hot encoder binning python",
  "code": "def hex_escape(bin_str):\n  \"\"\"\n  Hex encode a binary string\n  \"\"\"\n  printable = string.ascii_letters + string.digits + string.punctuation + ' '\n  return ''.join(ch if ch in printable else r'0x{0:02x}'.format(ord(ch)) for ch in bin_str)",
  "label": 1,
  "code_tokens": "def hex_escape ( bin_str ) : printable = string . ascii_letters + string . digits + string . punctuation + ' ' return '' . join ( ch if ch in printable else r'0x{0:02x}' . format ( ord ( ch ) ) for ch in bin_str )",
  "docstring_tokens": "Hex encode a binary string"
 },
 {
  "idx": "webquery-test-794",
  "doc": "one hot encoder binning python",
  "code": "def feature_encoders(self, data_dir):\n    \"\"\"Return a dict for encoding and decoding inference input/output.\n\n    Args:\n      data_dir: data directory\n\n    Returns:\n      A dict of <feature name, TextEncoder>.\n\n    \"\"\"\n    encoders = (super(BabiQa, self).feature_encoders(data_dir))\n    label_encoder = self.get_labels_encoder(data_dir)\n    encoders[\"targets\"] = label_encoder  # bAbi as a classification task\n    return encoders",
  "label": 0,
  "code_tokens": "def feature_encoders ( self , data_dir ) : encoders = ( super ( BabiQa , self ) . feature_encoders ( data_dir ) ) label_encoder = self . get_labels_encoder ( data_dir ) encoders [ \"targets\" ] = label_encoder # bAbi as a classification task return encoders",
  "docstring_tokens": "Return a dict for encoding and decoding inference input / output ."
 },
 {
  "idx": "webquery-test-795",
  "doc": "time to timedelta python",
  "code": "def run_time() -> timedelta:\n    \"\"\"\n\n    :return:\n    \"\"\"\n\n    delta = start_time if start_time else datetime.utcnow()\n    return datetime.utcnow() - delta",
  "label": 0,
  "code_tokens": "def run_time ( ) -> timedelta : delta = start_time if start_time else datetime . utcnow ( ) return datetime . utcnow ( ) - delta",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-796",
  "doc": "time to timedelta python",
  "code": "def elapsed_time_from(start_time):\n    \"\"\"calculate time delta from latched time and current time\"\"\"\n    time_then = make_time(start_time)\n    time_now = datetime.utcnow().replace(microsecond=0)\n    if time_then is None:\n        return\n    delta_t = time_now - time_then\n    return delta_t",
  "label": 0,
  "code_tokens": "def elapsed_time_from ( start_time ) : time_then = make_time ( start_time ) time_now = datetime . utcnow ( ) . replace ( microsecond = 0 ) if time_then is None : return delta_t = time_now - time_then return delta_t",
  "docstring_tokens": "calculate time delta from latched time and current time"
 },
 {
  "idx": "webquery-test-797",
  "doc": "python communicate str bytes",
  "code": "def bytes_to_str(s, encoding='utf-8'):\n    \"\"\"Returns a str if a bytes object is given.\"\"\"\n    if six.PY3 and isinstance(s, bytes):\n        return s.decode(encoding)\n    return s",
  "label": 0,
  "code_tokens": "def bytes_to_str ( s , encoding = 'utf-8' ) : if six . PY3 and isinstance ( s , bytes ) : return s . decode ( encoding ) return s",
  "docstring_tokens": "Returns a str if a bytes object is given ."
 },
 {
  "idx": "webquery-test-798",
  "doc": "python communicate str bytes",
  "code": "def to_bytes(s, encoding=\"utf-8\"):\n    \"\"\"Convert a string to bytes.\"\"\"\n    if isinstance(s, six.binary_type):\n        return s\n    if six.PY3:\n        return bytes(s, encoding)\n    return s.encode(encoding)",
  "label": 1,
  "code_tokens": "def to_bytes ( s , encoding = \"utf-8\" ) : if isinstance ( s , six . binary_type ) : return s if six . PY3 : return bytes ( s , encoding ) return s . encode ( encoding )",
  "docstring_tokens": "Convert a string to bytes ."
 },
 {
  "idx": "webquery-test-799",
  "doc": "print matrix object python",
  "code": "def _get_pretty_string(obj):\n    \"\"\"Return a prettier version of obj\n\n    Parameters\n    ----------\n    obj : object\n        Object to pretty print\n\n    Returns\n    -------\n    s : str\n        Pretty print object repr\n    \"\"\"\n    sio = StringIO()\n    pprint.pprint(obj, stream=sio)\n    return sio.getvalue()",
  "label": 0,
  "code_tokens": "def _get_pretty_string ( obj ) : sio = StringIO ( ) pprint . pprint ( obj , stream = sio ) return sio . getvalue ( )",
  "docstring_tokens": "Return a prettier version of obj"
 },
 {
  "idx": "webquery-test-800",
  "doc": "print matrix object python",
  "code": "def get_object_info(self):\n        \"\"\"\n        Returns object info in following form <module.class object at address>\n        \"\"\"\n        objectinfo = str(self.__class__).replace(\">\", \"\")\n        objectinfo = objectinfo.replace(\"class \", \"\")\n        objectinfo = objectinfo.replace(\"'\", \"\")\n        objectinfo += \" object at 0x%x>\" % id(self)\n        return objectinfo",
  "label": 0,
  "code_tokens": "def get_object_info ( self ) : objectinfo = str ( self . __class__ ) . replace ( \">\" , \"\" ) objectinfo = objectinfo . replace ( \"class \" , \"\" ) objectinfo = objectinfo . replace ( \"'\" , \"\" ) objectinfo += \" object at 0x%x>\" % id ( self ) return objectinfo",
  "docstring_tokens": "Returns object info in following form <module . class object at address >"
 },
 {
  "idx": "webquery-test-801",
  "doc": "how to remove duplicates from a text file python",
  "code": "def remove_dups(seq):\n    \"\"\"remove duplicates from a sequence, preserving order\"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in seq if not (x in seen or seen_add(x))]",
  "label": 1,
  "code_tokens": "def remove_dups ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]",
  "docstring_tokens": "remove duplicates from a sequence preserving order"
 },
 {
  "idx": "webquery-test-802",
  "doc": "how to remove duplicates from a text file python",
  "code": "def read_set_from_file(filename: str) -> Set[str]:\n    \"\"\"\n    Extract a de-duped collection (set) of text from a file.\n    Expected file format is one item per line.\n    \"\"\"\n    collection = set()\n    with open(filename, 'r') as file_:\n        for line in file_:\n            collection.add(line.rstrip())\n    return collection",
  "label": 1,
  "code_tokens": "def read_set_from_file ( filename : str ) -> Set [ str ] : collection = set ( ) with open ( filename , 'r' ) as file_ : for line in file_ : collection . add ( line . rstrip ( ) ) return collection",
  "docstring_tokens": "Extract a de - duped collection ( set ) of text from a file . Expected file format is one item per line ."
 },
 {
  "idx": "webquery-test-803",
  "doc": "python elasticsearch query dynamic condition",
  "code": "def search_on(self, *fields, **query):\n        \"\"\"\n        Search for query on given fields.\n\n        Query modifier can be one of these:\n            * exact\n            * contains\n            * startswith\n            * endswith\n            * range\n            * lte\n            * gte\n\n        Args:\n            \\*fields (str): Field list to be searched on\n            \\*\\*query:  Search query. While it's implemented as \\*\\*kwargs\n             we only support one (first) keyword argument.\n\n        Returns:\n            Self. Queryset object.\n\n        Examples:\n            >>> Person.objects.search_on('name', 'surname', contains='john')\n            >>> Person.objects.search_on('name', 'surname', startswith='jo')\n        \"\"\"\n        search_type = list(query.keys())[0]\n        parsed_query = self._parse_query_modifier(search_type, query[search_type], False)\n        self.add_query([(\"OR_QRY\", dict([(f, parsed_query) for f in fields]), True)])",
  "label": 0,
  "code_tokens": "def search_on ( self , * fields , * * query ) : search_type = list ( query . keys ( ) ) [ 0 ] parsed_query = self . _parse_query_modifier ( search_type , query [ search_type ] , False ) self . add_query ( [ ( \"OR_QRY\" , dict ( [ ( f , parsed_query ) for f in fields ] ) , True ) ] )",
  "docstring_tokens": "Search for query on given fields ."
 },
 {
  "idx": "webquery-test-804",
  "doc": "python elasticsearch query dynamic condition",
  "code": "def _term(self, term):\n        \"\"\"Add a term to the query.\n\n        Arguments:\n            term (str): The term to add.\n\n        Returns:\n            SearchHelper: Self\n        \"\"\"\n        # All terms must be strings for Elasticsearch\n        term = str(term)\n        if term:\n            self.__query[\"q\"] += term\n        return self",
  "label": 1,
  "code_tokens": "def _term ( self , term ) : # All terms must be strings for Elasticsearch term = str ( term ) if term : self . __query [ \"q\" ] += term return self",
  "docstring_tokens": "Add a term to the query ."
 },
 {
  "idx": "webquery-test-805",
  "doc": "create document term matrix in python with tdidfvectorizer todense",
  "code": "def tt_comp(self, sampled_topics):\n\n        \"\"\"\n        Compute term-topic matrix from sampled_topics.\n        \"\"\"\n\n        samples = sampled_topics.shape[0]\n        tt = np.zeros((self.V, self.K, samples))\n\n        for s in range(samples):            \n            tt[:, :, s] = \\\n                samplers_lda.tt_comp(self.tokens, sampled_topics[s, :],\n                                     self.N, self.V, self.K, self.beta)\n\n        return tt",
  "label": 0,
  "code_tokens": "def tt_comp ( self , sampled_topics ) : samples = sampled_topics . shape [ 0 ] tt = np . zeros ( ( self . V , self . K , samples ) ) for s in range ( samples ) : tt [ : , : , s ] = samplers_lda . tt_comp ( self . tokens , sampled_topics [ s , : ] , self . N , self . V , self . K , self . beta ) return tt",
  "docstring_tokens": "Compute term - topic matrix from sampled_topics ."
 },
 {
  "idx": "webquery-test-806",
  "doc": "create document term matrix in python with tdidfvectorizer todense",
  "code": "def dt_comp(self, sampled_topics):\n\n        \"\"\"\n        Compute document-topic matrix from sampled_topics.\n        \"\"\"\n\n        samples = sampled_topics.shape[0]\n        dt = np.zeros((self.D, self.K, samples))\n\n        for s in range(samples):            \n                dt[:, :, s] = \\\n                    samplers_lda.dt_comp(self.docid, sampled_topics[s, :],\n                                         self.N, self.K, self.D, self.alpha)\n\n        return dt",
  "label": 0,
  "code_tokens": "def dt_comp ( self , sampled_topics ) : samples = sampled_topics . shape [ 0 ] dt = np . zeros ( ( self . D , self . K , samples ) ) for s in range ( samples ) : dt [ : , : , s ] = samplers_lda . dt_comp ( self . docid , sampled_topics [ s , : ] , self . N , self . K , self . D , self . alpha ) return dt",
  "docstring_tokens": "Compute document - topic matrix from sampled_topics ."
 },
 {
  "idx": "webquery-test-807",
  "doc": "matiain a logger across python files",
  "code": "def register_logging_factories(loader):\n    \"\"\"\n    Registers default factories for logging standard package.\n\n    :param loader: Loader where you want register default logging factories\n    \"\"\"\n    loader.register_factory(logging.Logger, LoggerFactory)\n    loader.register_factory(logging.Handler, LoggingHandlerFactory)",
  "label": 1,
  "code_tokens": "def register_logging_factories ( loader ) : loader . register_factory ( logging . Logger , LoggerFactory ) loader . register_factory ( logging . Handler , LoggingHandlerFactory )",
  "docstring_tokens": "Registers default factories for logging standard package ."
 },
 {
  "idx": "webquery-test-808",
  "doc": "matiain a logger across python files",
  "code": "def configure(logger=None):\n    \"\"\"Pass stump a logger to use. If no logger is supplied, a basic logger\n    of level INFO will print to stdout.\n\n    \"\"\"\n    global LOGGER\n    if logger is None:\n        LOGGER = logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n    else:\n        LOGGER = logger",
  "label": 1,
  "code_tokens": "def configure ( logger = None ) : global LOGGER if logger is None : LOGGER = logging . basicConfig ( stream = sys . stdout , level = logging . INFO ) else : LOGGER = logger",
  "docstring_tokens": "Pass stump a logger to use . If no logger is supplied a basic logger of level INFO will print to stdout ."
 },
 {
  "idx": "webquery-test-809",
  "doc": "python 'str' object has no attribute 'length'",
  "code": "def short_repr(obj, max_len=40):\n  \"\"\"Returns a short, term-friendly string representation of the object.\n\n  Args:\n    obj: An object for which to return a string representation.\n    max_len: Maximum length of the returned string. Longer reprs will be turned\n        into a brief descriptive string giving the type and length of obj.\n  \"\"\"\n  obj_repr = repr(obj)\n  if len(obj_repr) <= max_len:\n    return obj_repr\n  return '<{} of length {}>'.format(type(obj).__name__, len(obj_repr))",
  "label": 0,
  "code_tokens": "def short_repr ( obj , max_len = 40 ) : obj_repr = repr ( obj ) if len ( obj_repr ) <= max_len : return obj_repr return '<{} of length {}>' . format ( type ( obj ) . __name__ , len ( obj_repr ) )",
  "docstring_tokens": "Returns a short term - friendly string representation of the object ."
 },
 {
  "idx": "webquery-test-810",
  "doc": "python 'str' object has no attribute 'length'",
  "code": "def set_name(self, name):\n        \"\"\"Set the module name to a 6 byte string\n\n        If the string is too short it is appended with space characters.\n        \"\"\"\n\n        if len(name) > 6:\n            raise ArgumentError(\"Name must be at most 6 characters long\", name=name)\n\n        if len(name) < 6:\n            name += ' '*(6 - len(name))\n\n        self.name = name",
  "label": 0,
  "code_tokens": "def set_name ( self , name ) : if len ( name ) > 6 : raise ArgumentError ( \"Name must be at most 6 characters long\" , name = name ) if len ( name ) < 6 : name += ' ' * ( 6 - len ( name ) ) self . name = name",
  "docstring_tokens": "Set the module name to a 6 byte string"
 },
 {
  "idx": "webquery-test-811",
  "doc": "supervisor python execute shell",
  "code": "def _handle_shell(self,cfg_file,*args,**options):\n        \"\"\"Command 'supervisord shell' runs the interactive command shell.\"\"\"\n        args = (\"--interactive\",) + args\n        return supervisorctl.main((\"-c\",cfg_file) + args)",
  "label": 0,
  "code_tokens": "def _handle_shell ( self , cfg_file , * args , * * options ) : args = ( \"--interactive\" , ) + args return supervisorctl . main ( ( \"-c\" , cfg_file ) + args )",
  "docstring_tokens": "Command supervisord shell runs the interactive command shell ."
 },
 {
  "idx": "webquery-test-812",
  "doc": "supervisor python execute shell",
  "code": "def callprint(self, cmd, shell=None, lock_file=None, nofail=False, container=None):\n        \"\"\"\n        Prints the command, and then executes it, then prints the memory use and\n        return code of the command.\n\n        Uses python's subprocess.Popen() to execute the given command. The shell argument is simply\n        passed along to Popen(). You should use shell=False (default) where possible, because this enables memory\n        profiling. You should use shell=True if you require shell functions like redirects (>) or stars (*), but this\n        will prevent the script from monitoring memory use. The pipes (|) will be used to split the command into\n        subprocesses run within python, so the memory profiling is possible.\n\n        cmd can also be a series (a dict object) of multiple commands, which will be run in succession.\n\n        :param str | Iterable[str] cmd: Bash command(s) to be run.\n        :param str lock_file: a lock file name\n        :param bool nofail: Should the pipeline bail on a nonzero return from a process? Default: False\n            Nofail can be used to implement non-essential parts of the pipeline; if these processes fail,\n            they will not cause the pipeline to bail out.\n        :param bool shell: if the command should be run it its own shell, default: None (will try\n            to determine based on the command)\n        :param container: Named Docker container in which to execute.\n        :param container: str\n        \"\"\"\n        # The Popen shell argument works like this:\n        # if shell=False, then we format the command (with split()) to be a list of command and its arguments.\n        # Split the command to use shell=False;\n        # leave it together to use shell=True;\n\n        def get_mem_child_sum(proc):\n            try:\n                # get children processes\n                children = proc.children(recursive=True)\n                # get RSS memory of each child proc and sum all\n                mem_sum = sum([x.memory_info().rss for x in children])\n                # return in gigs\n                return mem_sum/1e9\n            except (psutil.NoSuchProcess, psutil.ZombieProcess) as e:\n                print(e)\n                print(\"Warning: couldn't add memory use for process: {}\".format(proc.pid))\n                return 0\n\n\n        def display_memory(memval):\n            return None if memval < 0 else \"{}GB\".format(round(memval, 3))\n\n        def make_dict(command):\n            a, s = (command, True) if check_shell(command, shell) else (shlex.split(command), False)\n            return dict(args=a, stdout=subprocess.PIPE, shell=s)\n\n        if container:\n            cmd = \"docker exec \" + container + \" \" + cmd\n\n        param_list = [make_dict(c) for c in split_by_pipes(cmd)] \\\n            if check_shell_pipes(cmd) else [dict(args=cmd, stdout=None, shell=True)]\n\n        proc_name = get_proc_name(cmd)\n\n        # stop_times = []\n        processes = []\n        running_processes = []\n        start_time = time.time()\n        for i in range(len(param_list)):\n            running_processes.append(i)\n            if i == 0:\n                processes.append(psutil.Popen(preexec_fn=os.setpgrp, **param_list[i]))\n            else:\n                param_list[i][\"stdin\"] = processes[i - 1].stdout\n                processes.append(psutil.Popen(preexec_fn=os.setpgrp, **param_list[i]))\n\n            self.procs[processes[-1].pid] = {\n                \"proc_name\": proc_name,\n                \"subproc_name\" : get_proc_name(param_list[i][\"args\"]),\n                \"start_time\": start_time,\n                \"container\": container,\n                \"p\": processes[-1]\n            }\n\n        self._report_command(cmd, [x.pid for x in processes])\n            # Capture the subprocess output in <pre> tags to make it format nicely\n            # if the markdown log file is displayed as HTML.\n        print(\"<pre>\")\n\n        local_maxmems = [-1] * len(running_processes)\n        returncodes = [None] * len(running_processes)\n\n        if not self.wait:\n            print(\"</pre>\")\n            ids = [x.pid for x in processes]\n            print (\"Not waiting for subprocess(es): \" + str(ids))\n            return [0, -1]\n\n        def proc_wrapup(i):\n            \"\"\"\n            :param i: internal ID number of the subprocess\n            \"\"\"\n            returncode = processes[i].returncode\n            current_pid = processes[i].pid\n\n            info = \"Process {pid} returned {ret}; memory: {mem}. \".format(\n                pid=current_pid, \n                ret=processes[i].returncode,\n                mem=display_memory(local_maxmems[i]))\n            \n            # report process profile\n            self._report_profile(self.procs[current_pid][\"proc_name\"], lock_file, time.time() - self.procs[current_pid][\"start_time\"], local_maxmems[i])\n\n            # Remove this as a running subprocess\n            del self.procs[current_pid]\n            running_processes.remove(i)\n\n            returncodes[i] = returncode\n            return info\n\n\n        sleeptime = .0001\n        info = \"\"\n        while running_processes:\n            for i in running_processes:\n                local_maxmems[i] = max(local_maxmems[i], (get_mem_child_sum(processes[i])))\n                self.peak_memory = max(self.peak_memory, local_maxmems[i])\n                if not self._attend_process(processes[i], sleeptime):\n                    info += proc_wrapup(i)\n\n            # the sleeptime is extremely short at the beginning and gets longer exponentially \n            # (+ constant to prevent copious checks at the very beginning)\n            # = more precise mem tracing for short processes\n            sleeptime = min((sleeptime + 0.25) * 3 , 60/len(processes))\n\n        # All jobs are done, print a final closing and job info\n        stop_time = time.time()\n        info += \" Elapsed: \" + str(datetime.timedelta(seconds=self.time_elapsed(start_time))) + \".\"\n        info += \" Peak memory: {pipe}.\".format(pipe=display_memory(self.peak_memory))\n\n        print(\"</pre>\")\n        print(info)\n\n        for rc in returncodes:\n            if rc != 0:\n                msg = \"Subprocess returned nonzero result. Check above output for details\"\n                self._triage_error(SubprocessError(msg), nofail)\n\n\n\n        return [returncodes, local_maxmems]",
  "label": 1,
  "code_tokens": "def callprint ( self , cmd , shell = None , lock_file = None , nofail = False , container = None ) : # The Popen shell argument works like this: # if shell=False, then we format the command (with split()) to be a list of command and its arguments. # Split the command to use shell=False; # leave it together to use shell=True; def get_mem_child_sum ( proc ) : try : # get children processes children = proc . children ( recursive = True ) # get RSS memory of each child proc and sum all mem_sum = sum ( [ x . memory_info ( ) . rss for x in children ] ) # return in gigs return mem_sum / 1e9 except ( psutil . NoSuchProcess , psutil . ZombieProcess ) as e : print ( e ) print ( \"Warning: couldn't add memory use for process: {}\" . format ( proc . pid ) ) return 0 def display_memory ( memval ) : return None if memval < 0 else \"{}GB\" . format ( round ( memval , 3 ) ) def make_dict ( command ) : a , s = ( command , True ) if check_shell ( command , shell ) else ( shlex . split ( command ) , False ) return dict ( args = a , stdout = subprocess . PIPE , shell = s ) if container : cmd = \"docker exec \" + container + \" \" + cmd param_list = [ make_dict ( c ) for c in split_by_pipes ( cmd ) ] if check_shell_pipes ( cmd ) else [ dict ( args = cmd , stdout = None , shell = True ) ] proc_name = get_proc_name ( cmd ) # stop_times = [] processes = [ ] running_processes = [ ] start_time = time . time ( ) for i in range ( len ( param_list ) ) : running_processes . append ( i ) if i == 0 : processes . append ( psutil . Popen ( preexec_fn = os . setpgrp , * * param_list [ i ] ) ) else : param_list [ i ] [ \"stdin\" ] = processes [ i - 1 ] . stdout processes . append ( psutil . Popen ( preexec_fn = os . setpgrp , * * param_list [ i ] ) ) self . procs [ processes [ - 1 ] . pid ] = { \"proc_name\" : proc_name , \"subproc_name\" : get_proc_name ( param_list [ i ] [ \"args\" ] ) , \"start_time\" : start_time , \"container\" : container , \"p\" : processes [ - 1 ] } self . _report_command ( cmd , [ x . pid for x in processes ] ) # Capture the subprocess output in <pre> tags to make it format nicely # if the markdown log file is displayed as HTML. print ( \"<pre>\" ) local_maxmems = [ - 1 ] * len ( running_processes ) returncodes = [ None ] * len ( running_processes ) if not self . wait : print ( \"</pre>\" ) ids = [ x . pid for x in processes ] print ( \"Not waiting for subprocess(es): \" + str ( ids ) ) return [ 0 , - 1 ] def proc_wrapup ( i ) : \"\"\"\n            :param i: internal ID number of the subprocess\n            \"\"\" returncode = processes [ i ] . returncode current_pid = processes [ i ] . pid info = \"Process {pid} returned {ret}; memory: {mem}. \" . format ( pid = current_pid , ret = processes [ i ] . returncode , mem = display_memory ( local_maxmems [ i ] ) ) # report process profile self . _report_profile ( self . procs [ current_pid ] [ \"proc_name\" ] , lock_file , time . time ( ) - self . procs [ current_pid ] [ \"start_time\" ] , local_maxmems [ i ] ) # Remove this as a running subprocess del self . procs [ current_pid ] running_processes . remove ( i ) returncodes [ i ] = returncode return info sleeptime = .0001 info = \"\" while running_processes : for i in running_processes : local_maxmems [ i ] = max ( local_maxmems [ i ] , ( get_mem_child_sum ( processes [ i ] ) ) ) self . peak_memory = max ( self . peak_memory , local_maxmems [ i ] ) if not self . _attend_process ( processes [ i ] , sleeptime ) : info += proc_wrapup ( i ) # the sleeptime is extremely short at the beginning and gets longer exponentially  # (+ constant to prevent copious checks at the very beginning) # = more precise mem tracing for short processes sleeptime = min ( ( sleeptime + 0.25 ) * 3 , 60 / len ( processes ) ) # All jobs are done, print a final closing and job info stop_time = time . time ( ) info += \" Elapsed: \" + str ( datetime . timedelta ( seconds = self . time_elapsed ( start_time ) ) ) + \".\" info += \" Peak memory: {pipe}.\" . format ( pipe = display_memory ( self . peak_memory ) ) print ( \"</pre>\" ) print ( info ) for rc in returncodes : if rc != 0 : msg = \"Subprocess returned nonzero result. Check above output for details\" self . _triage_error ( SubprocessError ( msg ) , nofail ) return [ returncodes , local_maxmems ]",
  "docstring_tokens": "Prints the command and then executes it then prints the memory use and return code of the command ."
 },
 {
  "idx": "webquery-test-813",
  "doc": "python string replace dash",
  "code": "def slugify(value):\n    \"\"\"Simple Slugify.\"\"\"\n    s1 = first_cap_re.sub(r'\\1_\\2', value)\n    s2 = all_cap_re.sub(r'\\1_\\2', s1)\n    return s2.lower().replace(' _', '_').replace(' ', '_')",
  "label": 0,
  "code_tokens": "def slugify ( value ) : s1 = first_cap_re . sub ( r'\\1_\\2' , value ) s2 = all_cap_re . sub ( r'\\1_\\2' , s1 ) return s2 . lower ( ) . replace ( ' _' , '_' ) . replace ( ' ' , '_' )",
  "docstring_tokens": "Simple Slugify ."
 },
 {
  "idx": "webquery-test-814",
  "doc": "python string replace dash",
  "code": "def slugify(s):\n    \"\"\"\n    Converts the given string to a URL slug.\n    \"\"\"\n    s = strip_accents(s.replace(\"'\", '').lower())\n    return re.sub('[^a-z0-9]+', ' ', s).strip().replace(' ', '-')",
  "label": 0,
  "code_tokens": "def slugify ( s ) : s = strip_accents ( s . replace ( \"'\" , '' ) . lower ( ) ) return re . sub ( '[^a-z0-9]+' , ' ' , s ) . strip ( ) . replace ( ' ' , '-' )",
  "docstring_tokens": "Converts the given string to a URL slug ."
 },
 {
  "idx": "webquery-test-815",
  "doc": "how to check postion of python program after break",
  "code": "def stop(self) -> None:\n        \"\"\"Stops the analysis as soon as possible.\"\"\"\n        if self._stop and not self._posted_kork:\n            self._stop()\n            self._stop = None",
  "label": 0,
  "code_tokens": "def stop ( self ) -> None : if self . _stop and not self . _posted_kork : self . _stop ( ) self . _stop = None",
  "docstring_tokens": "Stops the analysis as soon as possible ."
 },
 {
  "idx": "webquery-test-816",
  "doc": "how to check postion of python program after break",
  "code": "def timeout_thread_handler(timeout, stop_event):\n    \"\"\"A background thread to kill the process if it takes too long.\n\n    Args:\n        timeout (float): The number of seconds to wait before killing\n            the process.\n        stop_event (Event): An optional event to cleanly stop the background\n            thread if required during testing.\n    \"\"\"\n\n    stop_happened = stop_event.wait(timeout)\n    if stop_happened is False:\n        print(\"Killing program due to %f second timeout\" % timeout)\n\n    os._exit(2)",
  "label": 0,
  "code_tokens": "def timeout_thread_handler ( timeout , stop_event ) : stop_happened = stop_event . wait ( timeout ) if stop_happened is False : print ( \"Killing program due to %f second timeout\" % timeout ) os . _exit ( 2 )",
  "docstring_tokens": "A background thread to kill the process if it takes too long ."
 },
 {
  "idx": "webquery-test-817",
  "doc": "string format for decimal places python",
  "code": "def format_float(value): # not used\n    \"\"\"Modified form of the 'g' format specifier.\n    \"\"\"\n    string = \"{:g}\".format(value).replace(\"e+\", \"e\")\n    string = re.sub(\"e(-?)0*(\\d+)\", r\"e\\1\\2\", string)\n    return string",
  "label": 1,
  "code_tokens": "def format_float ( value ) : # not used string = \"{:g}\" . format ( value ) . replace ( \"e+\" , \"e\" ) string = re . sub ( \"e(-?)0*(\\d+)\" , r\"e\\1\\2\" , string ) return string",
  "docstring_tokens": "Modified form of the g format specifier ."
 },
 {
  "idx": "webquery-test-818",
  "doc": "string format for decimal places python",
  "code": "def _saferound(value, decimal_places):\n    \"\"\"\n    Rounds a float value off to the desired precision\n    \"\"\"\n    try:\n        f = float(value)\n    except ValueError:\n        return ''\n    format = '%%.%df' % decimal_places\n    return format % f",
  "label": 1,
  "code_tokens": "def _saferound ( value , decimal_places ) : try : f = float ( value ) except ValueError : return '' format = '%%.%df' % decimal_places return format % f",
  "docstring_tokens": "Rounds a float value off to the desired precision"
 },
 {
  "idx": "webquery-test-819",
  "doc": "print python in one line",
  "code": "def out(self, output, newline=True):\n        \"\"\"Outputs a string to the console (stdout).\"\"\"\n        click.echo(output, nl=newline)",
  "label": 0,
  "code_tokens": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )",
  "docstring_tokens": "Outputs a string to the console ( stdout ) ."
 },
 {
  "idx": "webquery-test-820",
  "doc": "print python in one line",
  "code": "def _display(self, layout):\n        \"\"\"launch layouts display\"\"\"\n        print(file=self.out)\n        TextWriter().format(layout, self.out)",
  "label": 0,
  "code_tokens": "def _display ( self , layout ) : print ( file = self . out ) TextWriter ( ) . format ( layout , self . out )",
  "docstring_tokens": "launch layouts display"
 },
 {
  "idx": "webquery-test-821",
  "doc": "how to duplicate object in a list in python",
  "code": "def remove_duplicates(lst):\n    \"\"\"\n    Emulate what a Python ``set()`` does, but keeping the element's order.\n    \"\"\"\n    dset = set()\n    return [l for l in lst if l not in dset and not dset.add(l)]",
  "label": 1,
  "code_tokens": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]",
  "docstring_tokens": "Emulate what a Python set () does but keeping the element s order ."
 },
 {
  "idx": "webquery-test-822",
  "doc": "how to duplicate object in a list in python",
  "code": "def unique(list):\n    \"\"\" Returns a copy of the list without duplicates.\n    \"\"\"\n    unique = []; [unique.append(x) for x in list if x not in unique]\n    return unique",
  "label": 1,
  "code_tokens": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique",
  "docstring_tokens": "Returns a copy of the list without duplicates ."
 },
 {
  "idx": "webquery-test-823",
  "doc": "extract year from column python",
  "code": "def format(x, format):\n    \"\"\"Uses http://www.cplusplus.com/reference/string/to_string/ for formatting\"\"\"\n    # don't change the dtype, otherwise for each block the dtype may be different (string length)\n    sl = vaex.strings.format(x, format)\n    return column.ColumnStringArrow(sl.bytes, sl.indices, sl.length, sl.offset, string_sequence=sl)",
  "label": 0,
  "code_tokens": "def format ( x , format ) : # don't change the dtype, otherwise for each block the dtype may be different (string length) sl = vaex . strings . format ( x , format ) return column . ColumnStringArrow ( sl . bytes , sl . indices , sl . length , sl . offset , string_sequence = sl )",
  "docstring_tokens": "Uses http : // www . cplusplus . com / reference / string / to_string / for formatting"
 },
 {
  "idx": "webquery-test-824",
  "doc": "extract year from column python",
  "code": "def _tab(content):\n    \"\"\"\n    Helper funcation that converts text-based get response\n    to tab separated values for additional manipulation.\n    \"\"\"\n    response = _data_frame(content).to_csv(index=False,sep='\\t')\n    return response",
  "label": 0,
  "code_tokens": "def _tab ( content ) : response = _data_frame ( content ) . to_csv ( index = False , sep = '\\t' ) return response",
  "docstring_tokens": "Helper funcation that converts text - based get response to tab separated values for additional manipulation ."
 },
 {
  "idx": "webquery-test-825",
  "doc": "python check a string is decimal",
  "code": "def hex2dec(s):\n    \"\"\"\n    hex2dec\n    \u5341\u516d\u8fdb\u5236 to \u5341\u8fdb\u5236\n    :param s:\n    :return:\n    \"\"\"\n    if not isinstance(s, str):\n        s = str(s)\n    return int(s.upper(), 16)",
  "label": 0,
  "code_tokens": "def hex2dec ( s ) : if not isinstance ( s , str ) : s = str ( s ) return int ( s . upper ( ) , 16 )",
  "docstring_tokens": "hex2dec \u5341\u516d\u8fdb\u5236 to \u5341\u8fdb\u5236 : param s : : return :"
 },
 {
  "idx": "webquery-test-826",
  "doc": "python check a string is decimal",
  "code": "def is_dec(ip):\n    \"\"\"Return true if the IP address is in decimal notation.\"\"\"\n    try:\n        dec = int(str(ip))\n    except ValueError:\n        return False\n    if dec > 4294967295 or dec < 0:\n        return False\n    return True",
  "label": 0,
  "code_tokens": "def is_dec ( ip ) : try : dec = int ( str ( ip ) ) except ValueError : return False if dec > 4294967295 or dec < 0 : return False return True",
  "docstring_tokens": "Return true if the IP address is in decimal notation ."
 },
 {
  "idx": "webquery-test-827",
  "doc": "individual array into one array python\\",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-828",
  "doc": "individual array into one array python\\",
  "code": "def pack_triples_numpy(triples):\n    \"\"\"Packs a list of triple indexes into a 2D numpy array.\"\"\"\n    if len(triples) == 0:\n        return np.array([], dtype=np.int64)\n    return np.stack(list(map(_transform_triple_numpy, triples)), axis=0)",
  "label": 0,
  "code_tokens": "def pack_triples_numpy ( triples ) : if len ( triples ) == 0 : return np . array ( [ ] , dtype = np . int64 ) return np . stack ( list ( map ( _transform_triple_numpy , triples ) ) , axis = 0 )",
  "docstring_tokens": "Packs a list of triple indexes into a 2D numpy array ."
 },
 {
  "idx": "webquery-test-829",
  "doc": "python3 flask response modify header",
  "code": "def set_header(self, name, value):\n        \"\"\" Create a new response header, replacing any previously defined\n            headers with the same name. \"\"\"\n        self._headers[_hkey(name)] = [_hval(value)]",
  "label": 1,
  "code_tokens": "def set_header ( self , name , value ) : self . _headers [ _hkey ( name ) ] = [ _hval ( value ) ]",
  "docstring_tokens": "Create a new response header replacing any previously defined headers with the same name ."
 },
 {
  "idx": "webquery-test-830",
  "doc": "python3 flask response modify header",
  "code": "def get_wsgi_headers(self, environ):\n        \"\"\"This is automatically called right before the response is started\n        and returns headers modified for the given environment.  It returns a\n        copy of the headers from the response with some modifications applied\n        if necessary.\n\n        For example the location header (if present) is joined with the root\n        URL of the environment.  Also the content length is automatically set\n        to zero here for certain status codes.\n\n        .. versionchanged:: 0.6\n           Previously that function was called `fix_headers` and modified\n           the response object in place.  Also since 0.6, IRIs in location\n           and content-location headers are handled properly.\n\n           Also starting with 0.6, Werkzeug will attempt to set the content\n           length if it is able to figure it out on its own.  This is the\n           case if all the strings in the response iterable are already\n           encoded and the iterable is buffered.\n\n        :param environ: the WSGI environment of the request.\n        :return: returns a new :class:`~werkzeug.datastructures.Headers`\n                 object.\n        \"\"\"\n        headers = Headers(self.headers)\n        location = None\n        content_location = None\n        content_length = None\n        status = self.status_code\n\n        # iterate over the headers to find all values in one go.  Because\n        # get_wsgi_headers is used each response that gives us a tiny\n        # speedup.\n        for key, value in headers:\n            ikey = key.lower()\n            if ikey == u'location':\n                location = value\n            elif ikey == u'content-location':\n                content_location = value\n            elif ikey == u'content-length':\n                content_length = value\n\n        # make sure the location header is an absolute URL\n        if location is not None:\n            old_location = location\n            if isinstance(location, text_type):\n                # Safe conversion is necessary here as we might redirect\n                # to a broken URI scheme (for instance itms-services).\n                location = iri_to_uri(location, safe_conversion=True)\n\n            if self.autocorrect_location_header:\n                current_url = get_current_url(environ, root_only=True)\n                if isinstance(current_url, text_type):\n                    current_url = iri_to_uri(current_url)\n                location = url_join(current_url, location)\n            if location != old_location:\n                headers['Location'] = location\n\n        # make sure the content location is a URL\n        if content_location is not None and \\\n           isinstance(content_location, text_type):\n            headers['Content-Location'] = iri_to_uri(content_location)\n\n        # remove entity headers and set content length to zero if needed.\n        # Also update content_length accordingly so that the automatic\n        # content length detection does not trigger in the following\n        # code.\n        if 100 <= status < 200 or status == 204:\n            headers['Content-Length'] = content_length = u'0'\n        elif status == 304:\n            remove_entity_headers(headers)\n\n        # if we can determine the content length automatically, we\n        # should try to do that.  But only if this does not involve\n        # flattening the iterator or encoding of unicode strings in\n        # the response.  We however should not do that if we have a 304\n        # response.\n        if self.automatically_set_content_length and \\\n           self.is_sequence and content_length is None and status != 304:\n            try:\n                content_length = sum(len(to_bytes(x, 'ascii'))\n                                     for x in self.response)\n            except UnicodeError:\n                # aha, something non-bytestringy in there, too bad, we\n                # can't safely figure out the length of the response.\n                pass\n            else:\n                headers['Content-Length'] = str(content_length)\n\n        return headers",
  "label": 1,
  "code_tokens": "def get_wsgi_headers ( self , environ ) : headers = Headers ( self . headers ) location = None content_location = None content_length = None status = self . status_code # iterate over the headers to find all values in one go.  Because # get_wsgi_headers is used each response that gives us a tiny # speedup. for key , value in headers : ikey = key . lower ( ) if ikey == u'location' : location = value elif ikey == u'content-location' : content_location = value elif ikey == u'content-length' : content_length = value # make sure the location header is an absolute URL if location is not None : old_location = location if isinstance ( location , text_type ) : # Safe conversion is necessary here as we might redirect # to a broken URI scheme (for instance itms-services). location = iri_to_uri ( location , safe_conversion = True ) if self . autocorrect_location_header : current_url = get_current_url ( environ , root_only = True ) if isinstance ( current_url , text_type ) : current_url = iri_to_uri ( current_url ) location = url_join ( current_url , location ) if location != old_location : headers [ 'Location' ] = location # make sure the content location is a URL if content_location is not None and isinstance ( content_location , text_type ) : headers [ 'Content-Location' ] = iri_to_uri ( content_location ) # remove entity headers and set content length to zero if needed. # Also update content_length accordingly so that the automatic # content length detection does not trigger in the following # code. if 100 <= status < 200 or status == 204 : headers [ 'Content-Length' ] = content_length = u'0' elif status == 304 : remove_entity_headers ( headers ) # if we can determine the content length automatically, we # should try to do that.  But only if this does not involve # flattening the iterator or encoding of unicode strings in # the response.  We however should not do that if we have a 304 # response. if self . automatically_set_content_length and self . is_sequence and content_length is None and status != 304 : try : content_length = sum ( len ( to_bytes ( x , 'ascii' ) ) for x in self . response ) except UnicodeError : # aha, something non-bytestringy in there, too bad, we # can't safely figure out the length of the response. pass else : headers [ 'Content-Length' ] = str ( content_length ) return headers",
  "docstring_tokens": "This is automatically called right before the response is started and returns headers modified for the given environment . It returns a copy of the headers from the response with some modifications applied if necessary ."
 },
 {
  "idx": "webquery-test-831",
  "doc": "display result without matrix wrapper python",
  "code": "def print_matrix(X, decimals=1):\n    \"\"\"Pretty printing for numpy matrix X\"\"\"\n    for row in np.round(X, decimals=decimals):\n        print(row)",
  "label": 1,
  "code_tokens": "def print_matrix ( X , decimals = 1 ) : for row in np . round ( X , decimals = decimals ) : print ( row )",
  "docstring_tokens": "Pretty printing for numpy matrix X"
 },
 {
  "idx": "webquery-test-832",
  "doc": "display result without matrix wrapper python",
  "code": "def size(self):\n        \"\"\"Total number of grid points.\"\"\"\n        # Since np.prod(()) == 1.0 we need to handle that by ourselves\n        return (0 if self.shape == () else\n                int(np.prod(self.shape, dtype='int64')))",
  "label": 0,
  "code_tokens": "def size ( self ) : # Since np.prod(()) == 1.0 we need to handle that by ourselves return ( 0 if self . shape == ( ) else int ( np . prod ( self . shape , dtype = 'int64' ) ) )",
  "docstring_tokens": "Total number of grid points ."
 },
 {
  "idx": "webquery-test-833",
  "doc": "python counts the number of words in a string",
  "code": "def onscreen_len(s):\n    \"\"\"\n    Calculate the length of a unicode string on screen,\n    accounting for double-width characters\n\n    \"\"\"\n\n    if sys.version_info < (3, 0) and isinstance(s, str):\n        return len(s)\n\n    length = 0\n    for ch in s:\n        length += 2 if unicodedata.east_asian_width(ch) == 'W' else 1\n\n    return length",
  "label": 0,
  "code_tokens": "def onscreen_len ( s ) : if sys . version_info < ( 3 , 0 ) and isinstance ( s , str ) : return len ( s ) length = 0 for ch in s : length += 2 if unicodedata . east_asian_width ( ch ) == 'W' else 1 return length",
  "docstring_tokens": "Calculate the length of a unicode string on screen accounting for double - width characters"
 },
 {
  "idx": "webquery-test-834",
  "doc": "python counts the number of words in a string",
  "code": "def display_len(text):\n    \"\"\"\n    Get the display length of a string. This can differ from the character\n    length if the string contains wide characters.\n    \"\"\"\n    text = unicodedata.normalize('NFD', text)\n    return sum(char_width(char) for char in text)",
  "label": 0,
  "code_tokens": "def display_len ( text ) : text = unicodedata . normalize ( 'NFD' , text ) return sum ( char_width ( char ) for char in text )",
  "docstring_tokens": "Get the display length of a string . This can differ from the character length if the string contains wide characters ."
 },
 {
  "idx": "webquery-test-835",
  "doc": "python user defined function email with attachments",
  "code": "def create_message(username, message):\r\n    \"\"\" Creates a standard message from a given user with the message \r\n        Replaces newline with html break \"\"\"\r\n    message = message.replace('\\n', '<br/>')\r\n    return '{{\"service\":1, \"data\":{{\"message\":\"{mes}\", \"username\":\"{user}\"}} }}'.format(mes=message, user=username)",
  "label": 0,
  "code_tokens": "def create_message ( username , message ) : message = message . replace ( '\\n' , '<br/>' ) return '{{\"service\":1, \"data\":{{\"message\":\"{mes}\", \"username\":\"{user}\"}} }}' . format ( mes = message , user = username )",
  "docstring_tokens": "Creates a standard message from a given user with the message Replaces newline with html break"
 },
 {
  "idx": "webquery-test-836",
  "doc": "python user defined function email with attachments",
  "code": "def send_test_message(messenger_id, to=None):\n    \"\"\"Sends a test message using the given messenger.\n\n    :param str|unicode messenger_id: Messenger alias.\n    :param str|unicode to: Recipient address (if applicable).\n\n    \"\"\"\n    messenger_obj = get_registered_messenger_object(messenger_id)\n    return messenger_obj.send_test_message(to=to, text='Test message from sitemessages.')",
  "label": 0,
  "code_tokens": "def send_test_message ( messenger_id , to = None ) : messenger_obj = get_registered_messenger_object ( messenger_id ) return messenger_obj . send_test_message ( to = to , text = 'Test message from sitemessages.' )",
  "docstring_tokens": "Sends a test message using the given messenger ."
 },
 {
  "idx": "webquery-test-837",
  "doc": "how to read file from sharepoint using python",
  "code": "def get_file_string(filepath):\n    \"\"\"Get string from file.\"\"\"\n    with open(os.path.abspath(filepath)) as f:\n        return f.read()",
  "label": 0,
  "code_tokens": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )",
  "docstring_tokens": "Get string from file ."
 },
 {
  "idx": "webquery-test-838",
  "doc": "how to read file from sharepoint using python",
  "code": "def str_from_file(path):\n    \"\"\"\n    Return file contents as string.\n\n    \"\"\"\n    with open(path) as f:\n        s = f.read().strip()\n    return s",
  "label": 0,
  "code_tokens": "def str_from_file ( path ) : with open ( path ) as f : s = f . read ( ) . strip ( ) return s",
  "docstring_tokens": "Return file contents as string ."
 },
 {
  "idx": "webquery-test-839",
  "doc": "store dir subdir to list of folder name python",
  "code": "def get_files(dir_name):\r\n    \"\"\"Simple directory walker\"\"\"\r\n    return [(os.path.join('.', d), [os.path.join(d, f) for f in files]) for d, _, files in os.walk(dir_name)]",
  "label": 1,
  "code_tokens": "def get_files ( dir_name ) : return [ ( os . path . join ( '.' , d ) , [ os . path . join ( d , f ) for f in files ] ) for d , _ , files in os . walk ( dir_name ) ]",
  "docstring_tokens": "Simple directory walker"
 },
 {
  "idx": "webquery-test-840",
  "doc": "store dir subdir to list of folder name python",
  "code": "def get_subdirs(parent_path):\n  \"\"\"Return a list of (name, path) tuples of direct subdirectories of\n\n    parent_path, where each tuple corresponds to one subdirectory. Files\n    in the parent_path are excluded from the output.\n    \"\"\"\n  entries = os.listdir(parent_path)\n  subdirs = [(entry, os.path.join(parent_path, entry))\n             for entry in entries\n             if os.path.isdir(entry)]\n  return subdirs",
  "label": 1,
  "code_tokens": "def get_subdirs ( parent_path ) : entries = os . listdir ( parent_path ) subdirs = [ ( entry , os . path . join ( parent_path , entry ) ) for entry in entries if os . path . isdir ( entry ) ] return subdirs",
  "docstring_tokens": "Return a list of ( name path ) tuples of direct subdirectories of"
 },
 {
  "idx": "webquery-test-841",
  "doc": "python flask receive a image opencv",
  "code": "def url_to_image(url, flag=cv2.IMREAD_COLOR):\n    \"\"\" download the image, convert it to a NumPy array, and then read\n    it into OpenCV format \"\"\"\n    resp = urlopen(url)\n    image = np.asarray(bytearray(resp.read()), dtype=\"uint8\")\n    image = cv2.imdecode(image, flag)\n    return image",
  "label": 1,
  "code_tokens": "def url_to_image ( url , flag = cv2 . IMREAD_COLOR ) : resp = urlopen ( url ) image = np . asarray ( bytearray ( resp . read ( ) ) , dtype = \"uint8\" ) image = cv2 . imdecode ( image , flag ) return image",
  "docstring_tokens": "download the image convert it to a NumPy array and then read it into OpenCV format"
 },
 {
  "idx": "webquery-test-842",
  "doc": "python flask receive a image opencv",
  "code": "def screen_cv2(self):\r\n        \"\"\"cv2 Image of current window screen\"\"\"\r\n        pil_image = self.screen.convert('RGB')\r\n        cv2_image = np.array(pil_image)\r\n        pil_image.close()\r\n        # Convert RGB to BGR \r\n        cv2_image = cv2_image[:, :, ::-1]\r\n        return cv2_image",
  "label": 0,
  "code_tokens": "def screen_cv2 ( self ) : pil_image = self . screen . convert ( 'RGB' ) cv2_image = np . array ( pil_image ) pil_image . close ( ) # Convert RGB to BGR \r cv2_image = cv2_image [ : , : , : : - 1 ] return cv2_image",
  "docstring_tokens": "cv2 Image of current window screen"
 },
 {
  "idx": "webquery-test-843",
  "doc": "file as stdin python",
  "code": "def read_stdin():\n    \"\"\" Read text from stdin, and print a helpful message for ttys. \"\"\"\n    if sys.stdin.isatty() and sys.stdout.isatty():\n        print('\\nReading from stdin until end of file (Ctrl + D)...')\n\n    return sys.stdin.read()",
  "label": 0,
  "code_tokens": "def read_stdin ( ) : if sys . stdin . isatty ( ) and sys . stdout . isatty ( ) : print ( '\\nReading from stdin until end of file (Ctrl + D)...' ) return sys . stdin . read ( )",
  "docstring_tokens": "Read text from stdin and print a helpful message for ttys ."
 },
 {
  "idx": "webquery-test-844",
  "doc": "file as stdin python",
  "code": "def standard_input():\n    \"\"\"Generator that yields lines from standard input.\"\"\"\n    with click.get_text_stream(\"stdin\") as stdin:\n        while stdin.readable():\n            line = stdin.readline()\n            if line:\n                yield line.strip().encode(\"utf-8\")",
  "label": 0,
  "code_tokens": "def standard_input ( ) : with click . get_text_stream ( \"stdin\" ) as stdin : while stdin . readable ( ) : line = stdin . readline ( ) if line : yield line . strip ( ) . encode ( \"utf-8\" )",
  "docstring_tokens": "Generator that yields lines from standard input ."
 },
 {
  "idx": "webquery-test-845",
  "doc": "how to return several values without using tuple in python",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 0,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-846",
  "doc": "how to return several values without using tuple in python",
  "code": "def get_value_tuple(self):\n        \"\"\"\n        Returns a tuple of the color's values (in order). For example,\n        an LabColor object will return (lab_l, lab_a, lab_b), where each\n        member of the tuple is the float value for said variable.\n        \"\"\"\n        retval = tuple()\n        for val in self.VALUES:\n            retval += (getattr(self, val),)\n        return retval",
  "label": 0,
  "code_tokens": "def get_value_tuple ( self ) : retval = tuple ( ) for val in self . VALUES : retval += ( getattr ( self , val ) , ) return retval",
  "docstring_tokens": "Returns a tuple of the color s values ( in order ) . For example an LabColor object will return ( lab_l lab_a lab_b ) where each member of the tuple is the float value for said variable ."
 },
 {
  "idx": "webquery-test-847",
  "doc": "how to plot linear graph in python",
  "code": "def guinierplot(*args, **kwargs):\n    \"\"\"Make a Guinier plot. This is simply a wrapper around plotsascurve().\"\"\"\n    ret=plotsascurve(*args, **kwargs)\n    plt.xscale('power',exponent=2)\n    plt.yscale('log')\n    return ret",
  "label": 1,
  "code_tokens": "def guinierplot ( * args , * * kwargs ) : ret = plotsascurve ( * args , * * kwargs ) plt . xscale ( 'power' , exponent = 2 ) plt . yscale ( 'log' ) return ret",
  "docstring_tokens": "Make a Guinier plot . This is simply a wrapper around plotsascurve () ."
 },
 {
  "idx": "webquery-test-848",
  "doc": "how to plot linear graph in python",
  "code": "def plot_curves_z(data, name, title=None):\n    \"\"\"Generates a simple plot of the quasiparticle weight decay curves given\n       data object with doping setup\"\"\"\n\n    plt.figure()\n    for zet, c in zip(data['zeta'], data['doping']):\n        plt.plot(data['u_int'], zet[:, 0], label='$n={}$'.format(str(c)))\n    if title != None:\n        plt.title(title)\n    label_saves(name+'.png')",
  "label": 1,
  "code_tokens": "def plot_curves_z ( data , name , title = None ) : plt . figure ( ) for zet , c in zip ( data [ 'zeta' ] , data [ 'doping' ] ) : plt . plot ( data [ 'u_int' ] , zet [ : , 0 ] , label = '$n={}$' . format ( str ( c ) ) ) if title != None : plt . title ( title ) label_saves ( name + '.png' )",
  "docstring_tokens": "Generates a simple plot of the quasiparticle weight decay curves given data object with doping setup"
 },
 {
  "idx": "webquery-test-849",
  "doc": "replace list element in python",
  "code": "def myreplace(astr, thefind, thereplace):\n    \"\"\"in string astr replace all occurences of thefind with thereplace\"\"\"\n    alist = astr.split(thefind)\n    new_s = alist.split(thereplace)\n    return new_s",
  "label": 1,
  "code_tokens": "def myreplace ( astr , thefind , thereplace ) : alist = astr . split ( thefind ) new_s = alist . split ( thereplace ) return new_s",
  "docstring_tokens": "in string astr replace all occurences of thefind with thereplace"
 },
 {
  "idx": "webquery-test-850",
  "doc": "replace list element in python",
  "code": "def replace(s, replace):\n    \"\"\"Replace multiple values in a string\"\"\"\n    for r in replace:\n        s = s.replace(*r)\n    return s",
  "label": 1,
  "code_tokens": "def replace ( s , replace ) : for r in replace : s = s . replace ( * r ) return s",
  "docstring_tokens": "Replace multiple values in a string"
 },
 {
  "idx": "webquery-test-851",
  "doc": "python file directory self defining",
  "code": "def parent_directory(self):\r\n        \"\"\"Change working directory to parent directory\"\"\"\r\n        self.chdir(os.path.join(getcwd_or_home(), os.path.pardir))",
  "label": 1,
  "code_tokens": "def parent_directory ( self ) : self . chdir ( os . path . join ( getcwd_or_home ( ) , os . path . pardir ) )",
  "docstring_tokens": "Change working directory to parent directory"
 },
 {
  "idx": "webquery-test-852",
  "doc": "python file directory self defining",
  "code": "def go_to_parent_directory(self):\r\n        \"\"\"Go to parent directory\"\"\"\r\n        self.chdir(osp.abspath(osp.join(getcwd_or_home(), os.pardir)))",
  "label": 1,
  "code_tokens": "def go_to_parent_directory ( self ) : self . chdir ( osp . abspath ( osp . join ( getcwd_or_home ( ) , os . pardir ) ) )",
  "docstring_tokens": "Go to parent directory"
 },
 {
  "idx": "webquery-test-853",
  "doc": "python print a character by ascii code",
  "code": "def _escape_char(c, escape_char=ESCAPE_CHAR):\n    \"\"\"Escape a single character\"\"\"\n    buf = []\n    for byte in c.encode('utf8'):\n        buf.append(escape_char)\n        buf.append('%X' % _ord(byte))\n    return ''.join(buf)",
  "label": 1,
  "code_tokens": "def _escape_char ( c , escape_char = ESCAPE_CHAR ) : buf = [ ] for byte in c . encode ( 'utf8' ) : buf . append ( escape_char ) buf . append ( '%X' % _ord ( byte ) ) return '' . join ( buf )",
  "docstring_tokens": "Escape a single character"
 },
 {
  "idx": "webquery-test-854",
  "doc": "python print a character by ascii code",
  "code": "def unicode_is_ascii(u_string):\n    \"\"\"Determine if unicode string only contains ASCII characters.\n\n    :param str u_string: unicode string to check. Must be unicode\n        and not Python 2 `str`.\n    :rtype: bool\n    \"\"\"\n    assert isinstance(u_string, str)\n    try:\n        u_string.encode('ascii')\n        return True\n    except UnicodeEncodeError:\n        return False",
  "label": 1,
  "code_tokens": "def unicode_is_ascii ( u_string ) : assert isinstance ( u_string , str ) try : u_string . encode ( 'ascii' ) return True except UnicodeEncodeError : return False",
  "docstring_tokens": "Determine if unicode string only contains ASCII characters ."
 },
 {
  "idx": "webquery-test-855",
  "doc": "show xml in text widget python",
  "code": "def text(self):\n        \"\"\"\n        Return the String assosicated with the current text\n        \"\"\"\n        if self.m_name == -1 or self.m_event != TEXT:\n            return ''\n\n        return self.sb[self.m_name]",
  "label": 1,
  "code_tokens": "def text ( self ) : if self . m_name == - 1 or self . m_event != TEXT : return '' return self . sb [ self . m_name ]",
  "docstring_tokens": "Return the String assosicated with the current text"
 },
 {
  "idx": "webquery-test-856",
  "doc": "show xml in text widget python",
  "code": "def to_text(self):\n        \"\"\"Render a Text MessageElement as plain text\n\n        :returns: Text representation of the Text MessageElement.\n        :rtype: str\n        \"\"\"\n        if self.text is None:\n            return\n        else:\n            text = ''\n            for t in self.text:\n                text += t.to_text() + ' '\n            return ' '.join(text.split())",
  "label": 1,
  "code_tokens": "def to_text ( self ) : if self . text is None : return else : text = '' for t in self . text : text += t . to_text ( ) + ' ' return ' ' . join ( text . split ( ) )",
  "docstring_tokens": "Render a Text MessageElement as plain text"
 },
 {
  "idx": "webquery-test-857",
  "doc": "python test if value is number",
  "code": "def get_number(s, cast=int):\n    \"\"\"\n    Try to get a number out of a string, and cast it.\n    \"\"\"\n    import string\n    d = \"\".join(x for x in str(s) if x in string.digits)\n    return cast(d)",
  "label": 0,
  "code_tokens": "def get_number ( s , cast = int ) : import string d = \"\" . join ( x for x in str ( s ) if x in string . digits ) return cast ( d )",
  "docstring_tokens": "Try to get a number out of a string and cast it ."
 },
 {
  "idx": "webquery-test-858",
  "doc": "python test if value is number",
  "code": "def _isint(string):\n    \"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"\n    return type(string) is int or \\\n           (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\\n           _isconvertible(int, string)",
  "label": 1,
  "code_tokens": "def _isint ( string ) : return type ( string ) is int or ( isinstance ( string , _binary_type ) or isinstance ( string , _text_type ) ) and _isconvertible ( int , string )",
  "docstring_tokens": ">>> _isint ( 123 ) True >>> _isint ( 123 . 45 ) False"
 },
 {
  "idx": "webquery-test-859",
  "doc": "python server disconnect socket",
  "code": "def shutdown(self):\n        \"\"\"close socket, immediately.\"\"\"\n        if self.sock:\n            self.sock.close()\n            self.sock = None\n            self.connected = False",
  "label": 1,
  "code_tokens": "def shutdown ( self ) : if self . sock : self . sock . close ( ) self . sock = None self . connected = False",
  "docstring_tokens": "close socket immediately ."
 },
 {
  "idx": "webquery-test-860",
  "doc": "python server disconnect socket",
  "code": "async def disconnect(self):\n        \"\"\" Disconnect from target. \"\"\"\n        if not self.connected:\n            return\n\n        self.writer.close()\n        self.reader = None\n        self.writer = None",
  "label": 1,
  "code_tokens": "async def disconnect ( self ) : if not self . connected : return self . writer . close ( ) self . reader = None self . writer = None",
  "docstring_tokens": "Disconnect from target ."
 },
 {
  "idx": "webquery-test-861",
  "doc": "how to save print to txt file python",
  "code": "def _display(self, layout):\n        \"\"\"launch layouts display\"\"\"\n        print(file=self.out)\n        TextWriter().format(layout, self.out)",
  "label": 1,
  "code_tokens": "def _display ( self , layout ) : print ( file = self . out ) TextWriter ( ) . format ( layout , self . out )",
  "docstring_tokens": "launch layouts display"
 },
 {
  "idx": "webquery-test-862",
  "doc": "how to save print to txt file python",
  "code": "def wr_txt(self, fout_txt=\"gos_depth01.txt\", title=None):\n        \"\"\"write text table of depth-01 GO terms and their letter representation.\"\"\"\n        with open(fout_txt, 'w') as prt:\n            self.prt_header(prt, title)\n            data_nts = self.prt_txt(prt)\n            sys.stdout.write(\"  {N:>5} items WROTE: {TXT}\\n\".format(\n                N=len(data_nts), TXT=fout_txt))",
  "label": 1,
  "code_tokens": "def wr_txt ( self , fout_txt = \"gos_depth01.txt\" , title = None ) : with open ( fout_txt , 'w' ) as prt : self . prt_header ( prt , title ) data_nts = self . prt_txt ( prt ) sys . stdout . write ( \"  {N:>5} items WROTE: {TXT}\\n\" . format ( N = len ( data_nts ) , TXT = fout_txt ) )",
  "docstring_tokens": "write text table of depth - 01 GO terms and their letter representation ."
 },
 {
  "idx": "webquery-test-863",
  "doc": "encody python to string",
  "code": "def string_repr(s):\n    \"\"\"Return a string as hex dump.\"\"\"\n    if compat.is_bytes(s):\n        res = \"{!r}: \".format(s)\n        for b in s:\n            if type(b) is str:  # Py2\n                b = ord(b)\n            res += \"%02x \" % b\n        return res\n    return \"{}\".format(s)",
  "label": 0,
  "code_tokens": "def string_repr ( s ) : if compat . is_bytes ( s ) : res = \"{!r}: \" . format ( s ) for b in s : if type ( b ) is str : # Py2 b = ord ( b ) res += \"%02x \" % b return res return \"{}\" . format ( s )",
  "docstring_tokens": "Return a string as hex dump ."
 },
 {
  "idx": "webquery-test-864",
  "doc": "encody python to string",
  "code": "def to_unicode_repr( _letter ):\n    \"\"\" helpful in situations where browser/app may recognize Unicode encoding\n        in the \\u0b8e type syntax but not actual unicode glyph/code-point\"\"\"\n    # Python 2-3 compatible\n    return u\"u'\"+ u\"\".join( [ u\"\\\\u%04x\"%ord(l) for l in _letter ] ) + u\"'\"",
  "label": 1,
  "code_tokens": "def to_unicode_repr ( _letter ) : # Python 2-3 compatible return u\"u'\" + u\"\" . join ( [ u\"\\\\u%04x\" % ord ( l ) for l in _letter ] ) + u\"'\"",
  "docstring_tokens": "helpful in situations where browser / app may recognize Unicode encoding in the \\ u0b8e type syntax but not actual unicode glyph / code - point"
 },
 {
  "idx": "webquery-test-865",
  "doc": "how to draw a rectangle ina plane opengl python",
  "code": "def draw(self):\n        \"\"\"Draw the shape in the current OpenGL context.\n\n        \"\"\"\n        if self.enabled:\n            self._vertex_list.colors = self._gl_colors\n            self._vertex_list.vertices = self._gl_vertices\n            self._vertex_list.draw(pyglet.gl.GL_TRIANGLES)",
  "label": 0,
  "code_tokens": "def draw ( self ) : if self . enabled : self . _vertex_list . colors = self . _gl_colors self . _vertex_list . vertices = self . _gl_vertices self . _vertex_list . draw ( pyglet . gl . GL_TRIANGLES )",
  "docstring_tokens": "Draw the shape in the current OpenGL context ."
 },
 {
  "idx": "webquery-test-866",
  "doc": "how to draw a rectangle ina plane opengl python",
  "code": "def draw(self, mode=\"triangles\"):\n        \"\"\" Draw collection \"\"\"\n\n        gl.glDepthMask(0)\n        Collection.draw(self, mode)\n        gl.glDepthMask(1)",
  "label": 0,
  "code_tokens": "def draw ( self , mode = \"triangles\" ) : gl . glDepthMask ( 0 ) Collection . draw ( self , mode ) gl . glDepthMask ( 1 )",
  "docstring_tokens": "Draw collection"
 },
 {
  "idx": "webquery-test-867",
  "doc": "how to write only unique to python",
  "code": "def _remove_duplicates(objects):\n    \"\"\"Removes duplicate objects.\n\n    http://www.peterbe.com/plog/uniqifiers-benchmark.\n    \"\"\"\n    seen, uniq = set(), []\n    for obj in objects:\n        obj_id = id(obj)\n        if obj_id in seen:\n            continue\n        seen.add(obj_id)\n        uniq.append(obj)\n    return uniq",
  "label": 1,
  "code_tokens": "def _remove_duplicates ( objects ) : seen , uniq = set ( ) , [ ] for obj in objects : obj_id = id ( obj ) if obj_id in seen : continue seen . add ( obj_id ) uniq . append ( obj ) return uniq",
  "docstring_tokens": "Removes duplicate objects ."
 },
 {
  "idx": "webquery-test-868",
  "doc": "how to write only unique to python",
  "code": "def unduplicate_field_names(field_names):\n    \"\"\"Append a number to duplicate field names to make them unique. \"\"\"\n    res = []\n    for k in field_names:\n        if k in res:\n            i = 1\n            while k + '_' + str(i) in res:\n                i += 1\n            k += '_' + str(i)\n        res.append(k)\n    return res",
  "label": 0,
  "code_tokens": "def unduplicate_field_names ( field_names ) : res = [ ] for k in field_names : if k in res : i = 1 while k + '_' + str ( i ) in res : i += 1 k += '_' + str ( i ) res . append ( k ) return res",
  "docstring_tokens": "Append a number to duplicate field names to make them unique ."
 },
 {
  "idx": "webquery-test-869",
  "doc": "python print elements of list in string format",
  "code": "def flatten_list(l):\n    \"\"\" Nested lists to single-level list, does not split strings\"\"\"\n    return list(chain.from_iterable(repeat(x,1) if isinstance(x,str) else x for x in l))",
  "label": 0,
  "code_tokens": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )",
  "docstring_tokens": "Nested lists to single - level list does not split strings"
 },
 {
  "idx": "webquery-test-870",
  "doc": "python print elements of list in string format",
  "code": "def _str_to_list(s):\n    \"\"\"Converts a comma separated string to a list\"\"\"\n    _list = s.split(\",\")\n    return list(map(lambda i: i.lstrip(), _list))",
  "label": 0,
  "code_tokens": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )",
  "docstring_tokens": "Converts a comma separated string to a list"
 },
 {
  "idx": "webquery-test-871",
  "doc": "python how to make yaml",
  "code": "def print_yaml(o):\n    \"\"\"Pretty print an object as YAML.\"\"\"\n    print(yaml.dump(o, default_flow_style=False, indent=4, encoding='utf-8'))",
  "label": 0,
  "code_tokens": "def print_yaml ( o ) : print ( yaml . dump ( o , default_flow_style = False , indent = 4 , encoding = 'utf-8' ) )",
  "docstring_tokens": "Pretty print an object as YAML ."
 },
 {
  "idx": "webquery-test-872",
  "doc": "python how to make yaml",
  "code": "def yaml_to_param(obj, name):\n\t\"\"\"\n\tReturn the top-level element of a document sub-tree containing the\n\tYAML serialization of a Python object.\n\t\"\"\"\n\treturn from_pyvalue(u\"yaml:%s\" % name, unicode(yaml.dump(obj)))",
  "label": 0,
  "code_tokens": "def yaml_to_param ( obj , name ) : return from_pyvalue ( u\"yaml:%s\" % name , unicode ( yaml . dump ( obj ) ) )",
  "docstring_tokens": "Return the top - level element of a document sub - tree containing the YAML serialization of a Python object ."
 },
 {
  "idx": "webquery-test-873",
  "doc": "linux python lock file",
  "code": "def __enter__(self):\n        \"\"\"Acquire a lock on the output file, prevents collisions between multiple runs.\"\"\"\n        self.fd = open(self.filename, 'a')\n        fcntl.lockf(self.fd, fcntl.LOCK_EX)\n        return self.fd",
  "label": 1,
  "code_tokens": "def __enter__ ( self ) : self . fd = open ( self . filename , 'a' ) fcntl . lockf ( self . fd , fcntl . LOCK_EX ) return self . fd",
  "docstring_tokens": "Acquire a lock on the output file prevents collisions between multiple runs ."
 },
 {
  "idx": "webquery-test-874",
  "doc": "linux python lock file",
  "code": "def acquire_nix(lock_file):  # pragma: no cover\n    \"\"\"Acquire a lock file on linux or osx.\"\"\"\n    fd = os.open(lock_file, OPEN_MODE)\n\n    try:\n        fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)\n    except (IOError, OSError):\n        os.close(fd)\n    else:\n        return fd",
  "label": 1,
  "code_tokens": "def acquire_nix ( lock_file ) : # pragma: no cover fd = os . open ( lock_file , OPEN_MODE ) try : fcntl . flock ( fd , fcntl . LOCK_EX | fcntl . LOCK_NB ) except ( IOError , OSError ) : os . close ( fd ) else : return fd",
  "docstring_tokens": "Acquire a lock file on linux or osx ."
 },
 {
  "idx": "webquery-test-875",
  "doc": "python visualizing line by line",
  "code": "def csvpretty(csvfile: csvfile=sys.stdin):\n    \"\"\" Pretty print a CSV file. \"\"\"\n    shellish.tabulate(csv.reader(csvfile))",
  "label": 0,
  "code_tokens": "def csvpretty ( csvfile : csvfile = sys . stdin ) : shellish . tabulate ( csv . reader ( csvfile ) )",
  "docstring_tokens": "Pretty print a CSV file ."
 },
 {
  "idx": "webquery-test-876",
  "doc": "python visualizing line by line",
  "code": "def reduce_multiline(string):\n    \"\"\"\n    reduces a multiline string to a single line of text.\n\n\n    args:\n        string: the text to reduce\n    \"\"\"\n    string = str(string)\n    return \" \".join([item.strip()\n                     for item in string.split(\"\\n\")\n                     if item.strip()])",
  "label": 0,
  "code_tokens": "def reduce_multiline ( string ) : string = str ( string ) return \" \" . join ( [ item . strip ( ) for item in string . split ( \"\\n\" ) if item . strip ( ) ] )",
  "docstring_tokens": "reduces a multiline string to a single line of text ."
 },
 {
  "idx": "webquery-test-877",
  "doc": "finding the median of an arrray in python",
  "code": "def fast_median(a):\n    \"\"\"Fast median operation for masked array using 50th-percentile\n    \"\"\"\n    a = checkma(a)\n    #return scoreatpercentile(a.compressed(), 50)\n    if a.count() > 0:\n        out = np.percentile(a.compressed(), 50)\n    else:\n        out = np.ma.masked\n    return out",
  "label": 1,
  "code_tokens": "def fast_median ( a ) : a = checkma ( a ) #return scoreatpercentile(a.compressed(), 50) if a . count ( ) > 0 : out = np . percentile ( a . compressed ( ) , 50 ) else : out = np . ma . masked return out",
  "docstring_tokens": "Fast median operation for masked array using 50th - percentile"
 },
 {
  "idx": "webquery-test-878",
  "doc": "finding the median of an arrray in python",
  "code": "def findMax(arr):\n    \"\"\"\n    in comparison to argrelmax() more simple and  reliable peak finder\n    \"\"\"\n    out = np.zeros(shape=arr.shape, dtype=bool)\n    _calcMax(arr, out)\n    return out",
  "label": 0,
  "code_tokens": "def findMax ( arr ) : out = np . zeros ( shape = arr . shape , dtype = bool ) _calcMax ( arr , out ) return out",
  "docstring_tokens": "in comparison to argrelmax () more simple and reliable peak finder"
 },
 {
  "idx": "webquery-test-879",
  "doc": "concatenate list items into string python",
  "code": "def list2string (inlist,delimit=' '):\n    \"\"\"\nConverts a 1D list to a single long string for file output, using\nthe string.join function.\n\nUsage:   list2string (inlist,delimit=' ')\nReturns: the string created from inlist\n\"\"\"\n    stringlist = [makestr(_) for _ in inlist]\n    return string.join(stringlist,delimit)",
  "label": 1,
  "code_tokens": "def list2string ( inlist , delimit = ' ' ) : stringlist = [ makestr ( _ ) for _ in inlist ] return string . join ( stringlist , delimit )",
  "docstring_tokens": "Converts a 1D list to a single long string for file output using the string . join function ."
 },
 {
  "idx": "webquery-test-880",
  "doc": "concatenate list items into string python",
  "code": "def commajoin_as_strings(iterable):\n    \"\"\" Join the given iterable with ',' \"\"\"\n    return _(u',').join((six.text_type(i) for i in iterable))",
  "label": 0,
  "code_tokens": "def commajoin_as_strings ( iterable ) : return _ ( u',' ) . join ( ( six . text_type ( i ) for i in iterable ) )",
  "docstring_tokens": "Join the given iterable with"
 },
 {
  "idx": "webquery-test-881",
  "doc": "how to make a list of lists in python",
  "code": "def flatten_list(x: List[Any]) -> List[Any]:\n    \"\"\"\n    Converts a list of lists into a flat list.\n    \n    Args:\n        x: list of lists \n\n    Returns:\n        flat list\n        \n    As per\n    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\n\n    \"\"\"  # noqa\n    return [item for sublist in x for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]",
  "docstring_tokens": "Converts a list of lists into a flat list . Args : x : list of lists"
 },
 {
  "idx": "webquery-test-882",
  "doc": "how to make a list of lists in python",
  "code": "def serialize(self, value, **kwargs):\n        \"\"\"Serialize every item of the list.\"\"\"\n        return [self.item_type.serialize(val, **kwargs) for val in value]",
  "label": 0,
  "code_tokens": "def serialize ( self , value , * * kwargs ) : return [ self . item_type . serialize ( val , * * kwargs ) for val in value ]",
  "docstring_tokens": "Serialize every item of the list ."
 },
 {
  "idx": "webquery-test-883",
  "doc": "python3 binary integer to bytes",
  "code": "def intToBin(i):\n    \"\"\" Integer to two bytes \"\"\"\n    # divide in two parts (bytes)\n    i1 = i % 256\n    i2 = int(i / 256)\n    # make string (little endian)\n    return i.to_bytes(2, byteorder='little')",
  "label": 1,
  "code_tokens": "def intToBin ( i ) : # divide in two parts (bytes) i1 = i % 256 i2 = int ( i / 256 ) # make string (little endian) return i . to_bytes ( 2 , byteorder = 'little' )",
  "docstring_tokens": "Integer to two bytes"
 },
 {
  "idx": "webquery-test-884",
  "doc": "python3 binary integer to bytes",
  "code": "def i2b(self, pkt, x):\n        \"\"\"Convert internal value to internal value\"\"\"\n        if type(x) is str:\n          x = bytes([ ord(i) for i in x ])\n        return x",
  "label": 0,
  "code_tokens": "def i2b ( self , pkt , x ) : if type ( x ) is str : x = bytes ( [ ord ( i ) for i in x ] ) return x",
  "docstring_tokens": "Convert internal value to internal value"
 },
 {
  "idx": "webquery-test-885",
  "doc": "x y z normalize vector python",
  "code": "def _z(self, x):\n    \"\"\"Standardize input `x` to a unit normal.\"\"\"\n    with tf.name_scope(\"standardize\"):\n      return (x - self.loc) / self.scale",
  "label": 0,
  "code_tokens": "def _z ( self , x ) : with tf . name_scope ( \"standardize\" ) : return ( x - self . loc ) / self . scale",
  "docstring_tokens": "Standardize input x to a unit normal ."
 },
 {
  "idx": "webquery-test-886",
  "doc": "x y z normalize vector python",
  "code": "def normalize(data):\n    \"\"\"\n    Function to normalize data to have mean 0 and unity standard deviation\n    (also called z-transform)\n    \n    \n    Parameters\n    ----------\n    data : numpy.ndarray\n    \n    \n    Returns\n    -------\n    numpy.ndarray\n        z-transform of input array\n    \n    \"\"\"\n    data = data.astype(float)\n    data -= data.mean()\n    \n    return data / data.std()",
  "label": 1,
  "code_tokens": "def normalize ( data ) : data = data . astype ( float ) data -= data . mean ( ) return data / data . std ( )",
  "docstring_tokens": "Function to normalize data to have mean 0 and unity standard deviation ( also called z - transform ) Parameters ---------- data : numpy . ndarray Returns ------- numpy . ndarray z - transform of input array"
 },
 {
  "idx": "webquery-test-887",
  "doc": "how to test of a list contains something in python",
  "code": "def _check_elements_equal(lst):\n    \"\"\"\n    Returns true if all of the elements in the list are equal.\n    \"\"\"\n    assert isinstance(lst, list), \"Input value must be a list.\"\n    return not lst or lst.count(lst[0]) == len(lst)",
  "label": 0,
  "code_tokens": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )",
  "docstring_tokens": "Returns true if all of the elements in the list are equal ."
 },
 {
  "idx": "webquery-test-888",
  "doc": "how to test of a list contains something in python",
  "code": "def isin(value, values):\n    \"\"\" Check that value is in values \"\"\"\n    for i, v in enumerate(value):\n        if v not in np.array(values)[:, i]:\n            return False\n    return True",
  "label": 1,
  "code_tokens": "def isin ( value , values ) : for i , v in enumerate ( value ) : if v not in np . array ( values ) [ : , i ] : return False return True",
  "docstring_tokens": "Check that value is in values"
 },
 {
  "idx": "webquery-test-889",
  "doc": "python take tuple as an input return new tuple as output",
  "code": "def compose_all(tups):\n  \"\"\"Compose all given tuples together.\"\"\"\n  from . import ast  # I weep for humanity\n  return functools.reduce(lambda x, y: x.compose(y), map(ast.make_tuple, tups), ast.make_tuple({}))",
  "label": 1,
  "code_tokens": "def compose_all ( tups ) : from . import ast # I weep for humanity return functools . reduce ( lambda x , y : x . compose ( y ) , map ( ast . make_tuple , tups ) , ast . make_tuple ( { } ) )",
  "docstring_tokens": "Compose all given tuples together ."
 },
 {
  "idx": "webquery-test-890",
  "doc": "python take tuple as an input return new tuple as output",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 0,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-891",
  "doc": "python strip args before running function",
  "code": "def gpp(argv=None):\n    \"\"\"Shortcut function for running the previewing command.\"\"\"\n    if argv is None:\n        argv = sys.argv[1:]\n    argv.insert(0, 'preview')\n    return main(argv)",
  "label": 0,
  "code_tokens": "def gpp ( argv = None ) : if argv is None : argv = sys . argv [ 1 : ] argv . insert ( 0 , 'preview' ) return main ( argv )",
  "docstring_tokens": "Shortcut function for running the previewing command ."
 },
 {
  "idx": "webquery-test-892",
  "doc": "python strip args before running function",
  "code": "def argument_search(self):\n        \"\"\"\n            Uses the command line arguments to fill the search function and call it.\n        \"\"\"\n        arguments, _ = self.argparser.parse_known_args()\n        return self.search(**vars(arguments))",
  "label": 0,
  "code_tokens": "def argument_search ( self ) : arguments , _ = self . argparser . parse_known_args ( ) return self . search ( * * vars ( arguments ) )",
  "docstring_tokens": "Uses the command line arguments to fill the search function and call it ."
 },
 {
  "idx": "webquery-test-893",
  "doc": "test django api in python shell",
  "code": "def test(*args):\n    \"\"\"\n    Run unit tests.\n    \"\"\"\n    subprocess.call([\"py.test-2.7\"] + list(args))\n    subprocess.call([\"py.test-3.4\"] + list(args))",
  "label": 0,
  "code_tokens": "def test ( * args ) : subprocess . call ( [ \"py.test-2.7\" ] + list ( args ) ) subprocess . call ( [ \"py.test-3.4\" ] + list ( args ) )",
  "docstring_tokens": "Run unit tests ."
 },
 {
  "idx": "webquery-test-894",
  "doc": "test django api in python shell",
  "code": "def build_suite(args):\n    \"\"\"Build a test suite by loading TAP files or a TAP stream.\"\"\"\n    loader = Loader()\n    if len(args.files) == 0 or args.files[0] == \"-\":\n        suite = loader.load_suite_from_stdin()\n    else:\n        suite = loader.load(args.files)\n    return suite",
  "label": 0,
  "code_tokens": "def build_suite ( args ) : loader = Loader ( ) if len ( args . files ) == 0 or args . files [ 0 ] == \"-\" : suite = loader . load_suite_from_stdin ( ) else : suite = loader . load ( args . files ) return suite",
  "docstring_tokens": "Build a test suite by loading TAP files or a TAP stream ."
 },
 {
  "idx": "webquery-test-895",
  "doc": "check to see if a value in dictionary is empty in python",
  "code": "def is_valid_row(cls, row):\n        \"\"\"Indicates whether or not the given row contains valid data.\"\"\"\n        for k in row.keys():\n            if row[k] is None:\n                return False\n        return True",
  "label": 0,
  "code_tokens": "def is_valid_row ( cls , row ) : for k in row . keys ( ) : if row [ k ] is None : return False return True",
  "docstring_tokens": "Indicates whether or not the given row contains valid data ."
 },
 {
  "idx": "webquery-test-896",
  "doc": "check to see if a value in dictionary is empty in python",
  "code": "def contains_empty(features):\n    \"\"\"Check features data are not empty\n\n    :param features: The features data to check.\n    :type features: list of numpy arrays.\n\n    :return: True if one of the array is empty, False else.\n\n    \"\"\"\n    if not features:\n        return True\n    for feature in features:\n        if feature.shape[0] == 0:\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def contains_empty ( features ) : if not features : return True for feature in features : if feature . shape [ 0 ] == 0 : return True return False",
  "docstring_tokens": "Check features data are not empty"
 },
 {
  "idx": "webquery-test-897",
  "doc": "python print a tuple without trailing comma",
  "code": "def as_tuple(self, value):\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\n        if isinstance(value, list):\n            value = tuple(value)\n        return value",
  "label": 0,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-898",
  "doc": "python print a tuple without trailing comma",
  "code": "def imt2tup(string):\n    \"\"\"\n    >>> imt2tup('PGA')\n    ('PGA',)\n    >>> imt2tup('SA(1.0)')\n    ('SA', 1.0)\n    >>> imt2tup('SA(1)')\n    ('SA', 1.0)\n    \"\"\"\n    s = string.strip()\n    if not s.endswith(')'):\n        # no parenthesis, PGA is considered the same as PGA()\n        return (s,)\n    name, rest = s.split('(', 1)\n    return (name,) + tuple(float(x) for x in ast.literal_eval(rest[:-1] + ','))",
  "label": 0,
  "code_tokens": "def imt2tup ( string ) : s = string . strip ( ) if not s . endswith ( ')' ) : # no parenthesis, PGA is considered the same as PGA() return ( s , ) name , rest = s . split ( '(' , 1 ) return ( name , ) + tuple ( float ( x ) for x in ast . literal_eval ( rest [ : - 1 ] + ',' ) )",
  "docstring_tokens": ">>> imt2tup ( PGA ) ( PGA ) >>> imt2tup ( SA ( 1 . 0 ) ) ( SA 1 . 0 ) >>> imt2tup ( SA ( 1 ) ) ( SA 1 . 0 )"
 },
 {
  "idx": "webquery-test-899",
  "doc": "python how to make something repeat print",
  "code": "def stdoutwriteline(*args):\n    \"\"\"\n    @type args: tuple\n    @return: None\n    \"\"\"\n    s = \"\"\n\n    for i in args:\n        s += str(i) + \" \"\n\n    s = s.strip()\n    sys.stdout.write(str(s) + \"\\n\")\n    sys.stdout.flush()\n\n    return s",
  "label": 0,
  "code_tokens": "def stdoutwriteline ( * args ) : s = \"\" for i in args : s += str ( i ) + \" \" s = s . strip ( ) sys . stdout . write ( str ( s ) + \"\\n\" ) sys . stdout . flush ( ) return s",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-900",
  "doc": "python how to make something repeat print",
  "code": "def _display(self, layout):\n        \"\"\"launch layouts display\"\"\"\n        print(file=self.out)\n        TextWriter().format(layout, self.out)",
  "label": 0,
  "code_tokens": "def _display ( self , layout ) : print ( file = self . out ) TextWriter ( ) . format ( layout , self . out )",
  "docstring_tokens": "launch layouts display"
 },
 {
  "idx": "webquery-test-901",
  "doc": "how to index arrays in python",
  "code": "def A(*a):\n    \"\"\"convert iterable object into numpy array\"\"\"\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 0,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-902",
  "doc": "how to index arrays in python",
  "code": "def _transform_triple_numpy(x):\n    \"\"\"Transform triple index into a 1-D numpy array.\"\"\"\n    return np.array([x.head, x.relation, x.tail], dtype=np.int64)",
  "label": 0,
  "code_tokens": "def _transform_triple_numpy ( x ) : return np . array ( [ x . head , x . relation , x . tail ] , dtype = np . int64 )",
  "docstring_tokens": "Transform triple index into a 1 - D numpy array ."
 },
 {
  "idx": "webquery-test-903",
  "doc": "sort by column and value condition python",
  "code": "def sort_data(data, cols):\n    \"\"\"Sort `data` rows and order columns\"\"\"\n    return data.sort_values(cols)[cols + ['value']].reset_index(drop=True)",
  "label": 1,
  "code_tokens": "def sort_data ( data , cols ) : return data . sort_values ( cols ) [ cols + [ 'value' ] ] . reset_index ( drop = True )",
  "docstring_tokens": "Sort data rows and order columns"
 },
 {
  "idx": "webquery-test-904",
  "doc": "sort by column and value condition python",
  "code": "def first(series, order_by=None):\n    \"\"\"\n    Returns the first value of a series.\n\n    Args:\n        series (pandas.Series): column to summarize.\n\n    Kwargs:\n        order_by: a pandas.Series or list of series (can be symbolic) to order\n            the input series by before summarization.\n    \"\"\"\n\n    if order_by is not None:\n        series = order_series_by(series, order_by)\n    first_s = series.iloc[0]\n    return first_s",
  "label": 0,
  "code_tokens": "def first ( series , order_by = None ) : if order_by is not None : series = order_series_by ( series , order_by ) first_s = series . iloc [ 0 ] return first_s",
  "docstring_tokens": "Returns the first value of a series ."
 },
 {
  "idx": "webquery-test-905",
  "doc": "how to change a sinlge value in a python list",
  "code": "def _fill_array_from_list(the_list, the_array):\n        \"\"\"Fill an `array` from a `list`\"\"\"\n        for i, val in enumerate(the_list):\n            the_array[i] = val\n        return the_array",
  "label": 1,
  "code_tokens": "def _fill_array_from_list ( the_list , the_array ) : for i , val in enumerate ( the_list ) : the_array [ i ] = val return the_array",
  "docstring_tokens": "Fill an array from a list"
 },
 {
  "idx": "webquery-test-906",
  "doc": "how to change a sinlge value in a python list",
  "code": "def flatten(l, types=(list, float)):\n    \"\"\"\n    Flat nested list of lists into a single list.\n    \"\"\"\n    l = [item if isinstance(item, types) else [item] for item in l]\n    return [item for sublist in l for item in sublist]",
  "label": 0,
  "code_tokens": "def flatten ( l , types = ( list , float ) ) : l = [ item if isinstance ( item , types ) else [ item ] for item in l ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Flat nested list of lists into a single list ."
 },
 {
  "idx": "webquery-test-907",
  "doc": "python test time part of code",
  "code": "def timeit(output):\n    \"\"\"\n    If output is string, then print the string and also time used\n    \"\"\"\n    b = time.time()\n    yield\n    print output, 'time used: %.3fs' % (time.time()-b)",
  "label": 1,
  "code_tokens": "def timeit ( output ) : b = time . time ( ) yield print output , 'time used: %.3fs' % ( time . time ( ) - b )",
  "docstring_tokens": "If output is string then print the string and also time used"
 },
 {
  "idx": "webquery-test-908",
  "doc": "python test time part of code",
  "code": "def timespan(start_time):\n    \"\"\"Return time in milliseconds from start_time\"\"\"\n\n    timespan = datetime.datetime.now() - start_time\n    timespan_ms = timespan.total_seconds() * 1000\n    return timespan_ms",
  "label": 1,
  "code_tokens": "def timespan ( start_time ) : timespan = datetime . datetime . now ( ) - start_time timespan_ms = timespan . total_seconds ( ) * 1000 return timespan_ms",
  "docstring_tokens": "Return time in milliseconds from start_time"
 },
 {
  "idx": "webquery-test-909",
  "doc": "python beautifulsoup check self with selector",
  "code": "def selected(self):\n        \"\"\"\n        Check whether all the matched elements are selected.\n\n        Returns:\n            bool\n        \"\"\"\n        query_results = self.map(lambda el: el.is_selected(), 'selected').results\n        if query_results:\n            return all(query_results)\n        return False",
  "label": 1,
  "code_tokens": "def selected ( self ) : query_results = self . map ( lambda el : el . is_selected ( ) , 'selected' ) . results if query_results : return all ( query_results ) return False",
  "docstring_tokens": "Check whether all the matched elements are selected ."
 },
 {
  "idx": "webquery-test-910",
  "doc": "python beautifulsoup check self with selector",
  "code": "def _css_select(soup, css_selector):\n        \"\"\" Returns the content of the element pointed by the CSS selector,\n        or an empty string if not found \"\"\"\n        selection = soup.select(css_selector)\n        if len(selection) > 0:\n            if hasattr(selection[0], 'text'):\n                retour = selection[0].text.strip()\n            else:\n                retour = \"\"\n        else:\n            retour = \"\"\n        return retour",
  "label": 1,
  "code_tokens": "def _css_select ( soup , css_selector ) : selection = soup . select ( css_selector ) if len ( selection ) > 0 : if hasattr ( selection [ 0 ] , 'text' ) : retour = selection [ 0 ] . text . strip ( ) else : retour = \"\" else : retour = \"\" return retour",
  "docstring_tokens": "Returns the content of the element pointed by the CSS selector or an empty string if not found"
 },
 {
  "idx": "webquery-test-911",
  "doc": "how to get compiled python file",
  "code": "def get_code(module):\n    \"\"\"\n    Compile and return a Module's code object.\n    \"\"\"\n    fp = open(module.path)\n    try:\n        return compile(fp.read(), str(module.name), 'exec')\n    finally:\n        fp.close()",
  "label": 1,
  "code_tokens": "def get_code ( module ) : fp = open ( module . path ) try : return compile ( fp . read ( ) , str ( module . name ) , 'exec' ) finally : fp . close ( )",
  "docstring_tokens": "Compile and return a Module s code object ."
 },
 {
  "idx": "webquery-test-912",
  "doc": "how to get compiled python file",
  "code": "def execfile(fname, variables):\n    \"\"\" This is builtin in python2, but we have to roll our own on py3. \"\"\"\n    with open(fname) as f:\n        code = compile(f.read(), fname, 'exec')\n        exec(code, variables)",
  "label": 1,
  "code_tokens": "def execfile ( fname , variables ) : with open ( fname ) as f : code = compile ( f . read ( ) , fname , 'exec' ) exec ( code , variables )",
  "docstring_tokens": "This is builtin in python2 but we have to roll our own on py3 ."
 },
 {
  "idx": "webquery-test-913",
  "doc": "check if df is empty python",
  "code": "def contains_empty(features):\n    \"\"\"Check features data are not empty\n\n    :param features: The features data to check.\n    :type features: list of numpy arrays.\n\n    :return: True if one of the array is empty, False else.\n\n    \"\"\"\n    if not features:\n        return True\n    for feature in features:\n        if feature.shape[0] == 0:\n            return True\n    return False",
  "label": 0,
  "code_tokens": "def contains_empty ( features ) : if not features : return True for feature in features : if feature . shape [ 0 ] == 0 : return True return False",
  "docstring_tokens": "Check features data are not empty"
 },
 {
  "idx": "webquery-test-914",
  "doc": "check if df is empty python",
  "code": "def empty(self):\n        \"\"\"\n        Indicator whether DataFrame is empty.\n\n        True if DataFrame is entirely empty (no items), meaning any of the\n        axes are of length 0.\n\n        Returns\n        -------\n        bool\n            If DataFrame is empty, return True, if not return False.\n\n        See Also\n        --------\n        Series.dropna\n        DataFrame.dropna\n\n        Notes\n        -----\n        If DataFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)",
  "label": 1,
  "code_tokens": "def empty ( self ) : return any ( len ( self . _get_axis ( a ) ) == 0 for a in self . _AXIS_ORDERS )",
  "docstring_tokens": "Indicator whether DataFrame is empty ."
 },
 {
  "idx": "webquery-test-915",
  "doc": "how to count the total elements in a set python",
  "code": "def most_common(items):\n    \"\"\"\n    Wanted functionality from Counters (new in Python 2.7).\n    \"\"\"\n    counts = {}\n    for i in items:\n        counts.setdefault(i, 0)\n        counts[i] += 1\n    return max(six.iteritems(counts), key=operator.itemgetter(1))",
  "label": 0,
  "code_tokens": "def most_common ( items ) : counts = { } for i in items : counts . setdefault ( i , 0 ) counts [ i ] += 1 return max ( six . iteritems ( counts ) , key = operator . itemgetter ( 1 ) )",
  "docstring_tokens": "Wanted functionality from Counters ( new in Python 2 . 7 ) ."
 },
 {
  "idx": "webquery-test-916",
  "doc": "how to count the total elements in a set python",
  "code": "def _most_common(iterable):\n    \"\"\"Returns the most common element in `iterable`.\"\"\"\n    data = Counter(iterable)\n    return max(data, key=data.__getitem__)",
  "label": 0,
  "code_tokens": "def _most_common ( iterable ) : data = Counter ( iterable ) return max ( data , key = data . __getitem__ )",
  "docstring_tokens": "Returns the most common element in iterable ."
 },
 {
  "idx": "webquery-test-917",
  "doc": "python for loop, incremental range",
  "code": "def frange(start, stop, step, precision):\n    \"\"\"A generator that will generate a range of floats.\"\"\"\n    value = start\n    while round(value, precision) < stop:\n        yield round(value, precision)\n        value += step",
  "label": 1,
  "code_tokens": "def frange ( start , stop , step , precision ) : value = start while round ( value , precision ) < stop : yield round ( value , precision ) value += step",
  "docstring_tokens": "A generator that will generate a range of floats ."
 },
 {
  "idx": "webquery-test-918",
  "doc": "python for loop, incremental range",
  "code": "def _accumulate(sequence, func):\n    \"\"\"\n    Python2 accumulate implementation taken from\n    https://docs.python.org/3/library/itertools.html#itertools.accumulate\n    \"\"\"\n    iterator = iter(sequence)\n    total = next(iterator)\n    yield total\n    for element in iterator:\n        total = func(total, element)\n        yield total",
  "label": 0,
  "code_tokens": "def _accumulate ( sequence , func ) : iterator = iter ( sequence ) total = next ( iterator ) yield total for element in iterator : total = func ( total , element ) yield total",
  "docstring_tokens": "Python2 accumulate implementation taken from https : // docs . python . org / 3 / library / itertools . html#itertools . accumulate"
 },
 {
  "idx": "webquery-test-919",
  "doc": "how to transform an object to integer in python",
  "code": "def FormatDescriptorToPython(i):\n    \"\"\"\n    Format a descriptor into a form which can be used as a python attribute\n\n    example::\n\n        >>> FormatDescriptorToPython('(Ljava/lang/Long; Ljava/lang/Long; Z Z)V')\n        'Ljava_lang_LongLjava_lang_LongZZV\n\n    :param i: name to transform\n    :rtype: str\n    \"\"\"\n\n    i = i.replace(\"/\", \"_\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"[\", \"\")\n    i = i.replace(\"(\", \"\")\n    i = i.replace(\")\", \"\")\n    i = i.replace(\" \", \"\")\n    i = i.replace(\"$\", \"\")\n\n    return i",
  "label": 0,
  "code_tokens": "def FormatDescriptorToPython ( i ) : i = i . replace ( \"/\" , \"_\" ) i = i . replace ( \";\" , \"\" ) i = i . replace ( \"[\" , \"\" ) i = i . replace ( \"(\" , \"\" ) i = i . replace ( \")\" , \"\" ) i = i . replace ( \" \" , \"\" ) i = i . replace ( \"$\" , \"\" ) return i",
  "docstring_tokens": "Format a descriptor into a form which can be used as a python attribute"
 },
 {
  "idx": "webquery-test-920",
  "doc": "how to transform an object to integer in python",
  "code": "def data_format_value(self):\n        \"\"\"\n        :return: The data type of the data component as integer value.\n        \"\"\"\n        try:\n            if self._part:\n                value = self._part.data_format\n            else:\n                value = self._buffer.pixel_format\n        except InvalidParameterException:\n            value = self._node_map.PixelFormat.value\n        return value",
  "label": 0,
  "code_tokens": "def data_format_value ( self ) : try : if self . _part : value = self . _part . data_format else : value = self . _buffer . pixel_format except InvalidParameterException : value = self . _node_map . PixelFormat . value return value",
  "docstring_tokens": ": return : The data type of the data component as integer value ."
 },
 {
  "idx": "webquery-test-921",
  "doc": "python insert byte into byte array",
  "code": "def bytes_to_bits(bytes_):\n    \"\"\"Convert bytes to a list of bits\n    \"\"\"\n    res = []\n    for x in bytes_:\n        if not isinstance(x, int):\n            x = ord(x)\n        res += byte_to_bits(x)\n    return res",
  "label": 0,
  "code_tokens": "def bytes_to_bits ( bytes_ ) : res = [ ] for x in bytes_ : if not isinstance ( x , int ) : x = ord ( x ) res += byte_to_bits ( x ) return res",
  "docstring_tokens": "Convert bytes to a list of bits"
 },
 {
  "idx": "webquery-test-922",
  "doc": "python insert byte into byte array",
  "code": "def u16le_list_to_byte_list(data):\n    \"\"\"! @brief Convert a halfword array into a byte array\"\"\"\n    byteData = []\n    for h in data:\n        byteData.extend([h & 0xff, (h >> 8) & 0xff])\n    return byteData",
  "label": 0,
  "code_tokens": "def u16le_list_to_byte_list ( data ) : byteData = [ ] for h in data : byteData . extend ( [ h & 0xff , ( h >> 8 ) & 0xff ] ) return byteData",
  "docstring_tokens": "!"
 },
 {
  "idx": "webquery-test-923",
  "doc": "python envirment env dict",
  "code": "def exec_function(ast, globals_map):\n    \"\"\"Execute a python code object in the given environment.\n\n    Args:\n      globals_map: Dictionary to use as the globals context.\n    Returns:\n      locals_map: Dictionary of locals from the environment after execution.\n    \"\"\"\n    locals_map = globals_map\n    exec ast in globals_map, locals_map\n    return locals_map",
  "label": 0,
  "code_tokens": "def exec_function ( ast , globals_map ) : locals_map = globals_map exec ast in globals_map , locals_map return locals_map",
  "docstring_tokens": "Execute a python code object in the given environment ."
 },
 {
  "idx": "webquery-test-924",
  "doc": "python envirment env dict",
  "code": "def _get_env():\n    \"\"\"Extracts the environment PYTHONPATH and appends the current sys.path to\n    those.\"\"\"\n    env = dict(os.environ)\n    env[\"PYTHONPATH\"] = os.pathsep.join(sys.path)\n    return env",
  "label": 1,
  "code_tokens": "def _get_env ( ) : env = dict ( os . environ ) env [ \"PYTHONPATH\" ] = os . pathsep . join ( sys . path ) return env",
  "docstring_tokens": "Extracts the environment PYTHONPATH and appends the current sys . path to those ."
 },
 {
  "idx": "webquery-test-925",
  "doc": "python how to check if a file is in a directory",
  "code": "def isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except os.error:\n        return False\n    return stat.S_ISDIR(st.st_mode)",
  "label": 0,
  "code_tokens": "def isdir ( s ) : try : st = os . stat ( s ) except os . error : return False return stat . S_ISDIR ( st . st_mode )",
  "docstring_tokens": "Return true if the pathname refers to an existing directory ."
 },
 {
  "idx": "webquery-test-926",
  "doc": "python how to check if a file is in a directory",
  "code": "def is_executable(path):\n  \"\"\"Returns whether a path names an existing executable file.\"\"\"\n  return os.path.isfile(path) and os.access(path, os.X_OK)",
  "label": 0,
  "code_tokens": "def is_executable ( path ) : return os . path . isfile ( path ) and os . access ( path , os . X_OK )",
  "docstring_tokens": "Returns whether a path names an existing executable file ."
 },
 {
  "idx": "webquery-test-927",
  "doc": "print particular lines in csv using python",
  "code": "def csvpretty(csvfile: csvfile=sys.stdin):\n    \"\"\" Pretty print a CSV file. \"\"\"\n    shellish.tabulate(csv.reader(csvfile))",
  "label": 1,
  "code_tokens": "def csvpretty ( csvfile : csvfile = sys . stdin ) : shellish . tabulate ( csv . reader ( csvfile ) )",
  "docstring_tokens": "Pretty print a CSV file ."
 },
 {
  "idx": "webquery-test-928",
  "doc": "print particular lines in csv using python",
  "code": "def tsv_escape(x: Any) -> str:\n    \"\"\"\n    Escape data for tab-separated value (TSV) format.\n    \"\"\"\n    if x is None:\n        return \"\"\n    x = str(x)\n    return x.replace(\"\\t\", \"\\\\t\").replace(\"\\n\", \"\\\\n\")",
  "label": 0,
  "code_tokens": "def tsv_escape ( x : Any ) -> str : if x is None : return \"\" x = str ( x ) return x . replace ( \"\\t\" , \"\\\\t\" ) . replace ( \"\\n\" , \"\\\\n\" )",
  "docstring_tokens": "Escape data for tab - separated value ( TSV ) format ."
 },
 {
  "idx": "webquery-test-929",
  "doc": "python 3d array reflection",
  "code": "def recarray(self):\n        \"\"\"Returns data as :class:`numpy.recarray`.\"\"\"\n        return numpy.rec.fromrecords(self.records, names=self.names)",
  "label": 0,
  "code_tokens": "def recarray ( self ) : return numpy . rec . fromrecords ( self . records , names = self . names )",
  "docstring_tokens": "Returns data as : class : numpy . recarray ."
 },
 {
  "idx": "webquery-test-930",
  "doc": "python 3d array reflection",
  "code": "def dump_nparray(self, obj, class_name=numpy_ndarray_class_name):\n        \"\"\"\n        ``numpy.ndarray`` dumper.\n        \"\"\"\n        return {\"$\" + class_name: self._json_convert(obj.tolist())}",
  "label": 0,
  "code_tokens": "def dump_nparray ( self , obj , class_name = numpy_ndarray_class_name ) : return { \"$\" + class_name : self . _json_convert ( obj . tolist ( ) ) }",
  "docstring_tokens": "numpy . ndarray dumper ."
 },
 {
  "idx": "webquery-test-931",
  "doc": "how to skip a line starting with # while reading a file line by line in python",
  "code": "def iter_lines(file_like: Iterable[str]) -> Generator[str, None, None]:\n    \"\"\" Helper for iterating only nonempty lines without line breaks\"\"\"\n    for line in file_like:\n        line = line.rstrip('\\r\\n')\n        if line:\n            yield line",
  "label": 0,
  "code_tokens": "def iter_lines ( file_like : Iterable [ str ] ) -> Generator [ str , None , None ] : for line in file_like : line = line . rstrip ( '\\r\\n' ) if line : yield line",
  "docstring_tokens": "Helper for iterating only nonempty lines without line breaks"
 },
 {
  "idx": "webquery-test-932",
  "doc": "how to skip a line starting with # while reading a file line by line in python",
  "code": "def file_lines(bblfile:str) -> iter:\n    \"\"\"Yield lines found in given file\"\"\"\n    with open(bblfile) as fd:\n        yield from (line.rstrip() for line in fd if line.rstrip())",
  "label": 0,
  "code_tokens": "def file_lines ( bblfile : str ) -> iter : with open ( bblfile ) as fd : yield from ( line . rstrip ( ) for line in fd if line . rstrip ( ) )",
  "docstring_tokens": "Yield lines found in given file"
 },
 {
  "idx": "webquery-test-933",
  "doc": "python how to ensure a file is a text file",
  "code": "def is_readable(filename):\n    \"\"\"Check if file is a regular file and is readable.\"\"\"\n    return os.path.isfile(filename) and os.access(filename, os.R_OK)",
  "label": 1,
  "code_tokens": "def is_readable ( filename ) : return os . path . isfile ( filename ) and os . access ( filename , os . R_OK )",
  "docstring_tokens": "Check if file is a regular file and is readable ."
 },
 {
  "idx": "webquery-test-934",
  "doc": "python how to ensure a file is a text file",
  "code": "def read_file(path):\n    \"\"\"\n    Read file to string.\n\n    Arguments:\n        path (str): Source.\n    \"\"\"\n    with open(must_exist(path)) as infile:\n        r = infile.read()\n    return r",
  "label": 0,
  "code_tokens": "def read_file ( path ) : with open ( must_exist ( path ) ) as infile : r = infile . read ( ) return r",
  "docstring_tokens": "Read file to string ."
 },
 {
  "idx": "webquery-test-935",
  "doc": "function to check valid number in python",
  "code": "def validate_non_negative_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val < 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a non negative integer\" % (option,))\n    return val",
  "label": 1,
  "code_tokens": "def validate_non_negative_integer ( option , value ) : val = validate_integer ( option , value ) if val < 0 : raise ValueError ( \"The value of %s must be \" \"a non negative integer\" % ( option , ) ) return val",
  "docstring_tokens": "Validate that value is a positive integer or 0 ."
 },
 {
  "idx": "webquery-test-936",
  "doc": "function to check valid number in python",
  "code": "def validate_positive_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer, which does not include 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val <= 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a positive integer\" % (option,))\n    return val",
  "label": 1,
  "code_tokens": "def validate_positive_integer ( option , value ) : val = validate_integer ( option , value ) if val <= 0 : raise ValueError ( \"The value of %s must be \" \"a positive integer\" % ( option , ) ) return val",
  "docstring_tokens": "Validate that value is a positive integer which does not include 0 ."
 },
 {
  "idx": "webquery-test-937",
  "doc": "close all sockets python",
  "code": "def close(self):\n        \"\"\"Close the connection.\"\"\"\n        if self.sock:\n            self.sock.close()\n        self.sock = 0\n        self.eof = 1",
  "label": 1,
  "code_tokens": "def close ( self ) : if self . sock : self . sock . close ( ) self . sock = 0 self . eof = 1",
  "docstring_tokens": "Close the connection ."
 },
 {
  "idx": "webquery-test-938",
  "doc": "close all sockets python",
  "code": "def connected_socket(address, timeout=3):\n    \"\"\" yields a connected socket \"\"\"\n    sock = socket.create_connection(address, timeout)\n    yield sock\n    sock.close()",
  "label": 0,
  "code_tokens": "def connected_socket ( address , timeout = 3 ) : sock = socket . create_connection ( address , timeout ) yield sock sock . close ( )",
  "docstring_tokens": "yields a connected socket"
 },
 {
  "idx": "webquery-test-939",
  "doc": "python strings remove characters that are not numeric",
  "code": "def _remove_invalid_char(s):\n    \"\"\"Remove invalid and dangerous characters from a string.\"\"\"\n\n    s = ''.join([i if ord(i) >= 32 and ord(i) < 127 else '' for i in s])\n    s = s.translate(dict.fromkeys(map(ord, \"_%~#\\\\{}\\\":\")))\n    return s",
  "label": 0,
  "code_tokens": "def _remove_invalid_char ( s ) : s = '' . join ( [ i if ord ( i ) >= 32 and ord ( i ) < 127 else '' for i in s ] ) s = s . translate ( dict . fromkeys ( map ( ord , \"_%~#\\\\{}\\\":\" ) ) ) return s",
  "docstring_tokens": "Remove invalid and dangerous characters from a string ."
 },
 {
  "idx": "webquery-test-940",
  "doc": "python strings remove characters that are not numeric",
  "code": "def clean_text(text):\n    \"\"\"Clean text before parsing.\"\"\"\n    # Replace a few nasty unicode characters with their ASCII equivalent\n    maps = {u'\u00d7': u'x', u'\u2013': u'-', u'\u2212': '-'}\n    for element in maps:\n        text = text.replace(element, maps[element])\n\n    # Replace genitives\n    text = re.sub(r'(?<=\\w)\\'s\\b|(?<=\\w)s\\'(?!\\w)', '  ', text)\n\n    logging.debug(u'Clean text: \"%s\"', text)\n\n    return text",
  "label": 0,
  "code_tokens": "def clean_text ( text ) : # Replace a few nasty unicode characters with their ASCII equivalent maps = { u'\u00d7':   'x',   '\u2013': u ' ', u ' ': '-' }   for element in maps : text = text . replace ( element , maps [ element ] ) # Replace genitives text = re . sub ( r'(?<=\\w)\\'s\\b|(?<=\\w)s\\'(?!\\w)' , '  ' , text ) logging . debug ( u'Clean text: \"%s\"' , text ) return text",
  "docstring_tokens": "Clean text before parsing ."
 },
 {
  "idx": "webquery-test-941",
  "doc": "how to trim spaces in python regex",
  "code": "def detokenize(s):\n    \"\"\" Detokenize a string by removing spaces before punctuation.\"\"\"\n    print(s)\n    s = re.sub(\"\\s+([;:,\\.\\?!])\", \"\\\\1\", s)\n    s = re.sub(\"\\s+(n't)\", \"\\\\1\", s)\n    return s",
  "label": 1,
  "code_tokens": "def detokenize ( s ) : print ( s ) s = re . sub ( \"\\s+([;:,\\.\\?!])\" , \"\\\\1\" , s ) s = re . sub ( \"\\s+(n't)\" , \"\\\\1\" , s ) return s",
  "docstring_tokens": "Detokenize a string by removing spaces before punctuation ."
 },
 {
  "idx": "webquery-test-942",
  "doc": "how to trim spaces in python regex",
  "code": "def strip_spaces(s):\n    \"\"\" Strip excess spaces from a string \"\"\"\n    return u\" \".join([c for c in s.split(u' ') if c])",
  "label": 0,
  "code_tokens": "def strip_spaces ( s ) : return u\" \" . join ( [ c for c in s . split ( u' ' ) if c ] )",
  "docstring_tokens": "Strip excess spaces from a string"
 },
 {
  "idx": "webquery-test-943",
  "doc": "python terminate a pool",
  "code": "def blocking(func, *args, **kwargs):\n    \"\"\"Run a function that uses blocking IO.\n\n    The function is run in the IO thread pool.\n    \"\"\"\n    pool = get_io_pool()\n    fut = pool.submit(func, *args, **kwargs)\n    return fut.result()",
  "label": 0,
  "code_tokens": "def blocking ( func , * args , * * kwargs ) : pool = get_io_pool ( ) fut = pool . submit ( func , * args , * * kwargs ) return fut . result ( )",
  "docstring_tokens": "Run a function that uses blocking IO ."
 },
 {
  "idx": "webquery-test-944",
  "doc": "python terminate a pool",
  "code": "def _ReturnConnection(self):\n\t\t\"\"\"\n\t\tReturns a connection back to the pool\n\t\t\n\t\t@author: Nick Verbeck\n\t\t@since: 9/7/2008\n\t\t\"\"\"\n\t\tif self.conn is not None:\n\t\t\tif self.connInfo.commitOnEnd is True or self.commitOnEnd is True:\n\t\t\t\tself.conn.Commit()\n\t\t\t\t\t\n\t\t\tPool().returnConnection(self.conn)\n\t\t\tself.conn = None",
  "label": 1,
  "code_tokens": "def _ReturnConnection ( self ) : if self . conn is not None : if self . connInfo . commitOnEnd is True or self . commitOnEnd is True : self . conn . Commit ( ) Pool ( ) . returnConnection ( self . conn ) self . conn = None",
  "docstring_tokens": "Returns a connection back to the pool"
 },
 {
  "idx": "webquery-test-945",
  "doc": "lower case to upper care the entire list in python",
  "code": "def format(self):\n        \"\"\"\n        Return a well formatted list. Basicaly, it's sort a list and remove duplicate.\n\n        :return: A sorted, without duplicate, list.\n        :rtype: list\n        \"\"\"\n\n        try:\n            return sorted(list(set(self.main_list)), key=str.lower)\n\n        except TypeError:  # pragma: no cover\n            return self.main_list",
  "label": 1,
  "code_tokens": "def format ( self ) : try : return sorted ( list ( set ( self . main_list ) ) , key = str . lower ) except TypeError : # pragma: no cover return self . main_list",
  "docstring_tokens": "Return a well formatted list . Basicaly it s sort a list and remove duplicate ."
 },
 {
  "idx": "webquery-test-946",
  "doc": "lower case to upper care the entire list in python",
  "code": "def natural_sort(list_to_sort: Iterable[str]) -> List[str]:\n    \"\"\"\n    Sorts a list of strings case insensitively as well as numerically.\n\n    For example: ['a1', 'A2', 'a3', 'A11', 'a22']\n\n    To sort a list in place, don't call this method, which makes a copy. Instead, do this:\n\n    my_list.sort(key=natural_keys)\n\n    :param list_to_sort: the list being sorted\n    :return: the list sorted naturally\n    \"\"\"\n    return sorted(list_to_sort, key=natural_keys)",
  "label": 0,
  "code_tokens": "def natural_sort ( list_to_sort : Iterable [ str ] ) -> List [ str ] : return sorted ( list_to_sort , key = natural_keys )",
  "docstring_tokens": "Sorts a list of strings case insensitively as well as numerically ."
 },
 {
  "idx": "webquery-test-947",
  "doc": "python math to slice an integer",
  "code": "def getbyteslice(self, start, end):\n        \"\"\"Direct access to byte data.\"\"\"\n        c = self._rawarray[start:end]\n        return c",
  "label": 0,
  "code_tokens": "def getbyteslice ( self , start , end ) : c = self . _rawarray [ start : end ] return c",
  "docstring_tokens": "Direct access to byte data ."
 },
 {
  "idx": "webquery-test-948",
  "doc": "python math to slice an integer",
  "code": "def _fix_index(self, index):\n        \"\"\"\n        :param slice index:\n        \"\"\"\n        stop, start = index.stop, index.start\n        if start is None:\n            start = 0\n        if stop is None:\n            stop = len(self)\n        return start, stop",
  "label": 0,
  "code_tokens": "def _fix_index ( self , index ) : stop , start = index . stop , index . start if start is None : start = 0 if stop is None : stop = len ( self ) return start , stop",
  "docstring_tokens": ": param slice index :"
 },
 {
  "idx": "webquery-test-949",
  "doc": "ahow to plot different colors in boxplot in python",
  "code": "def plot_target(target, ax):\n    \"\"\"Ajoute la target au plot\"\"\"\n    ax.scatter(target[0], target[1], target[2], c=\"red\", s=80)",
  "label": 0,
  "code_tokens": "def plot_target ( target , ax ) : ax . scatter ( target [ 0 ] , target [ 1 ] , target [ 2 ] , c = \"red\" , s = 80 )",
  "docstring_tokens": "Ajoute la target au plot"
 },
 {
  "idx": "webquery-test-950",
  "doc": "ahow to plot different colors in boxplot in python",
  "code": "def color_text_boxes(ax, labels, colors, color_arrow=True):\n    \"\"\"Color text boxes.\n\n    Instead of this function, one can pass annotate_kwargs and plot_kwargs to\n    plot_line_ids function.\n    \"\"\"\n    assert len(labels) == len(colors), \\\n        \"Equal no. of colors and lables must be given\"\n    boxes = ax.findobj(mpl.text.Annotation)\n    box_labels = lineid_plot.unique_labels(labels)\n    for box in boxes:\n        l = box.get_label()\n        try:\n            loc = box_labels.index(l)\n        except ValueError:\n            continue  # No changes for this box\n        box.set_color(colors[loc])\n        if color_arrow:\n            box.arrow_patch.set_color(colors[loc])\n\n    ax.figure.canvas.draw()",
  "label": 1,
  "code_tokens": "def color_text_boxes ( ax , labels , colors , color_arrow = True ) : assert len ( labels ) == len ( colors ) , \"Equal no. of colors and lables must be given\" boxes = ax . findobj ( mpl . text . Annotation ) box_labels = lineid_plot . unique_labels ( labels ) for box in boxes : l = box . get_label ( ) try : loc = box_labels . index ( l ) except ValueError : continue # No changes for this box box . set_color ( colors [ loc ] ) if color_arrow : box . arrow_patch . set_color ( colors [ loc ] ) ax . figure . canvas . draw ( )",
  "docstring_tokens": "Color text boxes ."
 },
 {
  "idx": "webquery-test-951",
  "doc": "python str time day of month no leading zero",
  "code": "def get_month_start(day=None):\n    \"\"\"Returns the first day of the given month.\"\"\"\n    day = add_timezone(day or datetime.date.today())\n    return day.replace(day=1)",
  "label": 0,
  "code_tokens": "def get_month_start ( day = None ) : day = add_timezone ( day or datetime . date . today ( ) ) return day . replace ( day = 1 )",
  "docstring_tokens": "Returns the first day of the given month ."
 },
 {
  "idx": "webquery-test-952",
  "doc": "python str time day of month no leading zero",
  "code": "def last_midnight():\n    \"\"\"\n    return a datetime of last mid-night\n    \"\"\"\n    now = datetime.now()\n    return datetime(now.year, now.month, now.day)",
  "label": 0,
  "code_tokens": "def last_midnight ( ) : now = datetime . now ( ) return datetime ( now . year , now . month , now . day )",
  "docstring_tokens": "return a datetime of last mid - night"
 },
 {
  "idx": "webquery-test-953",
  "doc": "copy special rows of matrix in python",
  "code": "def extract(self):\n        \"\"\"\n        Creates a copy of this tabarray in the form of a numpy ndarray.\n\n        Useful if you want to do math on array elements, e.g. if you have a \n        subset of the columns that are all numerical, you can construct a \n        numerical matrix and do matrix operations.\n\n        \"\"\"\n        return np.vstack([self[r] for r in self.dtype.names]).T.squeeze()",
  "label": 0,
  "code_tokens": "def extract ( self ) : return np . vstack ( [ self [ r ] for r in self . dtype . names ] ) . T . squeeze ( )",
  "docstring_tokens": "Creates a copy of this tabarray in the form of a numpy ndarray ."
 },
 {
  "idx": "webquery-test-954",
  "doc": "copy special rows of matrix in python",
  "code": "def lengths( self ):\n        \"\"\"\n        The cell lengths.\n\n        Args:\n            None\n\n        Returns:\n            (np.array(a,b,c)): The cell lengths.\n        \"\"\"\n        return( np.array( [ math.sqrt( sum( row**2 ) ) for row in self.matrix ] ) )",
  "label": 0,
  "code_tokens": "def lengths ( self ) : return ( np . array ( [ math . sqrt ( sum ( row ** 2 ) ) for row in self . matrix ] ) )",
  "docstring_tokens": "The cell lengths ."
 },
 {
  "idx": "webquery-test-955",
  "doc": "command prompt input python",
  "code": "def _stdin_(p):\n    \"\"\"Takes input from user. Works for Python 2 and 3.\"\"\"\n    _v = sys.version[0]\n    return input(p) if _v is '3' else raw_input(p)",
  "label": 1,
  "code_tokens": "def _stdin_ ( p ) : _v = sys . version [ 0 ] return input ( p ) if _v is '3' else raw_input ( p )",
  "docstring_tokens": "Takes input from user . Works for Python 2 and 3 ."
 },
 {
  "idx": "webquery-test-956",
  "doc": "command prompt input python",
  "code": "def read_stdin():\n    \"\"\" Read text from stdin, and print a helpful message for ttys. \"\"\"\n    if sys.stdin.isatty() and sys.stdout.isatty():\n        print('\\nReading from stdin until end of file (Ctrl + D)...')\n\n    return sys.stdin.read()",
  "label": 0,
  "code_tokens": "def read_stdin ( ) : if sys . stdin . isatty ( ) and sys . stdout . isatty ( ) : print ( '\\nReading from stdin until end of file (Ctrl + D)...' ) return sys . stdin . read ( )",
  "docstring_tokens": "Read text from stdin and print a helpful message for ttys ."
 },
 {
  "idx": "webquery-test-957",
  "doc": "average of a range random python",
  "code": "def _gauss(mean: int, sigma: int) -> int:\n        \"\"\"\n        Creates a variation from a base value\n\n        Args:\n            mean: base value\n            sigma: gaussian sigma\n\n        Returns: random value\n\n        \"\"\"\n        return int(random.gauss(mean, sigma))",
  "label": 0,
  "code_tokens": "def _gauss ( mean : int , sigma : int ) -> int : return int ( random . gauss ( mean , sigma ) )",
  "docstring_tokens": "Creates a variation from a base value"
 },
 {
  "idx": "webquery-test-958",
  "doc": "average of a range random python",
  "code": "def frange(start, stop, step, precision):\n    \"\"\"A generator that will generate a range of floats.\"\"\"\n    value = start\n    while round(value, precision) < stop:\n        yield round(value, precision)\n        value += step",
  "label": 0,
  "code_tokens": "def frange ( start , stop , step , precision ) : value = start while round ( value , precision ) < stop : yield round ( value , precision ) value += step",
  "docstring_tokens": "A generator that will generate a range of floats ."
 },
 {
  "idx": "webquery-test-959",
  "doc": "how to downcase every alternate character in a string in python",
  "code": "def to_pascal_case(s):\r    \"\"\"Transform underscore separated string to pascal case\r\r    \"\"\"\r    return re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), s.capitalize())",
  "label": 0,
  "code_tokens": "def to_pascal_case ( s ) : return re . sub ( r'(?!^)_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , s . capitalize ( ) )",
  "docstring_tokens": "Transform underscore separated string to pascal case"
 },
 {
  "idx": "webquery-test-960",
  "doc": "how to downcase every alternate character in a string in python",
  "code": "def to_snake_case(name):\r    \"\"\" Given a name in camelCase return in snake_case \"\"\"\r    s1 = FIRST_CAP_REGEX.sub(r'\\1_\\2', name)\r    return ALL_CAP_REGEX.sub(r'\\1_\\2', s1).lower()",
  "label": 0,
  "code_tokens": "def to_snake_case ( name ) : s1 = FIRST_CAP_REGEX . sub ( r'\\1_\\2' , name ) return ALL_CAP_REGEX . sub ( r'\\1_\\2' , s1 ) . lower ( )",
  "docstring_tokens": "Given a name in camelCase return in snake_case"
 },
 {
  "idx": "webquery-test-961",
  "doc": "python check viarable type",
  "code": "def is_integer(obj):\r    \"\"\"Is this an integer.\r\r    :param object obj:\r    :return:\r    \"\"\"\r    if PYTHON3:\r        return isinstance(obj, int)\r    return isinstance(obj, (int, long))",
  "label": 0,
  "code_tokens": "def is_integer ( obj ) : if PYTHON3 : return isinstance ( obj , int ) return isinstance ( obj , ( int , long ) )",
  "docstring_tokens": "Is this an integer ."
 },
 {
  "idx": "webquery-test-962",
  "doc": "python check viarable type",
  "code": "def isreal(obj):\r    \"\"\"\r    Test if the argument is a real number (float or integer).\r\r    :param obj: Object\r    :type  obj: any\r\r    :rtype: boolean\r    \"\"\"\r    return (\r        (obj is not None)\r        and (not isinstance(obj, bool))\r        and isinstance(obj, (int, float))\r    )",
  "label": 1,
  "code_tokens": "def isreal ( obj ) : return ( ( obj is not None ) and ( not isinstance ( obj , bool ) ) and isinstance ( obj , ( int , float ) ) )",
  "docstring_tokens": "Test if the argument is a real number ( float or integer ) ."
 },
 {
  "idx": "webquery-test-963",
  "doc": "python sort second item in a list of tuples",
  "code": "def pairwise(iterable):\r    \"\"\"From itertools cookbook. [a, b, c, ...] -> (a, b), (b, c), ...\"\"\"\r    first, second = tee(iterable)\r    next(second, None)\r    return zip(first, second)",
  "label": 0,
  "code_tokens": "def pairwise ( iterable ) : first , second = tee ( iterable ) next ( second , None ) return zip ( first , second )",
  "docstring_tokens": "From itertools cookbook . [ a b c ... ] - > ( a b ) ( b c ) ..."
 },
 {
  "idx": "webquery-test-964",
  "doc": "python sort second item in a list of tuples",
  "code": "def as_tuple(self, value):\r        \"\"\"Utility function which converts lists to tuples.\"\"\"\r        if isinstance(value, list):\r            value = tuple(value)\r        return value",
  "label": 0,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-965",
  "doc": "python add parser as subparser",
  "code": "def sub(name, func,**kwarg):\r    \"\"\" Add subparser\r\r    \"\"\"\r    sp = subparsers.add_parser(name, **kwarg)\r    sp.set_defaults(func=func)\r    sp.arg = sp.add_argument\r    return sp",
  "label": 1,
  "code_tokens": "def sub ( name , func , * * kwarg ) : sp = subparsers . add_parser ( name , * * kwarg ) sp . set_defaults ( func = func ) sp . arg = sp . add_argument return sp",
  "docstring_tokens": "Add subparser"
 },
 {
  "idx": "webquery-test-966",
  "doc": "python add parser as subparser",
  "code": "def addSubparser(subparsers, subcommand, description):\r    \"\"\"\r    Add a subparser with subcommand to the subparsers object\r    \"\"\"\r    parser = subparsers.add_parser(\r        subcommand, description=description, help=description)\r    return parser",
  "label": 1,
  "code_tokens": "def addSubparser ( subparsers , subcommand , description ) : parser = subparsers . add_parser ( subcommand , description = description , help = description ) return parser",
  "docstring_tokens": "Add a subparser with subcommand to the subparsers object"
 },
 {
  "idx": "webquery-test-967",
  "doc": "unsplit a splitted sentence in python",
  "code": "def pause_splitter(s):\r    \"\"\"\"\"\"\r\r    s = s.strip()\r    s = re.sub('([:;]|--+)', '\\g<1>\\n', s)\r    s = s.split('\\n')\r    s = [sent for sents in s for sent in sent_splitter.tokenize(sents)]\r    return s",
  "label": 1,
  "code_tokens": "def pause_splitter ( s ) : s = s . strip ( ) s = re . sub ( '([:;]|--+)' , '\\g<1>\\n' , s ) s = s . split ( '\\n' ) s = [ sent for sents in s for sent in sent_splitter . tokenize ( sents ) ] return s",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-968",
  "doc": "unsplit a splitted sentence in python",
  "code": "def split_into_sentences(s):\r  \"\"\"Split text into list of sentences.\"\"\"\r  s = re.sub(r\"\\s+\", \" \", s)\r  s = re.sub(r\"[\\\\.\\\\?\\\\!]\", \"\\n\", s)\r  return s.split(\"\\n\")",
  "label": 0,
  "code_tokens": "def split_into_sentences ( s ) : s = re . sub ( r\"\\s+\" , \" \" , s ) s = re . sub ( r\"[\\\\.\\\\?\\\\!]\" , \"\\n\" , s ) return s . split ( \"\\n\" )",
  "docstring_tokens": "Split text into list of sentences ."
 },
 {
  "idx": "webquery-test-969",
  "doc": "smooth plot in in python",
  "code": "def smooth_array(array, amount=1):\r    \"\"\"\r\r    Returns the nearest-neighbor (+/- amount) smoothed array.\r    This does not modify the array or slice off the funny end points.\r\r    \"\"\"\r    if amount==0: return array\r\r    # we have to store the old values in a temp array to keep the\r    # smoothing from affecting the smoothing\r    new_array = _n.array(array)\r\r    for n in range(len(array)):\r        new_array[n] = smooth(array, n, amount)\r\r    return new_array",
  "label": 0,
  "code_tokens": "def smooth_array ( array , amount = 1 ) : if amount == 0 : return array # we have to store the old values in a temp array to keep the # smoothing from affecting the smoothing new_array = _n . array ( array ) for n in range ( len ( array ) ) : new_array [ n ] = smooth ( array , n , amount ) return new_array",
  "docstring_tokens": ""
 },
 {
  "idx": "webquery-test-970",
  "doc": "smooth plot in in python",
  "code": "def smooth(polylines):\r    \"\"\"\r    smooth every polyline using spline interpolation\r    \"\"\"\r    for c in polylines:\r        if len(c) < 9:\r            # smoothing wouldn't make sense here\r            continue\r        x = c[:, 0]\r        y = c[:, 1]\r\r        t = np.arange(x.shape[0], dtype=float)\r        t /= t[-1]\r        x = UnivariateSpline(t, x)(t)\r        y = UnivariateSpline(t, y)(t)\r        c[:, 0] = x\r        c[:, 1] = y",
  "label": 1,
  "code_tokens": "def smooth ( polylines ) : for c in polylines : if len ( c ) < 9 : # smoothing wouldn't make sense here continue x = c [ : , 0 ] y = c [ : , 1 ] t = np . arange ( x . shape [ 0 ] , dtype = float ) t /= t [ - 1 ] x = UnivariateSpline ( t , x ) ( t ) y = UnivariateSpline ( t , y ) ( t ) c [ : , 0 ] = x c [ : , 1 ] = y",
  "docstring_tokens": "smooth every polyline using spline interpolation"
 },
 {
  "idx": "webquery-test-971",
  "doc": "python slice array to sub array",
  "code": "def A(*a):\r    \"\"\"convert iterable object into numpy array\"\"\"\r    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
  "label": 1,
  "code_tokens": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]",
  "docstring_tokens": "convert iterable object into numpy array"
 },
 {
  "idx": "webquery-test-972",
  "doc": "python slice array to sub array",
  "code": "def torecarray(*args, **kwargs):\r    \"\"\"\r    Convenient shorthand for ``toarray(*args, **kwargs).view(np.recarray)``.\r\r    \"\"\"\r\r    import numpy as np\r    return toarray(*args, **kwargs).view(np.recarray)",
  "label": 0,
  "code_tokens": "def torecarray ( * args , * * kwargs ) : import numpy as np return toarray ( * args , * * kwargs ) . view ( np . recarray )",
  "docstring_tokens": "Convenient shorthand for toarray ( * args ** kwargs ) . view ( np . recarray ) ."
 },
 {
  "idx": "webquery-test-973",
  "doc": "how to run multiple python scripts",
  "code": "def load_files(files):\r    \"\"\"Load and execute a python file.\"\"\"\r\r    for py_file in files:\r        LOG.debug(\"exec %s\", py_file)\r        execfile(py_file, globals(), locals())",
  "label": 1,
  "code_tokens": "def load_files ( files ) : for py_file in files : LOG . debug ( \"exec %s\" , py_file ) execfile ( py_file , globals ( ) , locals ( ) )",
  "docstring_tokens": "Load and execute a python file ."
 },
 {
  "idx": "webquery-test-974",
  "doc": "how to run multiple python scripts",
  "code": "def stub_main():\r    \"\"\"setuptools blah: it still can't run a module as a script entry_point\"\"\"\r    from google.apputils import run_script_module\r    import butcher.main\r    run_script_module.RunScriptModule(butcher.main)",
  "label": 0,
  "code_tokens": "def stub_main ( ) : from google . apputils import run_script_module import butcher . main run_script_module . RunScriptModule ( butcher . main )",
  "docstring_tokens": "setuptools blah : it still can t run a module as a script entry_point"
 },
 {
  "idx": "webquery-test-975",
  "doc": "python switch test if variable exists",
  "code": "def has_attribute(module_name, attribute_name):\r    \"\"\"Is this attribute present?\"\"\"\r    init_file = '%s/__init__.py' % module_name\r    return any(\r        [attribute_name in init_line for init_line in open(init_file).readlines()]\r    )",
  "label": 0,
  "code_tokens": "def has_attribute ( module_name , attribute_name ) : init_file = '%s/__init__.py' % module_name return any ( [ attribute_name in init_line for init_line in open ( init_file ) . readlines ( ) ] )",
  "docstring_tokens": "Is this attribute present?"
 },
 {
  "idx": "webquery-test-976",
  "doc": "python switch test if variable exists",
  "code": "def column_exists(cr, table, column):\r    \"\"\" Check whether a certain column exists \"\"\"\r    cr.execute(\r        'SELECT count(attname) FROM pg_attribute '\r        'WHERE attrelid = '\r        '( SELECT oid FROM pg_class WHERE relname = %s ) '\r        'AND attname = %s',\r        (table, column))\r    return cr.fetchone()[0] == 1",
  "label": 0,
  "code_tokens": "def column_exists ( cr , table , column ) : cr . execute ( 'SELECT count(attname) FROM pg_attribute ' 'WHERE attrelid = ' '( SELECT oid FROM pg_class WHERE relname = %s ) ' 'AND attname = %s' , ( table , column ) ) return cr . fetchone ( ) [ 0 ] == 1",
  "docstring_tokens": "Check whether a certain column exists"
 },
 {
  "idx": "webquery-test-977",
  "doc": "prompt the user for a username and a password in a function in python",
  "code": "def get_auth():\r    \"\"\"Get authentication.\"\"\"\r    import getpass\r    user = input(\"User Name: \")  # noqa\r    pswd = getpass.getpass('Password: ')\r    return Github(user, pswd)",
  "label": 0,
  "code_tokens": "def get_auth ( ) : import getpass user = input ( \"User Name: \" ) # noqa pswd = getpass . getpass ( 'Password: ' ) return Github ( user , pswd )",
  "docstring_tokens": "Get authentication ."
 },
 {
  "idx": "webquery-test-978",
  "doc": "prompt the user for a username and a password in a function in python",
  "code": "def authenticate_user(scope, user=[None], password=[None]):\r    \"\"\"\r    Like authenticate(), but logs in using the given user and password.\r    If a user and password are not given, the function uses the same\r    user and password that were used at the last login attempt; it is\r    an error if no such attempt was made before.\r\r    :type  user: string\r    :param user: A username.\r    :type  password: string\r    :param password: A password.\r    \"\"\"\r    conn = scope.get('__connection__')\r    user = user[0]\r    if user is None:\r        conn.app_authenticate()\r    else:\r        account = Account(user, password[0])\r        conn.app_authenticate(account)\r    return True",
  "label": 1,
  "code_tokens": "def authenticate_user ( scope , user = [ None ] , password = [ None ] ) : conn = scope . get ( '__connection__' ) user = user [ 0 ] if user is None : conn . app_authenticate ( ) else : account = Account ( user , password [ 0 ] ) conn . app_authenticate ( account ) return True",
  "docstring_tokens": "Like authenticate () but logs in using the given user and password . If a user and password are not given the function uses the same user and password that were used at the last login attempt ; it is an error if no such attempt was made before ."
 },
 {
  "idx": "webquery-test-979",
  "doc": "python script how to exit",
  "code": "def _quit(self, *args):\r        \"\"\" quit crash \"\"\"\r        self.logger.warn('Bye!')\r        sys.exit(self.exit())",
  "label": 1,
  "code_tokens": "def _quit ( self , * args ) : self . logger . warn ( 'Bye!' ) sys . exit ( self . exit ( ) )",
  "docstring_tokens": "quit crash"
 },
 {
  "idx": "webquery-test-980",
  "doc": "python script how to exit",
  "code": "def exit(exit_code=0):\r  r\"\"\"A function to support exiting from exit hooks.\r\r  Could also be used to exit from the calling scripts in a thread safe manner.\r  \"\"\"\r  core.processExitHooks()\r\r  if state.isExitHooked and not hasattr(sys, 'exitfunc'): # The function is called from the exit hook\r    sys.stderr.flush()\r    sys.stdout.flush()\r    os._exit(exit_code) #pylint: disable=W0212\r\r  sys.exit(exit_code)",
  "label": 1,
  "code_tokens": "def exit ( exit_code = 0 ) : core . processExitHooks ( ) if state . isExitHooked and not hasattr ( sys , 'exitfunc' ) : # The function is called from the exit hook sys . stderr . flush ( ) sys . stdout . flush ( ) os . _exit ( exit_code ) #pylint: disable=W0212 sys . exit ( exit_code )",
  "docstring_tokens": "r A function to support exiting from exit hooks ."
 },
 {
  "idx": "webquery-test-981",
  "doc": "iterate through one of the keys in json python",
  "code": "def __iter__(self):\r        \"\"\"class iterator which yields a key/value pair\"\"\"\r        if self._json_dict is None:\r            self.__init()\r        for k,v in self._json_dict.items():\r            yield (k,v)",
  "label": 0,
  "code_tokens": "def __iter__ ( self ) : if self . _json_dict is None : self . __init ( ) for k , v in self . _json_dict . items ( ) : yield ( k , v )",
  "docstring_tokens": "class iterator which yields a key / value pair"
 },
 {
  "idx": "webquery-test-982",
  "doc": "iterate through one of the keys in json python",
  "code": "def iter_items(iterable):\r    \"\"\" Iterate through all items (key-value pairs) within an iterable\r    dictionary-like object. If the object has a `keys` method, this is\r    used along with `__getitem__` to yield each pair in turn. If no\r    `keys` method exists, each iterable element is assumed to be a\r    2-tuple of key and value.\r    \"\"\"\r    if hasattr(iterable, \"keys\"):\r        for key in iterable.keys():\r            yield key, iterable[key]\r    else:\r        for key, value in iterable:\r            yield key, value",
  "label": 1,
  "code_tokens": "def iter_items ( iterable ) : if hasattr ( iterable , \"keys\" ) : for key in iterable . keys ( ) : yield key , iterable [ key ] else : for key , value in iterable : yield key , value",
  "docstring_tokens": "Iterate through all items ( key - value pairs ) within an iterable dictionary - like object . If the object has a keys method this is used along with __getitem__ to yield each pair in turn . If no keys method exists each iterable element is assumed to be a 2 - tuple of key and value ."
 },
 {
  "idx": "webquery-test-983",
  "doc": "how to write float32 in python",
  "code": "def write_double(self, number):\r        \"\"\" Writes a double to the underlying output file as a 8-byte value. \"\"\"\r        buf = pack(self.byte_order + \"d\", number)\r        self.write(buf)",
  "label": 1,
  "code_tokens": "def write_double ( self , number ) : buf = pack ( self . byte_order + \"d\" , number ) self . write ( buf )",
  "docstring_tokens": "Writes a double to the underlying output file as a 8 - byte value ."
 },
 {
  "idx": "webquery-test-984",
  "doc": "how to write float32 in python",
  "code": "def write_float(self, f):\r        \"\"\"\r        Writes a 4 byte float to the stream.\r\r        @param f: 4 byte float\r        @type f: C{float}\r        @raise TypeError: Unexpected type for float C{f}.\r        \"\"\"\r        if type(f) is not float:\r            raise TypeError('expected a float (got:%r)' % (type(f),))\r\r        self.write(struct.pack(\"%sf\" % self.endian, f))",
  "label": 1,
  "code_tokens": "def write_float ( self , f ) : if type ( f ) is not float : raise TypeError ( 'expected a float (got:%r)' % ( type ( f ) , ) ) self . write ( struct . pack ( \"%sf\" % self . endian , f ) )",
  "docstring_tokens": "Writes a 4 byte float to the stream ."
 },
 {
  "idx": "webquery-test-985",
  "doc": "how to call c sharelib function from pythong",
  "code": "def main(ctx, connection):\r    \"\"\"Command line interface for PyBEL.\"\"\"\r    ctx.obj = Manager(connection=connection)\r    ctx.obj.bind()",
  "label": 0,
  "code_tokens": "def main ( ctx , connection ) : ctx . obj = Manager ( connection = connection ) ctx . obj . bind ( )",
  "docstring_tokens": "Command line interface for PyBEL ."
 },
 {
  "idx": "webquery-test-986",
  "doc": "how to call c sharelib function from pythong",
  "code": "def start(self):\r        \"\"\"Start the import thread.\"\"\"\r        self.t = threading.Thread(target=self._run, name=\"ray_import_thread\")\r        # Making the thread a daemon causes it to exit\r        # when the main thread exits.\r        self.t.daemon = True\r        self.t.start()",
  "label": 0,
  "code_tokens": "def start ( self ) : self . t = threading . Thread ( target = self . _run , name = \"ray_import_thread\" ) # Making the thread a daemon causes it to exit # when the main thread exits. self . t . daemon = True self . t . start ( )",
  "docstring_tokens": "Start the import thread ."
 },
 {
  "idx": "webquery-test-987",
  "doc": "python check dictionary key equality with string",
  "code": "def __contains__(self, key):\r        \"\"\"\r        Invoked when determining whether a specific key is in the dictionary\r        using `key in d`.\r\r        The key is looked up case-insensitively.\r        \"\"\"\r        k = self._real_key(key)\r        return k in self._data",
  "label": 1,
  "code_tokens": "def __contains__ ( self , key ) : k = self . _real_key ( key ) return k in self . _data",
  "docstring_tokens": "Invoked when determining whether a specific key is in the dictionary using key in d ."
 },
 {
  "idx": "webquery-test-988",
  "doc": "python check dictionary key equality with string",
  "code": "def __eq__(self, other):\r        \"\"\"\r        Returns true if both objects are equal\r        \"\"\"\r        if not isinstance(other, ApiKeyUpdateReq):\r            return False\r\r        return self.__dict__ == other.__dict__",
  "label": 0,
  "code_tokens": "def __eq__ ( self , other ) : if not isinstance ( other , ApiKeyUpdateReq ) : return False return self . __dict__ == other . __dict__",
  "docstring_tokens": "Returns true if both objects are equal"
 },
 {
  "idx": "webquery-test-989",
  "doc": "iterate over a number in python",
  "code": "def frange(start, stop, step, precision):\r    \"\"\"A generator that will generate a range of floats.\"\"\"\r    value = start\r    while round(value, precision) < stop:\r        yield round(value, precision)\r        value += step",
  "label": 1,
  "code_tokens": "def frange ( start , stop , step , precision ) : value = start while round ( value , precision ) < stop : yield round ( value , precision ) value += step",
  "docstring_tokens": "A generator that will generate a range of floats ."
 },
 {
  "idx": "webquery-test-990",
  "doc": "iterate over a number in python",
  "code": "def log_gen() -> Iterator[int]:\r    \"\"\"Logarithmic generator.\r    \"\"\"\r    y = 1\r    while True:\r        adder = max(1, math.pow(10, int(math.log10(y))))\r        yield int(y)\r        y = y + int(adder)",
  "label": 0,
  "code_tokens": "def log_gen ( ) -> Iterator [ int ] : y = 1 while True : adder = max ( 1 , math . pow ( 10 , int ( math . log10 ( y ) ) ) ) yield int ( y ) y = y + int ( adder )",
  "docstring_tokens": "Logarithmic generator ."
 },
 {
  "idx": "webquery-test-991",
  "doc": "adding an axis to a passed in figure python",
  "code": "def set_axis_options(self, row, column, text):\r        \"\"\"Set additionnal options as plain text.\"\"\"\r\r        subplot = self.get_subplot_at(row, column)\r        subplot.set_axis_options(text)",
  "label": 1,
  "code_tokens": "def set_axis_options ( self , row , column , text ) : subplot = self . get_subplot_at ( row , column ) subplot . set_axis_options ( text )",
  "docstring_tokens": "Set additionnal options as plain text ."
 },
 {
  "idx": "webquery-test-992",
  "doc": "adding an axis to a passed in figure python",
  "code": "def horizontal_line(ax, scale, i, **kwargs):\r    \"\"\"\r    Draws the i-th horizontal line parallel to the lower axis.\r\r    Parameters\r    ----------\r    ax: Matplotlib AxesSubplot\r        The subplot to draw on.\r    scale: float, 1.0\r        Simplex scale size.\r    i: float\r        The index of the line to draw\r    kwargs: Dictionary\r        Any kwargs to pass through to Matplotlib.\r    \"\"\"\r\r    p1 = (0, i, scale - i)\r    p2 = (scale - i, i, 0)\r    line(ax, p1, p2, **kwargs)",
  "label": 0,
  "code_tokens": "def horizontal_line ( ax , scale , i , * * kwargs ) : p1 = ( 0 , i , scale - i ) p2 = ( scale - i , i , 0 ) line ( ax , p1 , p2 , * * kwargs )",
  "docstring_tokens": "Draws the i - th horizontal line parallel to the lower axis ."
 },
 {
  "idx": "webquery-test-993",
  "doc": "python determine if path is file or directory",
  "code": "def valid_file(path: str) -> bool:\r    \"\"\"\r    Verifies that a string path actually exists and is a file\r\r    :param path: The path to verify\r    :return: **True** if path exist and is a file\r    \"\"\"\r    path = Path(path).expanduser()\r    log.debug(\"checking if %s is a valid file\", path)\r    return path.exists() and path.is_file()",
  "label": 1,
  "code_tokens": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )",
  "docstring_tokens": "Verifies that a string path actually exists and is a file"
 },
 {
  "idx": "webquery-test-994",
  "doc": "python determine if path is file or directory",
  "code": "def is_readable_dir(path):\r  \"\"\"Returns whether a path names an existing directory we can list and read files from.\"\"\"\r  return os.path.isdir(path) and os.access(path, os.R_OK) and os.access(path, os.X_OK)",
  "label": 1,
  "code_tokens": "def is_readable_dir ( path ) : return os . path . isdir ( path ) and os . access ( path , os . R_OK ) and os . access ( path , os . X_OK )",
  "docstring_tokens": "Returns whether a path names an existing directory we can list and read files from ."
 },
 {
  "idx": "webquery-test-995",
  "doc": "python folding multiple strings",
  "code": "def split(s):\r  \"\"\"Uses dynamic programming to infer the location of spaces in a string without spaces.\"\"\"\r  l = [_split(x) for x in _SPLIT_RE.split(s)]\r  return [item for sublist in l for item in sublist]",
  "label": 0,
  "code_tokens": "def split ( s ) : l = [ _split ( x ) for x in _SPLIT_RE . split ( s ) ] return [ item for sublist in l for item in sublist ]",
  "docstring_tokens": "Uses dynamic programming to infer the location of spaces in a string without spaces ."
 },
 {
  "idx": "webquery-test-996",
  "doc": "python folding multiple strings",
  "code": "def clean_strings(iterable):\r    \"\"\"\r    Take a list of strings and clear whitespace \r    on each one. If a value in the list is not a \r    string pass it through untouched.\r\r    Args:\r        iterable: mixed list\r\r    Returns: \r        mixed list\r    \"\"\"\r    retval = []\r    for val in iterable:\r        try:\r            retval.append(val.strip())\r        except(AttributeError):\r            retval.append(val)\r    return retval",
  "label": 0,
  "code_tokens": "def clean_strings ( iterable ) : retval = [ ] for val in iterable : try : retval . append ( val . strip ( ) ) except ( AttributeError ) : retval . append ( val ) return retval",
  "docstring_tokens": "Take a list of strings and clear whitespace on each one . If a value in the list is not a string pass it through untouched ."
 },
 {
  "idx": "webquery-test-997",
  "doc": "python sniff url filter",
  "code": "def strip_querystring(url):\r    \"\"\"Remove the querystring from the end of a URL.\"\"\"\r    p = six.moves.urllib.parse.urlparse(url)\r    return p.scheme + \"://\" + p.netloc + p.path",
  "label": 0,
  "code_tokens": "def strip_querystring ( url ) : p = six . moves . urllib . parse . urlparse ( url ) return p . scheme + \"://\" + p . netloc + p . path",
  "docstring_tokens": "Remove the querystring from the end of a URL ."
 },
 {
  "idx": "webquery-test-998",
  "doc": "python sniff url filter",
  "code": "def clean_url(url):\r    \"\"\"\r    Remove params, query and fragment parts from URL so that `os.path.basename`\r    and `os.path.splitext` can work correctly.\r\r    @param url: URL to clean.\r    @type url: str\r\r    @return: Cleaned URL.\r    @rtype: str\r    \"\"\"\r    parsed = urlparse(url.strip())\r    reconstructed = ParseResult(\r        parsed.scheme, parsed.netloc, parsed.path,\r        params='', query='', fragment='')\r    return reconstructed.geturl()",
  "label": 1,
  "code_tokens": "def clean_url ( url ) : parsed = urlparse ( url . strip ( ) ) reconstructed = ParseResult ( parsed . scheme , parsed . netloc , parsed . path , params = '' , query = '' , fragment = '' ) return reconstructed . geturl ( )",
  "docstring_tokens": "Remove params query and fragment parts from URL so that os . path . basename and os . path . splitext can work correctly ."
 },
 {
  "idx": "webquery-test-999",
  "doc": "check if a file can be coied python",
  "code": "def file_read(filename):\r    \"\"\"Read a file and close it.  Returns the file source.\"\"\"\r    fobj = open(filename,'r');\r    source = fobj.read();\r    fobj.close()\r    return source",
  "label": 1,
  "code_tokens": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source",
  "docstring_tokens": "Read a file and close it . Returns the file source ."
 },
 {
  "idx": "webquery-test-1000",
  "doc": "check if a file can be coied python",
  "code": "def read_file(path):\r    \"\"\"\r    Read file to string.\r\r    Arguments:\r        path (str): Source.\r    \"\"\"\r    with open(must_exist(path)) as infile:\r        r = infile.read()\r    return r",
  "label": 1,
  "code_tokens": "def read_file ( path ) : with open ( must_exist ( path ) ) as infile : r = infile . read ( ) return r",
  "docstring_tokens": "Read file to string ."
 },
 {
  "idx": "webquery-test-1001",
  "doc": "how to count uniques python series",
  "code": "def remove_dups(seq):\r    \"\"\"remove duplicates from a sequence, preserving order\"\"\"\r    seen = set()\r    seen_add = seen.add\r    return [x for x in seq if not (x in seen or seen_add(x))]",
  "label": 0,
  "code_tokens": "def remove_dups ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]",
  "docstring_tokens": "remove duplicates from a sequence preserving order"
 },
 {
  "idx": "webquery-test-1002",
  "doc": "how to count uniques python series",
  "code": "def unique(seq):\r    \"\"\"Helper function to include only unique monomials in a basis.\"\"\"\r    seen = {}\r    result = []\r    for item in seq:\r        marker = item\r        if marker in seen:\r            continue\r        seen[marker] = 1\r        result.append(item)\r    return result",
  "label": 1,
  "code_tokens": "def unique ( seq ) : seen = { } result = [ ] for item in seq : marker = item if marker in seen : continue seen [ marker ] = 1 result . append ( item ) return result",
  "docstring_tokens": "Helper function to include only unique monomials in a basis ."
 },
 {
  "idx": "webquery-test-1003",
  "doc": "python numpy array logical indexing",
  "code": "def is_bool_matrix(l):\r    r\"\"\"Checks if l is a 2D numpy array of bools\r\r    \"\"\"\r    if isinstance(l, np.ndarray):\r        if l.ndim == 2 and (l.dtype == bool):\r            return True\r    return False",
  "label": 0,
  "code_tokens": "def is_bool_matrix ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 2 and ( l . dtype == bool ) : return True return False",
  "docstring_tokens": "r Checks if l is a 2D numpy array of bools"
 },
 {
  "idx": "webquery-test-1004",
  "doc": "python numpy array logical indexing",
  "code": "def maskIndex(self):\r        \"\"\" Returns a boolean index with True if the value is masked.\r\r            Always has the same shape as the maksedArray.data, event if the mask is a single boolan.\r        \"\"\"\r        if isinstance(self.mask, bool):\r            return np.full(self.data.shape, self.mask, dtype=np.bool)\r        else:\r            return self.mask",
  "label": 1,
  "code_tokens": "def maskIndex ( self ) : if isinstance ( self . mask , bool ) : return np . full ( self . data . shape , self . mask , dtype = np . bool ) else : return self . mask",
  "docstring_tokens": "Returns a boolean index with True if the value is masked ."
 },
 {
  "idx": "webquery-test-1005",
  "doc": "python get all index string match",
  "code": "def match_all_in(self, matches, item):\r        \"\"\"Matches all matches to elements of item.\"\"\"\r        for i, match in enumerate(matches):\r            self.match(match, item + \"[\" + str(i) + \"]\")",
  "label": 1,
  "code_tokens": "def match_all_in ( self , matches , item ) : for i , match in enumerate ( matches ) : self . match ( match , item + \"[\" + str ( i ) + \"]\" )",
  "docstring_tokens": "Matches all matches to elements of item ."
 },
 {
  "idx": "webquery-test-1006",
  "doc": "python get all index string match",
  "code": "def regex_matches_to_indexed_words(matches):\r    \"\"\"Transforms tokensregex and semgrex matches to indexed words.\r    :param matches: unprocessed regex matches\r    :return: flat array of indexed words\r    \"\"\"\r    words = [dict(v, **dict([('sentence', i)]))\r             for i, s in enumerate(matches['sentences'])\r             for k, v in s.items() if k != 'length']\r    return words",
  "label": 0,
  "code_tokens": "def regex_matches_to_indexed_words ( matches ) : words = [ dict ( v , * * dict ( [ ( 'sentence' , i ) ] ) ) for i , s in enumerate ( matches [ 'sentences' ] ) for k , v in s . items ( ) if k != 'length' ] return words",
  "docstring_tokens": "Transforms tokensregex and semgrex matches to indexed words . : param matches : unprocessed regex matches : return : flat array of indexed words"
 },
 {
  "idx": "webquery-test-1007",
  "doc": "python filename as string",
  "code": "def __str__(self):\r        \"\"\"Return a string representation of the RedditContentObject.\"\"\"\r        retval = self.__unicode__()\r        if not six.PY3:\r            retval = retval.encode('utf-8')\r        return retval",
  "label": 0,
  "code_tokens": "def __str__ ( self ) : retval = self . __unicode__ ( ) if not six . PY3 : retval = retval . encode ( 'utf-8' ) return retval",
  "docstring_tokens": "Return a string representation of the RedditContentObject ."
 },
 {
  "idx": "webquery-test-1008",
  "doc": "python filename as string",
  "code": "def __str__(self):\r\t\t\"\"\" Convert to string\r\r\t\t:return: str\r\t\t\"\"\"\r\t\taddress = [\"{:02x}\".format(int(x)) for x in self.__address]\r\t\treturn ':'.join(address)",
  "label": 1,
  "code_tokens": "def __str__ ( self ) : address = [ \"{:02x}\" . format ( int ( x ) ) for x in self . __address ] return ':' . join ( address )",
  "docstring_tokens": "Convert to string"
 },
 {
  "idx": "webquery-test-1009",
  "doc": "python check if root",
  "code": "def require_root(fn):\r    \"\"\"\r    Decorator to make sure, that user is root.\r    \"\"\"\r    @wraps(fn)\r    def xex(*args, **kwargs):\r        assert os.geteuid() == 0, \\\r            \"You have to be root to run function '%s'.\" % fn.__name__\r        return fn(*args, **kwargs)\r\r    return xex",
  "label": 1,
  "code_tokens": "def require_root ( fn ) : @ wraps ( fn ) def xex ( * args , * * kwargs ) : assert os . geteuid ( ) == 0 , \"You have to be root to run function '%s'.\" % fn . __name__ return fn ( * args , * * kwargs ) return xex",
  "docstring_tokens": "Decorator to make sure that user is root ."
 },
 {
  "idx": "webquery-test-1010",
  "doc": "python check if root",
  "code": "def __init__(self, pidfile, daemonize=True, root=False, root_chk_argv=True, stdin=\"/dev/null\", stdout=\"/dev/null\", stderr=\"/dev/null\"):\r\t\t\"\"\"\r\t\tMake our daemon instance.\r\t\tpidfile: the file we're going to store the process id in. ex: /tmp/matt-daemon.pid\r\t\troot:    does this script require root? True if it does, False if it doesn't. Will be enforced.\r\t\troot_chk_argv:  does the script require '--requires-root' in sys.argv to run as root? (usage is good)\r\t\tstdin:   where the script gets stdin from. \"/dev/null\", \"/dev/stdin\", etc.\r\t\tstdout:  where the script writes stdout. \"/dev/null\", \"/dev/stdout\", etc.\r\t\tstderr:  where the script writes stderr. \"/dev/null\", \"/dev/stderr\", etc.\r\t\t\"\"\"\r\t\t# Enforce root usage or non-usage.\r\t\tRootCheck.check(root, check_argv=root_chk_argv)\r\t\tself.pidfile = pidfile\r\t\tself.should_daemonize = daemonize\r\t\tself.stdin = stdin\r\t\tself.stdout = stdout\r\t\tself.stderr = stderr",
  "label": 0,
  "code_tokens": "def __init__ ( self , pidfile , daemonize = True , root = False , root_chk_argv = True , stdin = \"/dev/null\" , stdout = \"/dev/null\" , stderr = \"/dev/null\" ) : # Enforce root usage or non-usage. RootCheck . check ( root , check_argv = root_chk_argv ) self . pidfile = pidfile self . should_daemonize = daemonize self . stdin = stdin self . stdout = stdout self . stderr = stderr",
  "docstring_tokens": "Make our daemon instance . pidfile : the file we re going to store the process id in . ex : / tmp / matt - daemon . pid root : does this script require root? True if it does False if it doesn t . Will be enforced . root_chk_argv : does the script require -- requires - root in sys . argv to run as root? ( usage is good ) stdin : where the script gets stdin from . / dev / null / dev / stdin etc . stdout : where the script writes stdout . / dev / null / dev / stdout etc . stderr : where the script writes stderr . / dev / null / dev / stderr etc ."
 },
 {
  "idx": "webquery-test-1011",
  "doc": "remove tuples that repeat python",
  "code": "def remove_dups(seq):\r    \"\"\"remove duplicates from a sequence, preserving order\"\"\"\r    seen = set()\r    seen_add = seen.add\r    return [x for x in seq if not (x in seen or seen_add(x))]",
  "label": 0,
  "code_tokens": "def remove_dups ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]",
  "docstring_tokens": "remove duplicates from a sequence preserving order"
 },
 {
  "idx": "webquery-test-1012",
  "doc": "remove tuples that repeat python",
  "code": "def remove_duplicates(lst):\r    \"\"\"\r    Emulate what a Python ``set()`` does, but keeping the element's order.\r    \"\"\"\r    dset = set()\r    return [l for l in lst if l not in dset and not dset.add(l)]",
  "label": 0,
  "code_tokens": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]",
  "docstring_tokens": "Emulate what a Python set () does but keeping the element s order ."
 },
 {
  "idx": "webquery-test-1013",
  "doc": "python count count number of roles in column",
  "code": "def is_dimension(self):\r        \"\"\"Return true if the colum is a dimension\"\"\"\r        from ambry.valuetype.core import ROLE\r        return self.role == ROLE.DIMENSION",
  "label": 0,
  "code_tokens": "def is_dimension ( self ) : from ambry . valuetype . core import ROLE return self . role == ROLE . DIMENSION",
  "docstring_tokens": "Return true if the colum is a dimension"
 },
 {
  "idx": "webquery-test-1014",
  "doc": "python count count number of roles in column",
  "code": "def is_label(self):\r        \"\"\"Return true if the colum is a dimension\"\"\"\r        from ambry.valuetype.core import ROLE\r        return self.role == ROLE.LABEL",
  "label": 0,
  "code_tokens": "def is_label ( self ) : from ambry . valuetype . core import ROLE return self . role == ROLE . LABEL",
  "docstring_tokens": "Return true if the colum is a dimension"
 },
 {
  "idx": "webquery-test-1015",
  "doc": "python format float as tring",
  "code": "def floor(self):\r    \"\"\"Round `x` and `y` down to integers.\"\"\"\r    return Point(int(math.floor(self.x)), int(math.floor(self.y)))",
  "label": 0,
  "code_tokens": "def floor ( self ) : return Point ( int ( math . floor ( self . x ) ) , int ( math . floor ( self . y ) ) )",
  "docstring_tokens": "Round x and y down to integers ."
 },
 {
  "idx": "webquery-test-1016",
  "doc": "python format float as tring",
  "code": "def realized_pnl(self):\r        \"\"\"\r        [float] \u5e73\u4ed3\u76c8\u4e8f\r        \"\"\"\r        return sum(position.realized_pnl for position in six.itervalues(self._positions))",
  "label": 0,
  "code_tokens": "def realized_pnl ( self ) : return sum ( position . realized_pnl for position in six . itervalues ( self . _positions ) )",
  "docstring_tokens": "[ float ] \u5e73\u4ed3\u76c8\u4e8f"
 },
 {
  "idx": "webquery-test-1017",
  "doc": "how to rename a file on c drive in order to download python",
  "code": "def move_file(source, dest):\r\r    \"\"\"\r\r    Move file from *source* to *dest*\r\r    If file is a Python script, also rename .pyc and .pyo files if any\r\r    \"\"\"\r\r    import shutil\r\r    shutil.copy(source, dest)\r\r    remove_file(source)",
  "label": 1,
  "code_tokens": "def move_file ( source , dest ) : import shutil shutil . copy ( source , dest ) remove_file ( source )",
  "docstring_tokens": "Move file from * source * to * dest * If file is a Python script also rename . pyc and . pyo files if any"
 },
 {
  "idx": "webquery-test-1018",
  "doc": "how to rename a file on c drive in order to download python",
  "code": "def case_insensitive_rename(src, dst):\r    \"\"\"A hack to allow us to rename paths in a case-insensitive filesystem like HFS.\"\"\"\r    temp_dir = tempfile.mkdtemp()\r    shutil.rmtree(temp_dir)\r    shutil.move(src, temp_dir)\r    shutil.move(temp_dir, dst)",
  "label": 0,
  "code_tokens": "def case_insensitive_rename ( src , dst ) : temp_dir = tempfile . mkdtemp ( ) shutil . rmtree ( temp_dir ) shutil . move ( src , temp_dir ) shutil . move ( temp_dir , dst )",
  "docstring_tokens": "A hack to allow us to rename paths in a case - insensitive filesystem like HFS ."
 },
 {
  "idx": "webquery-test-1019",
  "doc": "python check if window is active win32",
  "code": "def title(msg):\r    \"\"\"Sets the title of the console window.\"\"\"\r    if sys.platform.startswith(\"win\"):\r        ctypes.windll.kernel32.SetConsoleTitleW(tounicode(msg))",
  "label": 0,
  "code_tokens": "def title ( msg ) : if sys . platform . startswith ( \"win\" ) : ctypes . windll . kernel32 . SetConsoleTitleW ( tounicode ( msg ) )",
  "docstring_tokens": "Sets the title of the console window ."
 },
 {
  "idx": "webquery-test-1020",
  "doc": "python check if window is active win32",
  "code": "def ResetConsoleColor() -> bool:\r    \"\"\"\r    Reset to the default text color on console window.\r    Return bool, True if succeed otherwise False.\r    \"\"\"\r    if sys.stdout:\r        sys.stdout.flush()\r    bool(ctypes.windll.kernel32.SetConsoleTextAttribute(_ConsoleOutputHandle, _DefaultConsoleColor))",
  "label": 0,
  "code_tokens": "def ResetConsoleColor ( ) -> bool : if sys . stdout : sys . stdout . flush ( ) bool ( ctypes . windll . kernel32 . SetConsoleTextAttribute ( _ConsoleOutputHandle , _DefaultConsoleColor ) )",
  "docstring_tokens": "Reset to the default text color on console window . Return bool True if succeed otherwise False ."
 },
 {
  "idx": "webquery-test-1021",
  "doc": "using dictionaries to prove password username combinations in python",
  "code": "def check_auth(username, pwd):\r    \"\"\"This function is called to check if a username /\r    password combination is valid.\r    \"\"\"\r    cfg = get_current_config()\r    return username == cfg[\"dashboard_httpauth\"].split(\r        \":\")[0] and pwd == cfg[\"dashboard_httpauth\"].split(\":\")[1]",
  "label": 1,
  "code_tokens": "def check_auth ( username , pwd ) : cfg = get_current_config ( ) return username == cfg [ \"dashboard_httpauth\" ] . split ( \":\" ) [ 0 ] and pwd == cfg [ \"dashboard_httpauth\" ] . split ( \":\" ) [ 1 ]",
  "docstring_tokens": "This function is called to check if a username / password combination is valid ."
 },
 {
  "idx": "webquery-test-1022",
  "doc": "using dictionaries to prove password username combinations in python",
  "code": "def check_auth(email, password):\r    \"\"\"Check if a username/password combination is valid.\r    \"\"\"\r    try:\r        user = User.get(User.email == email)\r    except User.DoesNotExist:\r        return False\r    return password == user.password",
  "label": 1,
  "code_tokens": "def check_auth ( email , password ) : try : user = User . get ( User . email == email ) except User . DoesNotExist : return False return password == user . password",
  "docstring_tokens": "Check if a username / password combination is valid ."
 },
 {
  "idx": "webquery-test-1023",
  "doc": "python how to delete last items on a list",
  "code": "def list_move_to_front(l,value='other'):\r    \"\"\"if the value is in the list, move it to the front and return it.\"\"\"\r    l=list(l)\r    if value in l:\r        l.remove(value)\r        l.insert(0,value)\r    return l",
  "label": 0,
  "code_tokens": "def list_move_to_front ( l , value = 'other' ) : l = list ( l ) if value in l : l . remove ( value ) l . insert ( 0 , value ) return l",
  "docstring_tokens": "if the value is in the list move it to the front and return it ."
 },
 {
  "idx": "webquery-test-1024",
  "doc": "python how to delete last items on a list",
  "code": "def _poplast(self):\r        \"\"\"For avoiding lock during inserting to keep maxlen\"\"\"\r\r        try:\r            tup = self.data.pop()\r        except IndexError as ex:\r            ex.args = ('DEPQ is already empty',)\r            raise\r\r        self_items = self.items\r\r        try:\r            self_items[tup[0]] -= 1\r            if self_items[tup[0]] == 0:\r                del self_items[tup[0]]\r        except TypeError:\r            r = repr(tup[0])\r            self_items[r] -= 1\r            if self_items[r] == 0:\r                del self_items[r]\r\r        return tup",
  "label": 1,
  "code_tokens": "def _poplast ( self ) : try : tup = self . data . pop ( ) except IndexError as ex : ex . args = ( 'DEPQ is already empty' , ) raise self_items = self . items try : self_items [ tup [ 0 ] ] -= 1 if self_items [ tup [ 0 ] ] == 0 : del self_items [ tup [ 0 ] ] except TypeError : r = repr ( tup [ 0 ] ) self_items [ r ] -= 1 if self_items [ r ] == 0 : del self_items [ r ] return tup",
  "docstring_tokens": "For avoiding lock during inserting to keep maxlen"
 },
 {
  "idx": "webquery-test-1025",
  "doc": "get rid of spaces between coding in a list python",
  "code": "def split_strings_in_list_retain_spaces(orig_list):\r    \"\"\"\r    Function to split every line in a list, and retain spaces for a rejoin\r    :param orig_list: Original list\r    :return:\r        A List with split lines\r\r    \"\"\"\r    temp_list = list()\r    for line in orig_list:\r        line_split = __re.split(r'(\\s+)', line)\r        temp_list.append(line_split)\r\r    return temp_list",
  "label": 0,
  "code_tokens": "def split_strings_in_list_retain_spaces ( orig_list ) : temp_list = list ( ) for line in orig_list : line_split = __re . split ( r'(\\s+)' , line ) temp_list . append ( line_split ) return temp_list",
  "docstring_tokens": "Function to split every line in a list and retain spaces for a rejoin : param orig_list : Original list : return : A List with split lines"
 },
 {
  "idx": "webquery-test-1026",
  "doc": "get rid of spaces between coding in a list python",
  "code": "def strip_spaces(s):\r    \"\"\" Strip excess spaces from a string \"\"\"\r    return u\" \".join([c for c in s.split(u' ') if c])",
  "label": 1,
  "code_tokens": "def strip_spaces ( s ) : return u\" \" . join ( [ c for c in s . split ( u' ' ) if c ] )",
  "docstring_tokens": "Strip excess spaces from a string"
 },
 {
  "idx": "webquery-test-1027",
  "doc": "make html tag italics in python",
  "code": "def stylize(text, styles, reset=True):\r    \"\"\"conveniently styles your text as and resets ANSI codes at its end.\"\"\"\r    terminator = attr(\"reset\") if reset else \"\"\r    return \"{}{}{}\".format(\"\".join(styles), text, terminator)",
  "label": 1,
  "code_tokens": "def stylize ( text , styles , reset = True ) : terminator = attr ( \"reset\" ) if reset else \"\" return \"{}{}{}\" . format ( \"\" . join ( styles ) , text , terminator )",
  "docstring_tokens": "conveniently styles your text as and resets ANSI codes at its end ."
 },
 {
  "idx": "webquery-test-1028",
  "doc": "make html tag italics in python",
  "code": "def draw_header(self, stream, header):\r        \"\"\"Draw header with underline\"\"\"\r        stream.writeln('=' * (len(header) + 4))\r        stream.writeln('| ' + header + ' |')\r        stream.writeln('=' * (len(header) + 4))\r        stream.writeln()",
  "label": 0,
  "code_tokens": "def draw_header ( self , stream , header ) : stream . writeln ( '=' * ( len ( header ) + 4 ) ) stream . writeln ( '| ' + header + ' |' ) stream . writeln ( '=' * ( len ( header ) + 4 ) ) stream . writeln ( )",
  "docstring_tokens": "Draw header with underline"
 },
 {
  "idx": "webquery-test-1029",
  "doc": "python read all lines in a text file",
  "code": "def txt_line_iterator(path):\r  \"\"\"Iterate through lines of file.\"\"\"\r  with tf.gfile.Open(path) as f:\r    for line in f:\r      yield line.strip()",
  "label": 1,
  "code_tokens": "def txt_line_iterator ( path ) : with tf . gfile . Open ( path ) as f : for line in f : yield line . strip ( )",
  "docstring_tokens": "Iterate through lines of file ."
 },
 {
  "idx": "webquery-test-1030",
  "doc": "python read all lines in a text file",
  "code": "def write_file(writer, filename):\r  \"\"\"Write all of lines from file using the writer.\"\"\"\r  for line in txt_line_iterator(filename):\r    writer.write(line)\r    writer.write(\"\\n\")",
  "label": 0,
  "code_tokens": "def write_file ( writer , filename ) : for line in txt_line_iterator ( filename ) : writer . write ( line ) writer . write ( \"\\n\" )",
  "docstring_tokens": "Write all of lines from file using the writer ."
 },
 {
  "idx": "webquery-test-1031",
  "doc": "how to remove new lines in python",
  "code": "def text_remove_empty_lines(text):\r    \"\"\"\r    Whitespace normalization:\r\r      - Strip empty lines\r      - Strip trailing whitespace\r    \"\"\"\r    lines = [ line.rstrip()  for line in text.splitlines()  if line.strip() ]\r    return \"\\n\".join(lines)",
  "label": 0,
  "code_tokens": "def text_remove_empty_lines ( text ) : lines = [ line . rstrip ( ) for line in text . splitlines ( ) if line . strip ( ) ] return \"\\n\" . join ( lines )",
  "docstring_tokens": "Whitespace normalization :"
 },
 {
  "idx": "webquery-test-1032",
  "doc": "how to remove new lines in python",
  "code": "def fix_line_breaks(s):\r    \"\"\"\r    Convert \\r\\n and \\r to \\n chars. Strip any leading or trailing whitespace\r    on each line. Remove blank lines.\r    \"\"\"\r    l = s.splitlines()\r    x = [i.strip() for i in l]\r    x = [i for i in x if i]  # remove blank lines\r    return \"\\n\".join(x)",
  "label": 0,
  "code_tokens": "def fix_line_breaks ( s ) : l = s . splitlines ( ) x = [ i . strip ( ) for i in l ] x = [ i for i in x if i ] # remove blank lines return \"\\n\" . join ( x )",
  "docstring_tokens": "Convert \\ r \\ n and \\ r to \\ n chars . Strip any leading or trailing whitespace on each line . Remove blank lines ."
 },
 {
  "idx": "webquery-test-1033",
  "doc": "python strcut to namedtuple",
  "code": "def dictify(a_named_tuple):\r    \"\"\"Transform a named tuple into a dictionary\"\"\"\r    return dict((s, getattr(a_named_tuple, s)) for s in a_named_tuple._fields)",
  "label": 0,
  "code_tokens": "def dictify ( a_named_tuple ) : return dict ( ( s , getattr ( a_named_tuple , s ) ) for s in a_named_tuple . _fields )",
  "docstring_tokens": "Transform a named tuple into a dictionary"
 },
 {
  "idx": "webquery-test-1034",
  "doc": "python strcut to namedtuple",
  "code": "def as_tuple(self, value):\r        \"\"\"Utility function which converts lists to tuples.\"\"\"\r        if isinstance(value, list):\r            value = tuple(value)\r        return value",
  "label": 0,
  "code_tokens": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value",
  "docstring_tokens": "Utility function which converts lists to tuples ."
 },
 {
  "idx": "webquery-test-1035",
  "doc": "python paths to dict",
  "code": "def list2dict(lst):\r    \"\"\"Takes a list of (key,value) pairs and turns it into a dict.\"\"\"\r\r    dic = {}\r    for k,v in lst: dic[k] = v\r    return dic",
  "label": 0,
  "code_tokens": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic",
  "docstring_tokens": "Takes a list of ( key value ) pairs and turns it into a dict ."
 },
 {
  "idx": "webquery-test-1036",
  "doc": "python paths to dict",
  "code": "def str_dict(some_dict):\r    \"\"\"Convert dict of ascii str/unicode to dict of str, if necessary\"\"\"\r    return {str(k): str(v) for k, v in some_dict.items()}",
  "label": 1,
  "code_tokens": "def str_dict ( some_dict ) : return { str ( k ) : str ( v ) for k , v in some_dict . items ( ) }",
  "docstring_tokens": "Convert dict of ascii str / unicode to dict of str if necessary"
 },
 {
  "idx": "webquery-test-1037",
  "doc": "how to run python function every certain amount of time",
  "code": "def repeat(f, dt=1/60):\r    \"\"\" \u91cd\u590d\u6267\u884c\u51fd\u6570f\uff0c\u65f6\u95f4\u95f4\u9694dt \"\"\"\r    stop(f)\r    pyglet.clock.schedule_interval(f, dt)",
  "label": 1,
  "code_tokens": "def repeat ( f , dt = 1 / 60 ) : stop ( f ) pyglet . clock . schedule_interval ( f , dt )",
  "docstring_tokens": "\u91cd\u590d\u6267\u884c\u51fd\u6570f\uff0c\u65f6\u95f4\u95f4\u9694dt"
 },
 {
  "idx": "webquery-test-1038",
  "doc": "how to run python function every certain amount of time",
  "code": "def main(idle):\r    \"\"\"Any normal python logic which runs a loop. Can take arguments.\"\"\"\r    while True:\r\r        LOG.debug(\"Sleeping for {0} seconds.\".format(idle))\r        time.sleep(idle)",
  "label": 0,
  "code_tokens": "def main ( idle ) : while True : LOG . debug ( \"Sleeping for {0} seconds.\" . format ( idle ) ) time . sleep ( idle )",
  "docstring_tokens": "Any normal python logic which runs a loop . Can take arguments ."
 },
 {
  "idx": "webquery-test-1039",
  "doc": "pull items randomly from lists in python",
  "code": "def get_randomized_guid_sample(self, item_count):\r        \"\"\" Fetch a subset of randomzied GUIDs from the whitelist \"\"\"\r        dataset = self.get_whitelist()\r        random.shuffle(dataset)\r        return dataset[:item_count]",
  "label": 0,
  "code_tokens": "def get_randomized_guid_sample ( self , item_count ) : dataset = self . get_whitelist ( ) random . shuffle ( dataset ) return dataset [ : item_count ]",
  "docstring_tokens": "Fetch a subset of randomzied GUIDs from the whitelist"
 },
 {
  "idx": "webquery-test-1040",
  "doc": "pull items randomly from lists in python",
  "code": "def rand_elem(seq, n=None):\r    \"\"\"returns a random element from seq n times. If n is None, it continues indefinitly\"\"\"\r    return map(random.choice, repeat(seq, n) if n is not None else repeat(seq))",
  "label": 1,
  "code_tokens": "def rand_elem ( seq , n = None ) : return map ( random . choice , repeat ( seq , n ) if n is not None else repeat ( seq ) )",
  "docstring_tokens": "returns a random element from seq n times . If n is None it continues indefinitly"
 },
 {
  "idx": "webquery-test-1041",
  "doc": "python how to change list into string",
  "code": "def list2string (inlist,delimit=' '):\r    \"\"\"\rConverts a 1D list to a single long string for file output, using\rthe string.join function.\r\rUsage:   list2string (inlist,delimit=' ')\rReturns: the string created from inlist\r\"\"\"\r    stringlist = [makestr(_) for _ in inlist]\r    return string.join(stringlist,delimit)",
  "label": 1,
  "code_tokens": "def list2string ( inlist , delimit = ' ' ) : stringlist = [ makestr ( _ ) for _ in inlist ] return string . join ( stringlist , delimit )",
  "docstring_tokens": "Converts a 1D list to a single long string for file output using the string . join function ."
 },
 {
  "idx": "webquery-test-1042",
  "doc": "python how to change list into string",
  "code": "def list_to_str(list, separator=','):\r    \"\"\"\r    >>> list = [0, 0, 7]\r    >>> list_to_str(list)\r    '0,0,7'\r    \"\"\"\r    list = [str(x) for x in list]\r    return separator.join(list)",
  "label": 1,
  "code_tokens": "def list_to_str ( list , separator = ',' ) : list = [ str ( x ) for x in list ] return separator . join ( list )",
  "docstring_tokens": ">>> list = [ 0 0 7 ] >>> list_to_str ( list ) 0 0 7"
 },
 {
  "idx": "webquery-test-1043",
  "doc": "elasticsearch python return all index name",
  "code": "def get_model_index_properties(instance, index):\r    \"\"\"Return the list of properties specified for a model in an index.\"\"\"\r    mapping = get_index_mapping(index)\r    doc_type = instance._meta.model_name.lower()\r    return list(mapping[\"mappings\"][doc_type][\"properties\"].keys())",
  "label": 1,
  "code_tokens": "def get_model_index_properties ( instance , index ) : mapping = get_index_mapping ( index ) doc_type = instance . _meta . model_name . lower ( ) return list ( mapping [ \"mappings\" ] [ doc_type ] [ \"properties\" ] . keys ( ) )",
  "docstring_tokens": "Return the list of properties specified for a model in an index ."
 },
 {
  "idx": "webquery-test-1044",
  "doc": "elasticsearch python return all index name",
  "code": "def get_indexes(self, schema, **kwargs):\r        \"\"\"\r        get all the indexes\r\r        schema -- Schema()\r\r        return -- dict -- the indexes in {indexname: fields} format\r        \"\"\"\r        with self.connection(**kwargs) as connection:\r            kwargs['connection'] = connection\r            return self._get_indexes(schema, **kwargs)",
  "label": 0,
  "code_tokens": "def get_indexes ( self , schema , * * kwargs ) : with self . connection ( * * kwargs ) as connection : kwargs [ 'connection' ] = connection return self . _get_indexes ( schema , * * kwargs )",
  "docstring_tokens": "get all the indexes"
 },
 {
  "idx": "webquery-test-1045",
  "doc": "python celery worker shutdown after start",
  "code": "def shutdown(self):\r        \"\"\"\r        Shutdown the client and all of its managed resources:\r\r        - the workers\r        - the scheduler threads\r\r        :return: None\r        \"\"\"\r        self._storage.clear()\r        self._scheduler.shutdown(wait=False)\r        self._workers.shutdown(wait=False)",
  "label": 1,
  "code_tokens": "def shutdown ( self ) : self . _storage . clear ( ) self . _scheduler . shutdown ( wait = False ) self . _workers . shutdown ( wait = False )",
  "docstring_tokens": "Shutdown the client and all of its managed resources :"
 },
 {
  "idx": "webquery-test-1046",
  "doc": "python celery worker shutdown after start",
  "code": "def _shutdown_minions(self):\r        \"\"\"\r        send the SIGNINT signal to each worker in the pool.\r        \"\"\"\r        setproctitle('pyres_manager: Waiting on children to shutdown.')\r        for minion in self._workers.values():\r            minion.terminate()\r            minion.join()",
  "label": 0,
  "code_tokens": "def _shutdown_minions ( self ) : setproctitle ( 'pyres_manager: Waiting on children to shutdown.' ) for minion in self . _workers . values ( ) : minion . terminate ( ) minion . join ( )",
  "docstring_tokens": "send the SIGNINT signal to each worker in the pool ."
 }
]